<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Keviness&#39;s Blog</title>
  
  <subtitle>for man is man and master of his fate</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://github.com/keviness/"/>
  <updated>2020-06-21T04:45:41.690Z</updated>
  <id>https://github.com/keviness/</id>
  
  <author>
    <name>keviness</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JavaScript实现跨行合并table中相同单元格</title>
    <link href="https://github.com/keviness/2020/06/21/JavaScript/javascript_table/"/>
    <id>https://github.com/keviness/2020/06/21/JavaScript/javascript_table/</id>
    <published>2020-06-21T04:31:54.893Z</published>
    <updated>2020-06-21T04:45:41.690Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>&emsp;在web中我们经常需要用到table表格对我们的数据进行呈现，table表格能很友好地显示我们的数据，那在动态创建table时，如何进行跨行合并相同内容单元格呢？以下是一些个方法：</p><a id="more"></a><h3 id="合并表格相同列的内容"><a href="#合并表格相同列的内容" class="headerlink" title="合并表格相同列的内容"></a>合并表格相同列的内容</h3><blockquote><ul><li>table：表格或者表格ID（最好是tbody，避免把表尾给合并了)</li><li>startRow：起始行，没有标题就从0开始</li><li>endRow：终止行，此参数是递归时检查的范围，一开始时会自动赋值为最后一行</li><li>col：当前处理的列</li><li>endCol:终止列</li><li>isInit:是否初始调用，如果是则在终止行为0时自动取最后一行</li></ul></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">MergeCell</span>(<span class="params">table, startRow, endRow, col, endCol isInit</span>)  </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> (table) == <span class="string">'string'</span>)</span><br><span class="line">        table = <span class="built_in">document</span>.getElementById(table);</span><br><span class="line">    <span class="keyword">if</span> (col &gt;= table.rows[<span class="number">0</span>].cells.length || col &gt; endCol) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (isInit == <span class="literal">undefined</span>) isInit = <span class="literal">true</span>;</span><br><span class="line">    <span class="comment">//当检查第0列时检查所有行</span></span><br><span class="line">    <span class="keyword">if</span> ((col == <span class="number">0</span> || endRow == <span class="number">0</span>) &amp;&amp; isInit) &#123;</span><br><span class="line">        endRow = table.rows.length - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = startRow; i &lt; endRow; i++) &#123;</span><br><span class="line">        <span class="comment">//程序是自左向右合并</span></span><br><span class="line">        <span class="keyword">if</span> (table.rows[startRow].cells[col].innerHTML == table.rows[i + <span class="number">1</span>].cells[col].innerHTML) &#123;</span><br><span class="line">        <span class="comment">//如果相同则隐藏下一行的同列单元格</span></span><br><span class="line">            table.rows[i + <span class="number">1</span>].cells[col].style.display = <span class="string">'none'</span>;</span><br><span class="line">        <span class="comment">//更新rowSpan属性</span></span><br><span class="line">            table.rows[startRow].cells[col].rowSpan = (table.rows[startRow].cells[col].rowSpan | <span class="number">0</span>) + <span class="number">1</span>;</span><br><span class="line">        <span class="comment">//当循环到终止行前一行并且起始行和终止行不相同时递归(因为上面的代码已经检查了i+1行，所以此处只到endRow-1)</span></span><br><span class="line">            <span class="keyword">if</span> (i == endRow - <span class="number">1</span> &amp;&amp; startRow != endRow) &#123;</span><br><span class="line">            MergeCell(table, startRow, endRow, col + <span class="number">1</span>, endCol, <span class="literal">false</span>);</span><br><span class="line">            &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//起始行，终止行不变，检查下一列</span></span><br><span class="line">        MergeCell(table, startRow, i, col + <span class="number">1</span>, endCol, <span class="literal">false</span>);</span><br><span class="line">        <span class="comment">//增加起始行</span></span><br><span class="line">        startRow = i + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;&amp;emsp;在web中我们经常需要用到table表格对我们的数据进行呈现，table表格能很友好地显示我们的数据，那在动态创建table时，如何进行跨行合并相同内容单元格呢？以下是一些个方法：&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="JavaScript" scheme="https://github.com/keviness/tags/JavaScript/"/>
    
      <category term="Table" scheme="https://github.com/keviness/tags/Table/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript阻止浏览器默认事件发生</title>
    <link href="https://github.com/keviness/2020/06/08/JavaScript/javascript_preventDefault/"/>
    <id>https://github.com/keviness/2020/06/08/JavaScript/javascript_preventDefault/</id>
    <published>2020-06-07T16:00:00.000Z</published>
    <updated>2020-06-21T04:45:11.645Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>&emsp;在JavaScript Event中经常需要对事件进行阻止，主要有以下方法：<br>&emsp;event.preventDefault()阻止浏览器默认事件。<br>&emsp;event.stopPropagation()阻止元素事件冒泡。</p><a id="more"></a><h3 id="一，event-preventDefault"><a href="#一，event-preventDefault" class="headerlink" title="一，event.preventDefault()"></a>一，event.preventDefault()</h3><blockquote><p>阻止浏览器默认行为</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"/jquery/jquery.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="javascript">    $(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        $(<span class="string">"a"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span></span><br><span class="line">        event.preventDefault();</span><br><span class="line">        &#125;);</span><br><span class="line"><span class="actionscript">    &#125;);        <span class="comment">//event.preventDefault() 方法将防止上面的链接打开 URL</span></span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://w3school.com.cn/"</span>&gt;</span>W3School<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="二，event-stopPropagation"><a href="#二，event-stopPropagation" class="headerlink" title="二，event.stopPropagation()"></a>二，event.stopPropagation()</h3><blockquote><p>阻止元素事件冒泡。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">'myBtn'</span>);</span><br><span class="line"><span class="built_in">document</span>.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    alert(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">btn.onclick = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line">    event.stopPropagation();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;这样当点击btn时，绑定在document的事件不会被触发，因为btn的事件冒泡机制被组织了。</p><h3 id="三，兼容IE浏览器"><a href="#三，兼容IE浏览器" class="headerlink" title="三，兼容IE浏览器"></a>三，兼容IE浏览器</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (event.stopPropagation)&#123;  </span><br><span class="line">    event.stopPropagation();  </span><br><span class="line">&#125;<span class="keyword">else</span>&#123;  </span><br><span class="line">    event.cancelBubble=<span class="literal">true</span>;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (event.preventDefault)&#123;  </span><br><span class="line">event.preventDefault();  </span><br><span class="line">&#125;<span class="keyword">else</span>&#123;  </span><br><span class="line">    event.returnValue=<span class="literal">false</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;&amp;emsp;在JavaScript Event中经常需要对事件进行阻止，主要有以下方法：&lt;br&gt;&amp;emsp;event.preventDefault()阻止浏览器默认事件。&lt;br&gt;&amp;emsp;event.stopPropagation()阻止元素事件冒泡。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="HTML" scheme="https://github.com/keviness/tags/HTML/"/>
    
      <category term="JavaScript" scheme="https://github.com/keviness/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript对HTML进行编码与解码</title>
    <link href="https://github.com/keviness/2020/05/31/JavaScript/javascript_Encode/"/>
    <id>https://github.com/keviness/2020/05/31/JavaScript/javascript_Encode/</id>
    <published>2020-05-30T16:00:00.000Z</published>
    <updated>2020-06-21T04:44:53.340Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景："><a href="#背景：" class="headerlink" title="背景："></a>背景：</h2><p>&emsp;经常遇到一些字符需要进行转义后才能显示到界面上。此时，就需要进行编码与解码，那么如何进行编码和解码呢？以下是一些个总结：</p><a id="more"></a><h3 id="代码示例："><a href="#代码示例：" class="headerlink" title="代码示例："></a>代码示例：</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">var</span> HtmlUtil = &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*1.用浏览器内部转换器实现html编码*/</span></span><br><span class="line">    htmlEncode:<span class="function"><span class="keyword">function</span> (<span class="params">html</span>)</span>&#123;</span><br><span class="line">        <span class="comment">//动态创建一个容器标签元素</span></span><br><span class="line">        <span class="keyword">var</span> temp = <span class="built_in">document</span>.createElement (<span class="string">"div"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将要转换的字符串设置为元素的innerText(ie)或textContent(firefox，google支持)</span></span><br><span class="line">        (temp.textContent != <span class="literal">undefined</span> ) ? (temp.textContent = html) : (temp.innerText = html);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//返回元素的innerHTML，即得HTML编码的字符串</span></span><br><span class="line">        <span class="keyword">var</span> output = temp.innerHTML;</span><br><span class="line">        temp = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">return</span> output;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*2.用浏览器内部转换器实现html解码*/</span></span><br><span class="line">    htmlDecode:<span class="function"><span class="keyword">function</span> (<span class="params">text</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//动态创建一个容器标签元素</span></span><br><span class="line">        <span class="keyword">var</span> temp = <span class="built_in">document</span>.createElement(<span class="string">"div"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将要转换的字符串设置为元素的innerHTML(ie，firefox，google)</span></span><br><span class="line">        temp.innerHTML = text;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//返回这个元素的innerText(ie)或textContent(firefox，google)，即得到经HTML解码的字符串</span></span><br><span class="line">        <span class="keyword">var</span> output = temp.innerText || temp.textContent;</span><br><span class="line">        temp = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">return</span> output;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*3.用正则表达式实现html编码*/</span></span><br><span class="line">    htmlEncodeByRegExp:<span class="function"><span class="keyword">function</span> (<span class="params">str</span>)</span>&#123; </span><br><span class="line">        <span class="keyword">var</span> s = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">if</span>(str.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">        s = str.replace(<span class="regexp">/&amp;/g</span>,<span class="string">"&amp;"</span>);</span><br><span class="line">        s = s.replace(<span class="regexp">/&lt;/g</span>,<span class="string">"&lt;"</span>);</span><br><span class="line">        s = s.replace(<span class="regexp">/&gt;/g</span>,<span class="string">"&gt;"</span>);</span><br><span class="line">        s = s.replace(<span class="regexp">/ /g</span>,<span class="string">" "</span>);</span><br><span class="line">        s = s.replace(<span class="regexp">/\'/g</span>,<span class="string">"'"</span>);</span><br><span class="line">        s = s.replace(<span class="regexp">/\"/g</span>,<span class="string">""</span><span class="string">");</span></span><br><span class="line"><span class="string">        return s; </span></span><br><span class="line"><span class="string">    &#125;,</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    /*4.用正则表达式实现html解码*/</span></span><br><span class="line"><span class="string">    htmlDecodeByRegExp:function (str)&#123; </span></span><br><span class="line"><span class="string">        var s = "</span><span class="string">";</span></span><br><span class="line"><span class="string">        if(str.length == 0) return "</span><span class="string">";</span></span><br><span class="line"><span class="string">        s = str.replace("</span>&amp;<span class="string">", /&amp;/g);</span></span><br><span class="line"><span class="string">        s = s.replace("</span>&gt;<span class="string">", /&lt;/g);</span></span><br><span class="line"><span class="string">        s = s.replace("</span>&lt;<span class="string">", /&gt;/g);</span></span><br><span class="line"><span class="string">        s = s.replace("</span> <span class="string">", / /g);</span></span><br><span class="line"><span class="string">        s = s.replace("</span>\<span class="string">'", /'</span>/g);</span><br><span class="line">        s = s.replace(<span class="string">"\""</span>, /<span class="string">"/g);</span></span><br><span class="line"><span class="string">        return s; </span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;;</span></span><br><span class="line"><span class="string">&lt;/script&gt;</span></span><br></pre></td></tr></table></figure><h3 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h3><ul><li><a href="https://www.cnblogs.com/GumpYan/p/7883133.html" target="_blank" rel="noopener">JavaScript对HTML进行编码与解码</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;背景：&quot;&gt;&lt;a href=&quot;#背景：&quot; class=&quot;headerlink&quot; title=&quot;背景：&quot;&gt;&lt;/a&gt;背景：&lt;/h2&gt;&lt;p&gt;&amp;emsp;经常遇到一些字符需要进行转义后才能显示到界面上。此时，就需要进行编码与解码，那么如何进行编码和解码呢？以下是一些个总结：&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="JavaScript" scheme="https://github.com/keviness/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Array Sort(数组排序)</title>
    <link href="https://github.com/keviness/2020/05/26/JavaScript/javascript_ArraySort/"/>
    <id>https://github.com/keviness/2020/05/26/JavaScript/javascript_ArraySort/</id>
    <published>2020-05-25T16:00:00.000Z</published>
    <updated>2020-06-19T12:12:51.628Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>&emsp;在JavaScript中，我们经常需要对各种数据进行排序，array.sort()运用比较频繁，它可以自定义排序函数，功能强大，以下是一些个总结：</p><a id="more"></a><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><blockquote><ul><li>array.sort([compareFunction])</li><li>compareFunction：用来指定按某种顺序进行排列的函数。</li><li>返回值：排序后的数组。</li><li>注意：数组原地排序，不进行复制。</li></ul></blockquote><h3 id="详细描述"><a href="#详细描述" class="headerlink" title="详细描述"></a>详细描述</h3><blockquote><ul><li>如果没有指明compareFunction，那么元素会按照转换为的字符串的诸个字符的Unicode位点进行排序。</li><li>例如”Banana”会被排列到”cherry”之前。当数字按由小到大排序时,9出现在80之前，但因为（没有指明compareFunction），比较的数字会先被转换为字符串，所以在Unicode顺序上”80”要比”9”要靠前。</li><li>如果指明了compareFunction，那么数组会按照调用该函数的返回值排序。a和b是两个将要被比较的元素：</li></ul></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">compareFunction(a, b)&lt;<span class="number">0</span>，a会被排列到b之前；</span><br><span class="line">compareFunction(a, b)==<span class="number">0</span>，a和b的相对位置不变。</span><br><span class="line">compareFunction(a, b)&gt;<span class="number">0</span>，b排列到a之前。</span><br></pre></td></tr></table></figure><h3 id="compare-a-b-函数"><a href="#compare-a-b-函数" class="headerlink" title="compare(a, b)函数"></a>compare(a, b)函数</h3><h4 id="比较Number与String（通用）"><a href="#比较Number与String（通用）" class="headerlink" title="比较Number与String（通用）"></a>比较Number与String（通用）</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">compare</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (a &lt; b ) &#123;   </span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (a &gt; b ) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="比较Number"><a href="#比较Number" class="headerlink" title="比较Number"></a>比较Number</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">compareNumbers</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a - b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="排序示例"><a href="#排序示例" class="headerlink" title="排序示例"></a>排序示例</h3><h4 id="数组排序"><a href="#数组排序" class="headerlink" title="数组排序"></a>数组排序</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> numbers = [<span class="number">4</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">3</span>];</span><br><span class="line">numbers.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a - b;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(numbers);</span><br><span class="line">等价于：</span><br><span class="line"><span class="keyword">var</span> numbers = [<span class="number">4</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">3</span>]; </span><br><span class="line">numbers.sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a - b); </span><br><span class="line"><span class="built_in">console</span>.log(numbers);</span><br></pre></td></tr></table></figure><h4 id="对象类型排序"><a href="#对象类型排序" class="headerlink" title="对象类型排序"></a>对象类型排序</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> items = [</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">'Edward'</span>, <span class="attr">value</span>: <span class="number">21</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">'Sharpe'</span>, <span class="attr">value</span>: <span class="number">37</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">'And'</span>, <span class="attr">value</span>: <span class="number">45</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">'The'</span>, <span class="attr">value</span>: <span class="number">-12</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">'Magnetic'</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">'Zeros'</span>, <span class="attr">value</span>: <span class="number">37</span> &#125;</span><br><span class="line">];</span><br><span class="line"><span class="comment">// sort by value</span></span><br><span class="line">items.sort(<span class="function"><span class="keyword">function</span> (<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (a.value - b.value)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// sort by name</span></span><br><span class="line">items.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> nameA = a.name.toUpperCase(); </span><br><span class="line">    <span class="keyword">var</span> nameB = b.name.toUpperCase(); </span><br><span class="line">    <span class="keyword">if</span> (nameA &lt; nameB) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (nameA &gt; nameB) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="非ASCII字符排序"><a href="#非ASCII字符排序" class="headerlink" title="非ASCII字符排序"></a>非ASCII字符排序</h3><blockquote><p>当排序非ASCII字符的字符串（如包含类似e、é、è、a、ä等字符的字符串）。一些非英语语言的字符串需要使用String.localeCompare。</p></blockquote><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> items = [<span class="string">'réservé'</span>, <span class="string">'premier'</span>, <span class="string">'cliché'</span>];</span><br><span class="line">items.sort(<span class="function"><span class="keyword">function</span> (<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.localeCompare(b);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="用映射辅助排序"><a href="#用映射辅助排序" class="headerlink" title="用映射辅助排序"></a>用映射辅助排序</h3><blockquote><ul><li>compareFunction可能需要对元素做多次映射以实现排序，当 compareFunction较为复杂，且元素较多的时候，可能会导致很高的负载。可使用 map()辅助排序。</li><li>基本思想是首先将数组中的每个元素比较的实际值取出来，排序后再将数组恢复。</li></ul></blockquote><h4 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> list = [<span class="string">'Delta'</span>, <span class="string">'alpha'</span>, <span class="string">'CHARLIE'</span>, <span class="string">'bravo'</span>];</span><br><span class="line"><span class="keyword">var</span> mapped = list.map(<span class="function"><span class="keyword">function</span>(<span class="params">el, i</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123; <span class="attr">index</span>: i, <span class="attr">value</span>: el.toLowerCase() &#125;;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">mapped.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> +(a.value &gt; b.value) || +(a.value === b.value) - <span class="number">1</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> result = mapped.map(<span class="function"><span class="keyword">function</span>(<span class="params">el</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> list[el.index];</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;&amp;emsp;在JavaScript中，我们经常需要对各种数据进行排序，array.sort()运用比较频繁，它可以自定义排序函数，功能强大，以下是一些个总结：&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="JavaScript" scheme="https://github.com/keviness/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>用C语言实现贪吃蛇</title>
    <link href="https://github.com/keviness/2020/05/02/CLanguage/Clanguage_first/"/>
    <id>https://github.com/keviness/2020/05/02/CLanguage/Clanguage_first/</id>
    <published>2020-05-01T16:00:00.000Z</published>
    <updated>2020-06-21T04:49:30.576Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>&emsp;四月份，随着考研复试的临近，毕业论文也在此刻提上了日程，我停下了手边的前端学习计划。<br>&emsp;我想着在四月底实现心心念念的<a href="https://github.com/keviness/ExerciseProject/blob/master/snakes/snake_try.c">贪吃蛇游戏</a>，于是就开始多线程工作啦。<br>&emsp;当一个个贪吃蛇游戏的功能模块在自己手里逐步实现时，那种快乐难以描述哈。以下是一些个工作。</p><a id="more"></a><h3 id="头文件准备工作"><a href="#头文件准备工作" class="headerlink" title="头文件准备工作"></a>头文件准备工作</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;windows.h&gt;</span><br><span class="line">&lt;conio.h&gt;</span><br><span class="line">&lt;time.h&gt;</span><br></pre></td></tr></table></figure><p>以上这头文件需要先了解，对其中常用的API需要掌握。</p><h3 id="贪吃蛇的实现原理"><a href="#贪吃蛇的实现原理" class="headerlink" title="贪吃蛇的实现原理"></a>贪吃蛇的实现原理</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">snakes</span>&#123;</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> len;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> speed;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> x[MAXSNAKE];</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> y[MAXSNAKE];</span><br><span class="line">&#125;snake;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">foods</span>&#123;</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> x;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> y;</span><br><span class="line">&#125;food;</span><br></pre></td></tr></table></figure><blockquote><ul><li>贪吃蛇的实现原理在于用结构体中的数组储存贪吃蛇的x轴与y轴的坐标。</li><li>再在相应坐标位置是打印需要的符号。</li><li>蛇的移动效果：蛇每次向前移动一个位置时，清除最后一个坐标的打印符号（打印空格符）（” “）</li><li>蛇吃食物的增长原理：每次吃完食物后，长度加一，尾部坐标不清除其符号。</li></ul></blockquote><h3 id="各个功能的实现"><a href="#各个功能的实现" class="headerlink" title="各个功能的实现"></a>各个功能的实现</h3><p>贪吃蛇的实现主要依靠以下函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">welcome</span><span class="params">(<span class="keyword">void</span>)</span></span>;  <span class="comment">//欢迎用户图形界面</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initGraph</span><span class="params">(<span class="keyword">void</span>)</span></span>;  <span class="comment">//游戏初始化界面</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">createFood</span><span class="params">(<span class="keyword">void</span>)</span></span>;  <span class="comment">//随机产生食物</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">eatFood</span><span class="params">(<span class="keyword">void</span>)</span></span>;   <span class="comment">//当蛇吃到食物时</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">movingSnake</span><span class="params">(<span class="keyword">void</span>)</span></span>;   <span class="comment">//移动蛇身</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">controlSnake</span><span class="params">(<span class="keyword">void</span>)</span></span>;   <span class="comment">//控制蛇运动</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">gotoxy</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>; <span class="comment">//移动光标到对应坐标</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">hidenCursor</span><span class="params">(<span class="keyword">void</span>)</span></span>;  <span class="comment">//隐藏光标</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">snakeStatus</span><span class="params">(<span class="keyword">void</span>)</span></span>;  <span class="comment">//判断蛇的状态</span></span><br></pre></td></tr></table></figure><blockquote><ul><li>其中对蛇的控制，和蛇身的移动是游戏的核心。</li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;&amp;emsp;四月份，随着考研复试的临近，毕业论文也在此刻提上了日程，我停下了手边的前端学习计划。&lt;br&gt;&amp;emsp;我想着在四月底实现心心念念的&lt;a href=&quot;https://github.com/keviness/ExerciseProject/blob/master/snakes/snake_try.c&quot;&gt;贪吃蛇游戏&lt;/a&gt;，于是就开始多线程工作啦。&lt;br&gt;&amp;emsp;当一个个贪吃蛇游戏的功能模块在自己手里逐步实现时，那种快乐难以描述哈。以下是一些个工作。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="C" scheme="https://github.com/keviness/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript Date类型</title>
    <link href="https://github.com/keviness/2020/04/17/JavaScript/javascript_Date/"/>
    <id>https://github.com/keviness/2020/04/17/JavaScript/javascript_Date/</id>
    <published>2020-04-16T16:00:00.000Z</published>
    <updated>2020-06-19T12:16:43.464Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>&emsp;时间就是生命，人类每天都需要有一个时间的概念，从而知道自己度过了多久时光。所以我们每天不可避免地要获取有关时间的信息，JavaScript提供了一个很好的获得时间的方法：</p><a id="more"></a><h3 id="创建Date对象"><a href="#创建Date对象" class="headerlink" title="创建Date对象"></a>创建Date对象</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> now = <span class="keyword">new</span> <span class="built_in">Date</span>();   </span><br><span class="line"><span class="built_in">console</span>.log(now);  <span class="comment">//中国标准时间</span></span><br></pre></td></tr></table></figure><h3 id="Date解析"><a href="#Date解析" class="headerlink" title="Date解析"></a>Date解析</h3><blockquote><ul><li>Date.parse() 传入一个日期格式的字符串，该方法会返回特定的时间格式。</li></ul></blockquote><h4 id="月-日-年"><a href="#月-日-年" class="headerlink" title="月/日/年"></a>月/日/年</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> date = <span class="built_in">Date</span>.parse(<span class="string">"06/07/2017"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">Date</span>(date));</span><br></pre></td></tr></table></figure><h4 id="英文月名-日，年"><a href="#英文月名-日，年" class="headerlink" title="英文月名 日，年"></a>英文月名 日，年</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> date = <span class="built_in">Date</span>.parse(<span class="string">"June 07, 2017"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">Date</span>(date));</span><br></pre></td></tr></table></figure><hr><h3 id="Date-UTC"><a href="#Date-UTC" class="headerlink" title="Date.UTC()"></a>Date.UTC()</h3><blockquote><ul><li>接收7个参数，年，基于0的月，天，时，分，秒以及毫秒数</li></ul></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">2017</span>, <span class="number">05</span>, <span class="number">06</span>, <span class="number">18</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">Date</span>.UTC(date));</span><br></pre></td></tr></table></figure><h4 id="Date-now"><a href="#Date-now" class="headerlink" title="Date.now()"></a>Date.now()</h4><blockquote><ul><li>返回调用该方法时的毫秒数。</li></ul></blockquote><hr><h3 id="Date对象的格式化"><a href="#Date对象的格式化" class="headerlink" title="Date对象的格式化"></a>Date对象的格式化</h3><ul><li><p>dateObject.toLocaleString() </p><blockquote><p>按照与浏览器设置的地区相适应的格式返回日期和时间。</p></blockquote></li><li><p>dateObject.toString() </p><blockquote><p>返回带有时区的日期和时间。</p></blockquote></li><li><p>dateObject.valueOf() </p><blockquote><p>返回毫秒数</p></blockquote></li></ul><hr><h3 id="日期格式化方法"><a href="#日期格式化方法" class="headerlink" title="日期格式化方法"></a>日期格式化方法</h3><ul><li>toDateString() </li></ul><blockquote><ul><li>以特定于实现的格式显示星期几，月，日和年</li><li>dateObject.toDateString(); </li></ul></blockquote><ul><li>toLocaleDateString() </li></ul><blockquote><ul><li>以特定于地区的格式显示星期几，月，日和年</li><li>dateObject.toLocaleDateString();</li></ul></blockquote><ul><li>toTimeString() </li></ul><blockquote><ul><li>以特定于实现的格式显示时，分，秒和时区</li><li>dateObject.toTimeString();  </li></ul></blockquote><ul><li>toLocaleTimeString() </li></ul><blockquote><ul><li>以特定于实现的格式显示时，分，秒</li><li>dateObject.toLocaleTimeString(); </li></ul></blockquote><ul><li>toUTCString() </li></ul><blockquote><ul><li>显示完整的UTC日期</li><li>dateObject.toUTCString();</li></ul></blockquote><hr><h3 id="访问Date对象的方法"><a href="#访问Date对象的方法" class="headerlink" title="访问Date对象的方法"></a>访问Date对象的方法</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">dateObject.getFullYear() 获取年</span><br><span class="line">dateObject.getMonth() 获取月</span><br><span class="line">dateObject.getDate() 获取日</span><br><span class="line">dateObject.getHours() 获取小时</span><br><span class="line">dateObject.getMinutes() 获取分钟</span><br><span class="line">dateObject.getSeconds() 获取秒</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;&amp;emsp;时间就是生命，人类每天都需要有一个时间的概念，从而知道自己度过了多久时光。所以我们每天不可避免地要获取有关时间的信息，JavaScript提供了一个很好的获得时间的方法：&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="JavaScript" scheme="https://github.com/keviness/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 变量与作用域</title>
    <link href="https://github.com/keviness/2020/04/14/JavaScript/javascript_variable/"/>
    <id>https://github.com/keviness/2020/04/14/JavaScript/javascript_variable/</id>
    <published>2020-04-13T16:00:00.000Z</published>
    <updated>2020-06-19T12:28:03.927Z</updated>
    
    <content type="html"><![CDATA[<h3 id="基本类型和引用类型的值"><a href="#基本类型和引用类型的值" class="headerlink" title="基本类型和引用类型的值"></a>基本类型和引用类型的值</h3><h4 id="基本类型值："><a href="#基本类型值：" class="headerlink" title="基本类型值："></a>基本类型值：</h4><blockquote><ul><li>指那些保存在栈内存中的简单数据，即这种值完全保存在内存中的一个位置，其占据的空间大小是固定的。</li><li>基本类型的复制：基本类型在内存中占有的空间大小是固定的，复制的时候会重新在栈内存中开辟一块空间，按值来访问。 </li></ul></blockquote><a id="more"></a><h4 id="引用类型值："><a href="#引用类型值：" class="headerlink" title="引用类型值："></a>引用类型值：</h4><blockquote><ul><li>指那些保存在堆内存中的对象，这些类型的真正数据是保存在堆内存中的，而在栈内存中保存的只是一个指针，这个指针指向的是这个对象在堆内存中的地址。</li></ul></blockquote><blockquote><ul><li>引用类型的复制：引用类型所占的空间大小是不固定的，存放在堆内存中。</li><li>但内存的地址大小是固定的，故栈中存放的是对象在堆内存的地址。</li></ul></blockquote><blockquote><ul><li>查找引用类型值时，先从栈内存中取出地址，然后再到堆内存中找到对应的值，这就是引用访问。</li><li>复制时是复制的栈内存的值，只是拷贝一个引用，两个引用变量指向的堆内存中的对象是同一个对象。</li></ul></blockquote><h3 id="函数中传递参数"><a href="#函数中传递参数" class="headerlink" title="函数中传递参数"></a>函数中传递参数</h3><blockquote><ul><li>在js中参数传递都是值传递，不存在引用传递。 </li></ul></blockquote><h4 id="值类型："><a href="#值类型：" class="headerlink" title="值类型："></a>值类型：</h4><blockquote><ul><li>传递的是变量本身的值，和复制是一样的，函数中改变了变量的值，不会影响源变量值    </li></ul></blockquote><h4 id="引用类型："><a href="#引用类型：" class="headerlink" title="引用类型："></a>引用类型：</h4><blockquote><ul><li>同样是值传递，传递的是变量在栈内存空间中的地址值，如果在函数中改变了对象某一个属性的值，源变量中的值也会改变，因为在堆内存中它们是指向的同一个对象。</li></ul></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params">num</span>)</span>&#123;</span><br><span class="line">    num.name=<span class="number">123</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> box=&#123;&#125;;</span><br><span class="line">box.name=<span class="string">'abcd'</span>;</span><br><span class="line">alert(box.name);    <span class="comment">//abcd</span></span><br><span class="line">func(box);</span><br><span class="line">alert(box.name);    <span class="comment">//123   值在函数func中被改变了</span></span><br></pre></td></tr></table></figure><h3 id="检测变量数据类型"><a href="#检测变量数据类型" class="headerlink" title="检测变量数据类型"></a>检测变量数据类型</h3><h4 id="typeof"><a href="#typeof" class="headerlink" title="typeof"></a>typeof</h4><blockquote><ul><li>只返回的几大基本的数据类型，在检测Object类型时则不宜使用。</li><li>Null，Object，Array，RegExp等都会返回object，那样就不知道变量到底是什么类型。    </li><li>instanceof：确定变量是哪种具体的引用类型。</li></ul></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> box = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">alert(box <span class="keyword">instanceof</span> <span class="built_in">Object</span>);　　<span class="comment">//true</span></span><br><span class="line">alert(box <span class="keyword">instanceof</span> <span class="built_in">Array</span>);　　</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Array</span>.isArray(box))　　<span class="comment">//true</span></span><br></pre></td></tr></table></figure><h3 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h3><blockquote><ul><li>作用域规定了变量或者函数有权访问其他数据的权限，规定了各自的行为。    </li></ul></blockquote><h4 id="全局作用域"><a href="#全局作用域" class="headerlink" title="全局作用域"></a>全局作用域</h4><blockquote><ul><li>在web浏览器中，全局执行环境被认为是window对象，所有的全局变量和函数都是以window对象的属性和方法创建的,</li><li>全局作用域在网页关闭或者应用程序退出后才会被销毁。</li></ul></blockquote><h4 id="作用域链"><a href="#作用域链" class="headerlink" title="作用域链"></a>作用域链</h4><blockquote><ul><li>当代码在一个环境中执行时，会创建变量对象的一个作用域链，作用域链的用途是保证执行环境有权访问的所有变量和函数的有序访问。</li><li>函数体内还包含着函数，只有这个函数才可以访问内一层的函数。而内部函数的变量可以通过作用域链访问外部函数的变量，可以向上搜索作用域链，以查询变量。但是不能反过来。</li></ul></blockquote><h4 id="块级作用域"><a href="#块级作用域" class="headerlink" title="块级作用域"></a>块级作用域</h4><blockquote><ul><li>块级作用域表示诸如if等有花括号封闭的代码段块，所以支持条件判断来定义变量。 像 if，for 等代码块中定义的变量在花括号外面是可以访问的，这和其他语言中有很大的差别。</li></ul></blockquote><pre><code class="js"><span class="keyword">if</span>(<span class="literal">true</span>){    <span class="keyword">var</span> color = <span class="string">'red'</span>;}<span class="built_in">console</span>.log(color);     <span class="comment">//red</span></code></pre><h4 id="var关键字在函数中的区别"><a href="#var关键字在函数中的区别" class="headerlink" title="var关键字在函数中的区别"></a>var关键字在函数中的区别</h4><blockquote><ul><li>在函数中声明变量的时候，如果不加上关键字 var 那变量会被认为是全局的，函数外面也可以访问它，当然在访问之前要先执行一次函数，加了则是局部的。</li></ul></blockquote><blockquote><ul><li>一般确定某一个变量的时候是通过搜索来确定的，现在本级作用域上找。若无，则在向上级作用域找，依次类推，故访问局部变量要比访问全局变量的效率更高。</li></ul></blockquote><h3 id="内存问题"><a href="#内存问题" class="headerlink" title="内存问题"></a>内存问题</h3><blockquote><ul><li>js中存在垃圾回收机制会自动的管理内存的分配和无用内存的回收。  </li><li>JS中最常用的垃圾回收的方式是标记清除，就是在运行的时候会给内存中的所有变量加上一个标记，然后去掉环境中正在使用的变量的标记。</li><li>最后垃圾清理器完成内存清理的工作，销毁那些带有标记的变量，并且回收他们所占用的内存空间 。   </li></ul></blockquote><h4 id="删除引用"><a href="#删除引用" class="headerlink" title="删除引用"></a>删除引用</h4><blockquote><ul><li>box = null 来释放引用，这种方式叫做删除引用，这种方式使用大多数的全局变量和全局对象。</li></ul></blockquote><blockquote><ul><li>为确保页面占用的内存更少可以让页面获得更好的性能，最好的减少内存占用量的方式就是：一旦变量或者对象不再使用的时候，将其赋值为空（null）</li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;基本类型和引用类型的值&quot;&gt;&lt;a href=&quot;#基本类型和引用类型的值&quot; class=&quot;headerlink&quot; title=&quot;基本类型和引用类型的值&quot;&gt;&lt;/a&gt;基本类型和引用类型的值&lt;/h3&gt;&lt;h4 id=&quot;基本类型值：&quot;&gt;&lt;a href=&quot;#基本类型值：&quot; class=&quot;headerlink&quot; title=&quot;基本类型值：&quot;&gt;&lt;/a&gt;基本类型值：&lt;/h4&gt;&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;指那些保存在栈内存中的简单数据，即这种值完全保存在内存中的一个位置，其占据的空间大小是固定的。&lt;/li&gt;
&lt;li&gt;基本类型的复制：基本类型在内存中占有的空间大小是固定的，复制的时候会重新在栈内存中开辟一块空间，按值来访问。 &lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
    
      <category term="JavaScript" scheme="https://github.com/keviness/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>CSS 背景颜色</title>
    <link href="https://github.com/keviness/2020/04/11/CSS/CSS_background/"/>
    <id>https://github.com/keviness/2020/04/11/CSS/CSS_background/</id>
    <published>2020-04-10T16:00:00.000Z</published>
    <updated>2020-06-19T11:37:01.758Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>&emsp;颜色使我们这个世界色彩纷呈。在web界面中，适宜的颜色让人心旷神怡。那么怎么对CSS颜色进行控制呢？</p><a id="more"></a><h2 id="CSS背景"><a href="#CSS背景" class="headerlink" title="CSS背景"></a>CSS背景</h2><blockquote><p>颜色的应用主要分为前景色、背景色和透明三个部分。</p></blockquote><h3 id="前景色"><a href="#前景色" class="headerlink" title="前景色"></a>前景色</h3><blockquote><p>color | border-color</p><ul><li>值: color | inherit</li><li>初始值: 用户代理特定的值</li><li>应用于: 所有元素</li><li>继承性: 有</li><li>影响一个元素的前景色，可以使用color属性，也可以使用属性border-color设置边框颜色。</li></ul></blockquote><h3 id="透明度"><a href="#透明度" class="headerlink" title="透明度"></a>透明度</h3><blockquote><p>opacity</p><ul><li>opacity是CSS3中专门用来设置透明度的一个属性，opacity只能给整个元素设置一个透明度，并且其透明度直接会继承给其后代元素</li><li>值: value | inherit</li><li>value:默认值是1，可以取0-1的任意浮点数。其中，1表示完全不透明，0表示完全透明</li><li>继承性: 无</li></ul></blockquote><h3 id="背景色"><a href="#背景色" class="headerlink" title="背景色"></a>背景色</h3><blockquote><ul><li>所有背景属性都不能继承</li><li>背景色background-color接受所有合法颜色，默认值是transparent。</li></ul></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">background-color</span>: <span class="selector-tag">red</span>;</span><br></pre></td></tr></table></figure><h3 id="背景图像"><a href="#背景图像" class="headerlink" title="背景图像"></a>背景图像</h3><blockquote><ul><li>背景图像background-image会放在所指定的背景颜色之上，初始值: none</li></ul></blockquote><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">background-image: url("image/img.jpg");</span><br></pre></td></tr></table></figure><h3 id="背景平铺"><a href="#背景平铺" class="headerlink" title="背景平铺"></a>背景平铺</h3><blockquote><ul><li>背景平铺的属性值中space和round是CSS3新增的值。</li><li>space表示背景图像的两端对齐平铺，多出来的空间用空白代替。</li><li>round表示背景图像的两端对齐平铺，但多出来的空间通过自身拉伸来填充。</li><li>值: repeat | repeat-x | repeat-y | no-repeat | space | round | inherit</li></ul></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">background-repeat</span>: <span class="selector-tag">repeat</span>;</span><br></pre></td></tr></table></figure><h3 id="背景定位"><a href="#背景定位" class="headerlink" title="背景定位"></a>背景定位</h3><blockquote><ul><li>背景定位background-position，初始值: 0% 0%</li><li>值:  length | left | center | right | top | center | bottom </li></ul></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">background-position</span>: <span class="selector-tag">center</span> ;        </span><br><span class="line"><span class="selector-tag">background-position</span>: 10<span class="selector-tag">px</span> 20<span class="selector-tag">px</span>;</span><br></pre></td></tr></table></figure><h3 id="背景裁切"><a href="#背景裁切" class="headerlink" title="背景裁切"></a>背景裁切</h3><blockquote><ul><li>背景裁切(background-clip)属性用来定义背景图像的裁剪区域。</li><li>值：background-clip: padding-box || border-box || content-box</li></ul></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">background-clip</span>: <span class="selector-tag">content-box</span>;</span><br></pre></td></tr></table></figure><h3 id="背景尺寸"><a href="#背景尺寸" class="headerlink" title="背景尺寸"></a>背景尺寸</h3><blockquote><ul><li>使用背景尺寸(background-size)属性可以指定背景图片的尺寸，可以控制背景图片在水平和垂直两个方向的缩放。</li></ul></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">background-size</span>: 20<span class="selector-tag">px</span> 30<span class="selector-tag">px</span>;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;&amp;emsp;颜色使我们这个世界色彩纷呈。在web界面中，适宜的颜色让人心旷神怡。那么怎么对CSS颜色进行控制呢？&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="CSS" scheme="https://github.com/keviness/tags/CSS/"/>
    
      <category term="background" scheme="https://github.com/keviness/tags/background/"/>
    
  </entry>
  
  <entry>
    <title>Function Type</title>
    <link href="https://github.com/keviness/2020/04/09/JavaScript/javascript_function1/"/>
    <id>https://github.com/keviness/2020/04/09/JavaScript/javascript_function1/</id>
    <published>2020-04-08T16:00:00.000Z</published>
    <updated>2020-06-19T12:27:31.435Z</updated>
    
    <content type="html"><![CDATA[<h3 id="理解Function类型"><a href="#理解Function类型" class="headerlink" title="理解Function类型"></a>理解Function类型</h3><blockquote><ul><li>JS 中Function类型实际上是一种对象，每一个函数实际上都是Function类型的一个实例，函数通常是用函数声明语法定义的，而且每一个函数都有默认的属性和方法。</li><li>因为函数是一个对象，故函数名实际上也是一个指向函数对象的指针变量，不会与某个函数绑定。</li></ul></blockquote><a id="more"></a><h4 id="函数声明与表达式（匿名函数）"><a href="#函数声明与表达式（匿名函数）" class="headerlink" title="函数声明与表达式（匿名函数）"></a>函数声明与表达式（匿名函数）</h4><p>函数声明会优先被读取使用（函数可提前访问）。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(test(<span class="number">10</span>,<span class="number">30</span>))；　　<span class="comment">//40</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">num1,num2</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> num1+num2;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>函数表达式则必须等到执行完它所在的表达行后再可以使用。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(test(<span class="number">10</span>,<span class="number">30</span>));　　<span class="comment">//error</span></span><br><span class="line"><span class="keyword">var</span> test = <span class="function"><span class="keyword">function</span> (<span class="params">num1,num2</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> num1+num2;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="作为值的函数"><a href="#作为值的函数" class="headerlink" title="作为值的函数"></a>作为值的函数</h4><blockquote><ul><li>js中的函数名本身就是变量，所以函数也可以作为值来使用，可以像传递参数一样把一个函数传递给另一个函数。</li></ul></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span> (<span class="params">num1, num2</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> num1 + num2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fuc</span> (<span class="params">num3, num4</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> num3 + num4;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(fuc(sum(<span class="number">2</span>,<span class="number">3</span>), <span class="number">5</span>));　　<span class="comment">//10</span></span><br><span class="line"></span><br><span class="line">等同于：</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span> (<span class="params">num1, num2</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> num1+num2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params">num1</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> sum(num1,<span class="number">5</span>);</span><br><span class="line">&#125;</span><br><span class="line">alert(func(<span class="number">5</span>));    <span class="comment">//10</span></span><br></pre></td></tr></table></figure><hr><h3 id="函数内部属性"><a href="#函数内部属性" class="headerlink" title="函数内部属性"></a>函数内部属性</h3><blockquote><ul><li>在函数内部包含两个特殊的对象：arguments和this</li></ul></blockquote><h4 id="arguments"><a href="#arguments" class="headerlink" title="arguments:"></a>arguments:</h4><blockquote><ul><li>arguments 是一个类数组，用来保存函数传递过来的参数。</li><li>arguments 中还有一个很重要的属性就是callee，是一个指针变量，指向的是arguments所在的函数本身，在递归中可用这个属性，因为如果函数名改变了，也不需要改变内部的实现。</li><li>arguments.callee()始终代表的是这个函数本身. </li></ul></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">box</span>(<span class="params">num</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(num&lt;=<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> num*<span class="built_in">arguments</span>.callee(num<span class="number">-1</span>);</span><br><span class="line">            <span class="comment">//arguments.callee代表的是函数的本身，故和上面是同样的效果</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">alert(box(<span class="number">3</span>));<span class="comment">//6</span></span><br></pre></td></tr></table></figure><h4 id="this"><a href="#this" class="headerlink" title="this:"></a>this:</h4><blockquote><ul><li>this 这个属性代表的是它所在的对象本身，this 引用的是函数据以执行的环境对象，也就是函数执行的作用域。</li><li>window是JS中最大的一个对象，在window对象中声明一个变量其实就是给window这个对象声明一个属性，var box=1;相当于 window.box=1;也就等价于this.box=1;</li><li>当在全局作用域中调用函数时，this 对象引用的就是 window。</li><li>在显示的声明一个对象box，这个box中使用的this就代表的是box本身，this.color就是返回的box中属性color的值，而不是window对象中color的值</li></ul></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> box=&#123;</span><br><span class="line">    color:<span class="string">'blue'</span>,</span><br><span class="line">    run:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        alert(<span class="keyword">this</span>.color);    <span class="comment">//blue</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.color;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">alert(<span class="built_in">window</span>.color);    <span class="comment">//red</span></span><br><span class="line">alert(<span class="keyword">this</span>.color);     <span class="comment">//red 此处this代表的是window对象，故this.color是代表的window的属性</span></span><br><span class="line">alert(box.run());      <span class="comment">//blue</span></span><br></pre></td></tr></table></figure><hr><h3 id="函数的属性和方法"><a href="#函数的属性和方法" class="headerlink" title="函数的属性和方法"></a>函数的属性和方法</h3><blockquote><p>每个函数都包含两个属性：length和prototype</p></blockquote><h4 id="length"><a href="#length" class="headerlink" title="length:"></a>length:</h4><blockquote><p>函数的属性length代表的是函数希望接收的参数的个数，是由声明函数时参数列表中的个数决定的。</p></blockquote><h4 id="prototype"><a href="#prototype" class="headerlink" title="prototype:"></a>prototype:</h4><blockquote><ul><li>prototype 是保存所有实例方法的实际所在，也就是原型。  </li><li>prototype下面有两个方法：apply()，call()，这两个方法都是函数非继承而来的方法，是每一个函数都具有的方法。</li><li>这两个方法的用途都是在特定的作用域中调用函数(看this指向的作用域是谁) </li></ul></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span> (<span class="params">num1, num2</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> num1 + num2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> result = sum.apply(<span class="keyword">this</span>,[<span class="number">10</span>,<span class="number">20</span>]);</span><br><span class="line"><span class="keyword">var</span> result = sum.call(<span class="keyword">this</span>,<span class="number">10</span>,<span class="number">20</span>);</span><br><span class="line"><span class="built_in">console</span>.log(result);</span><br></pre></td></tr></table></figure><blockquote><ul><li>func.apply()；方法有两个参数，第一个参数是要执行这个方法的作用域，也就是传递一个对象，第二个参数是一个数组，这个数组中是存放的调用的函数func的实参，也就是要传递给func的值，当然这个参数可以省略。  </li><li>func.call()：方法和上面的apply()方法相似，不同的是参数，作用域和apply()一样，但其余的参数是逐个列举出传递给函数的，而不是传递一个数组。</li><li>使用这apply()和call()这两个方法来扩充作用域最大的好处是：对象不需要与方法发生任何的耦合关系。</li></ul></blockquote><h4 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例:"></a>代码示例:</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> color=<span class="string">'red'</span>;</span><br><span class="line"><span class="keyword">var</span> box=&#123;</span><br><span class="line">    color:<span class="string">'green'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayColor</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.color;</span><br><span class="line">&#125;</span><br><span class="line">alert(sayColor());          　　<span class="comment">//red 对象：window</span></span><br><span class="line">alert(sayColor.apply(<span class="built_in">window</span>));  <span class="comment">//red  对象：window</span></span><br><span class="line">alert(sayColor.apply(<span class="keyword">this</span>));    <span class="comment">//red  对象：window</span></span><br><span class="line">alert(sayColor.apply(box));     <span class="comment">//green  对象：box</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;理解Function类型&quot;&gt;&lt;a href=&quot;#理解Function类型&quot; class=&quot;headerlink&quot; title=&quot;理解Function类型&quot;&gt;&lt;/a&gt;理解Function类型&lt;/h3&gt;&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;JS 中Function类型实际上是一种对象，每一个函数实际上都是Function类型的一个实例，函数通常是用函数声明语法定义的，而且每一个函数都有默认的属性和方法。&lt;/li&gt;
&lt;li&gt;因为函数是一个对象，故函数名实际上也是一个指向函数对象的指针变量，不会与某个函数绑定。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
    
      <category term="JavaScript" scheme="https://github.com/keviness/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>HTML FORM</title>
    <link href="https://github.com/keviness/2020/04/08/HtmlNote/Html_form/"/>
    <id>https://github.com/keviness/2020/04/08/HtmlNote/Html_form/</id>
    <published>2020-04-07T16:00:00.000Z</published>
    <updated>2020-06-19T12:06:31.558Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>&emsp;我们经常需要和远程服务器进行信息交互，在我们需要将信息提交的服务器中的时候，表单（form）的威力也就展示出来了，那么表单具体有哪一些呢？</p><a id="more"></a><h3 id="表单的一些属性："><a href="#表单的一些属性：" class="headerlink" title="表单的一些属性："></a>表单的一些属性：</h3><ol><li>name属性：用于对提交到服务器后的表单数据进行标识,是一种key-value的对应形式。  </li><li>value属性：在input框里面写的值。</li><li>readonly属性：使表单元素变为只读。</li><li>disabled属性：让按钮变灰，使表单元素不可用。</li></ol><hr><h3 id="常见表单元素"><a href="#常见表单元素" class="headerlink" title="常见表单元素"></a>常见表单元素</h3><h4 id="常见表单元素应用场景"><a href="#常见表单元素应用场景" class="headerlink" title="常见表单元素应用场景"></a>常见表单元素应用场景</h4><img src="/2020/04/08/HtmlNote/Html_form/form.png" class title="FormApplication"><h4 id="代码举例："><a href="#代码举例：" class="headerlink" title="代码举例："></a>代码举例：</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">单行文本框</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"key"</span> <span class="attr">value</span>=<span class="string">"123"</span> <span class="attr">readonly</span>=<span class="string">"readonly"</span> </span></span><br><span class="line"><span class="tag"><span class="attr">disabled</span>=<span class="string">"disabled"</span>/&gt;</span>  </span><br><span class="line">密码框</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span>/&gt;</span>　　</span><br><span class="line">下拉列表</span><br><span class="line"><span class="tag">&lt;<span class="name">selected</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"1"</span> <span class="attr">selected</span>&gt;</span>1<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"2"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"3"</span>&gt;</span>3<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">selected</span>&gt;</span></span><br><span class="line">单选框</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"like"</span> <span class="attr">value</span>=<span class="string">"喜欢"</span> <span class="attr">checked</span>=<span class="string">"checked"</span>/&gt;</span>　　</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"like"</span> <span class="attr">value</span>=<span class="string">"不喜欢"</span>/&gt;</span></span><br><span class="line">多选框</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"run"</span> <span class="attr">value</span>=<span class="string">"跑"</span> <span class="attr">checked</span>=<span class="string">"checked"</span>/&gt;</span>　　</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"climb"</span> <span class="attr">value</span>=<span class="string">"爬山"</span>/&gt;</span></span><br><span class="line">文件域</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span>&gt;</span></span><br><span class="line">多行文本框</span><br><span class="line"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">rows</span>=<span class="string">"5"</span> <span class="attr">cols</span>=<span class="string">"10"</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">提交按钮</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"提交"</span>/&gt;</span>　</span><br><span class="line">重置按钮</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"reset"</span> <span class="attr">value</span>=<span class="string">"重置"</span>/&gt;</span>  </span><br><span class="line">按钮</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"按钮"</span>/&gt;</span>  </span><br><span class="line">图像按钮</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"image"</span> <span class="attr">src</span>=<span class="string">"img.jpg"</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;&amp;emsp;我们经常需要和远程服务器进行信息交互，在我们需要将信息提交的服务器中的时候，表单（form）的威力也就展示出来了，那么表单具体有哪一些呢？&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="HTML" scheme="https://github.com/keviness/tags/HTML/"/>
    
  </entry>
  
  <entry>
    <title>CSS样式表的引入</title>
    <link href="https://github.com/keviness/2020/04/07/CSS/CSS_Link/"/>
    <id>https://github.com/keviness/2020/04/07/CSS/CSS_Link/</id>
    <published>2020-04-06T16:00:00.000Z</published>
    <updated>2020-06-19T12:02:02.637Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>&emsp;要对HTML中的各种元素进行渲染，让页面充满生机，CSS是不二的选择。CSS是web页面中的肌肤，好的CSS渲染可是一件了不得的艺术品。要对CSS进行渲染首当其冲的问题是在HTML中对CSS进行引入，以下是一些个引入方法：</p><a id="more"></a><h2 id="css样式表的引入"><a href="#css样式表的引入" class="headerlink" title="css样式表的引入"></a>css样式表的引入</h2><h3 id="内嵌样式表"><a href="#内嵌样式表" class="headerlink" title="内嵌样式表"></a>内嵌样式表</h3><blockquote><p>内嵌样式表是写在Tag(标签)里面的。内嵌样式只对所在的Tag有效 (若有多种样式，内嵌式会覆盖其它的样式)。</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">"font-size:20px; color:red"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>这个style定义p标签里面的文字 是20px字体，字体颜色是红色。</p></blockquote><h3 id="内部样式表"><a href="#内部样式表" class="headerlink" title="内部样式表"></a>内部样式表</h3><blockquote><p>内部样式表是写在HTML的head标签里面的，内部样式表只对所在的网页有效。<br>内部样式表要用到style标签，如下 ：</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>  <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line">    div&#123;</span><br><span class="line">        color : red;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="外部样式表"><a href="#外部样式表" class="headerlink" title="外部样式表"></a>外部样式表</h3><blockquote><p>若很多网页需要用到同样的样式，此时需要用外部样式表。<br>外部样式表需要将样式写在一个css文件中,然后在页面中用link标签引入，在需要应用该样式的每个页面中引入该文件。<br>rel=”stylesheet” type=”text/css” 是固定写法不可修改。</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"./css/example.css "</span> <span class="attr">rel</span> =<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css "</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span>…<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;&amp;emsp;要对HTML中的各种元素进行渲染，让页面充满生机，CSS是不二的选择。CSS是web页面中的肌肤，好的CSS渲染可是一件了不得的艺术品。要对CSS进行渲染首当其冲的问题是在HTML中对CSS进行引入，以下是一些个引入方法：&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="CSS" scheme="https://github.com/keviness/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>CSS 常见对齐方式</title>
    <link href="https://github.com/keviness/2020/04/02/CSS/CSS_align/"/>
    <id>https://github.com/keviness/2020/04/02/CSS/CSS_align/</id>
    <published>2020-04-01T16:00:00.000Z</published>
    <updated>2020-06-21T04:44:05.796Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>&emsp;在对HTML文档进行CSS渲染时，经常需要进行元素的对齐。鉴于此，各种对齐方式总结如下：</p><a id="more"></a><h3 id="CSS-水平居中"><a href="#CSS-水平居中" class="headerlink" title="CSS 水平居中"></a>CSS 水平居中</h3><h4 id="若子元素为行内元素（inline）"><a href="#若子元素为行内元素（inline）" class="headerlink" title="若子元素为行内元素（inline）"></a>若子元素为行内元素（inline）</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">parentNode</span>&#123;</span><br><span class="line">    <span class="attribute">text-align</span>:center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="若子元素为块元素（block）"><a href="#若子元素为块元素（block）" class="headerlink" title="若子元素为块元素（block）"></a>若子元素为块元素（block）</h4><h5 id="宽度固定"><a href="#宽度固定" class="headerlink" title="宽度固定"></a>宽度固定</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">childNode</span>&#123;</span><br><span class="line">    <span class="attribute">margin</span>:<span class="number">0</span> auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="宽度不固定"><a href="#宽度不固定" class="headerlink" title="宽度不固定"></a>宽度不固定</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">parentNode</span>&#123;</span><br><span class="line">    <span class="attribute">text-align</span>:center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">childNode</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>:<span class="built_in">inline-block</span>(inline);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="CSS垂直居中"><a href="#CSS垂直居中" class="headerlink" title="CSS垂直居中"></a>CSS垂直居中</h3><h4 id="若子元素为行内元素（inline）-1"><a href="#若子元素为行内元素（inline）-1" class="headerlink" title="若子元素为行内元素（inline）"></a>若子元素为行内元素（inline）</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">parentNode</span>&#123;</span><br><span class="line">    <span class="attribute">height</span>:A px;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">childNode</span>&#123;</span><br><span class="line">    <span class="attribute">line-heght</span>:A px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="若子元素为块元素（block）-1"><a href="#若子元素为块元素（block）-1" class="headerlink" title="若子元素为块元素（block）"></a>若子元素为块元素（block）</h4><blockquote><p>块级元素的高度由内容撑起。</p></blockquote><h5 id="高度未定"><a href="#高度未定" class="headerlink" title="高度未定"></a>高度未定</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">parentNode</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>:table-cell;</span><br><span class="line">    <span class="attribute">vertical-align</span>:middle;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="高度已定"><a href="#高度已定" class="headerlink" title="高度已定"></a>高度已定</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">parentNode</span>&#123;</span><br><span class="line">    <span class="attribute">height</span>:A px;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">childNode</span>&#123;</span><br><span class="line">    <span class="attribute">height</span>:B px;</span><br><span class="line">    margin-top/margin-bottom:(A-B)/2px; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="CSS垂直居中万能语法"><a href="#CSS垂直居中万能语法" class="headerlink" title="CSS垂直居中万能语法"></a>CSS垂直居中万能语法</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">parentNode</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>:relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">childNode</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>:absolute;</span><br><span class="line">    <span class="attribute">top</span>:<span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">left</span>:<span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">width</span>:Xpx;</span><br><span class="line">    <span class="attribute">height</span>:Ypx;</span><br><span class="line">    <span class="attribute">margin-top</span>:<span class="built_in">-</span>(Y/<span class="number">2</span>)<span class="built_in">px</span>;</span><br><span class="line">    <span class="attribute">margin-left</span>:<span class="built_in">-</span>(X/<span class="number">2</span>)<span class="built_in">px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="CSS水平垂直居中"><a href="#CSS水平垂直居中" class="headerlink" title="CSS水平垂直居中"></a>CSS水平垂直居中</h3><h4 id="水平对齐-行高（子元素为inline元素）"><a href="#水平对齐-行高（子元素为inline元素）" class="headerlink" title="水平对齐+行高（子元素为inline元素）"></a>水平对齐+行高（子元素为inline元素）</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">parentNode</span>&#123;</span><br><span class="line">    <span class="attribute">height</span>:A px;</span><br><span class="line">    <span class="attribute">text-align</span>:center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">childNode</span>&#123;</span><br><span class="line">    <span class="attribute">line-height</span>:A px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="水平对齐-垂直对齐（子元素为block元素）"><a href="#水平对齐-垂直对齐（子元素为block元素）" class="headerlink" title="水平对齐+垂直对齐（子元素为block元素）"></a>水平对齐+垂直对齐（子元素为block元素）</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">parentNode</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>:table-cell;</span><br><span class="line">    <span class="attribute">text-align</span>:center;</span><br><span class="line">    <span class="attribute">vertical-align</span>:center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">childNode</span>&#123;</span><br><span class="line">    <span class="attribute">diaplay</span>:inline-block;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="relative-absolute（任意元素）"><a href="#relative-absolute（任意元素）" class="headerlink" title="relative+absolute（任意元素）"></a>relative+absolute（任意元素）</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">parentNode</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>:relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">childNode</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>:absolute;</span><br><span class="line">    <span class="attribute">margin</span>:auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;&amp;emsp;在对HTML文档进行CSS渲染时，经常需要进行元素的对齐。鉴于此，各种对齐方式总结如下：&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="CSS" scheme="https://github.com/keviness/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>Algorithms(second)</title>
    <link href="https://github.com/keviness/2020/03/22/Algorithms/Algorithms_second/"/>
    <id>https://github.com/keviness/2020/03/22/Algorithms/Algorithms_second/</id>
    <published>2020-03-21T16:00:00.000Z</published>
    <updated>2020-06-19T12:33:25.558Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>&emsp;我们知道，我们在完成一件事情时，总会有一些计划，比如在什么时候用什么方法去完成。在数据结构的世界中，算法就是如此，它是解决特定问题求解步骤的描述，以下是一些总结：</p><a id="more"></a><h2 id="算法（Algorithms）"><a href="#算法（Algorithms）" class="headerlink" title="算法（Algorithms）"></a>算法（Algorithms）</h2><h3 id="算法定义："><a href="#算法定义：" class="headerlink" title="算法定义："></a>算法定义：</h3><blockquote><p>算法是解决特定问题求解步骤的描述，在计算机表现为指令的有限序列，且每个指令表示一个或多个操作。</p></blockquote><hr><h3 id="算法特性"><a href="#算法特性" class="headerlink" title="算法特性"></a>算法特性</h3><h4 id="一，输入输出："><a href="#一，输入输出：" class="headerlink" title="一，输入输出："></a>一，输入输出：</h4><ol><li>输入：算法具有零个或一个输入。</li><li>输出：算法具有至少一个输出。</li></ol><hr><h4 id="二，有穷性："><a href="#二，有穷性：" class="headerlink" title="二，有穷性："></a>二，有穷性：</h4><ol><li>算法在执行有限的步骤之后，会自动结束而不会出现无限循环，且每个步骤须在有限的时间内完成。</li></ol><hr><h4 id="三，确定性："><a href="#三，确定性：" class="headerlink" title="三，确定性："></a>三，确定性：</h4><ol><li>算法的每一个步骤都有明确的含义，不会出现二义性</li><li>一定条件下，只有一条执行路径，相同输入只能获得的一个输出结果，每个步骤被精确定义，无歧义。</li></ol><hr><h4 id="四，可行性："><a href="#四，可行性：" class="headerlink" title="四，可行性："></a>四，可行性：</h4><ol><li>算法的每一个步骤都是可执行的，每一步都可执行有限步骤完成。</li></ol><hr><h3 id="算法时间复杂度"><a href="#算法时间复杂度" class="headerlink" title="算法时间复杂度"></a>算法时间复杂度</h3><blockquote><p>时间复杂度：算法的时间度量。</p></blockquote><hr><h4 id="算法时间复杂度表示方法：大O阶表示方法"><a href="#算法时间复杂度表示方法：大O阶表示方法" class="headerlink" title="算法时间复杂度表示方法：大O阶表示方法"></a>算法时间复杂度表示方法：大O阶表示方法</h4><blockquote><p>T(n) = O(f(n))：随问题规模n的增大，执行时间的增长率与f(n)的增长率相同。<br>n：问题规模；f(n)：运行次数函数（基本操作数量）。</p></blockquote><ol><li>加法常数：用常数1取代。</li><li>只保留运行次数函数中的最高阶项。</li><li>若最高阶存在，且不是1，去处最高阶项常数。</li></ol><hr><h4 id="常见的算法时间复杂度表示："><a href="#常见的算法时间复杂度表示：" class="headerlink" title="常见的算法时间复杂度表示："></a>常见的算法时间复杂度表示：</h4><img src="/2020/03/22/Algorithms/Algorithms_second/Algorithms_second.png" class title="algorithms"><hr><h3 id="算法空间复杂度"><a href="#算法空间复杂度" class="headerlink" title="算法空间复杂度"></a>算法空间复杂度</h3><blockquote><p>计算算法所需的存储空间的实现。<br>计算公式：S(n) = O(f(n))<br>n：问题规模； f(n)：关于n所占存储空间内存的函数。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;&amp;emsp;我们知道，我们在完成一件事情时，总会有一些计划，比如在什么时候用什么方法去完成。在数据结构的世界中，算法就是如此，它是解决特定问题求解步骤的描述，以下是一些总结：&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Algorithms" scheme="https://github.com/keviness/tags/Algorithms/"/>
    
  </entry>
  
  <entry>
    <title>Algorithms(first)</title>
    <link href="https://github.com/keviness/2020/03/20/Algorithms/Algorithms_start/"/>
    <id>https://github.com/keviness/2020/03/20/Algorithms/Algorithms_start/</id>
    <published>2020-03-19T16:00:00.000Z</published>
    <updated>2020-06-21T04:43:56.371Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><blockquote><p>if you give someone a program you will frustrate him for a day, if you teach someone how to program you will frustrate him for a lifetime（如果你给了一个人一串代码，你将折磨他一整天；如果你教会他如何编程，你将折磨他一辈子。）</p></blockquote><p>&emsp;很荣幸，我找到了自己喜爱的事情：”frustrate myself for lifetime.”，最近在准备考研复试，在闲余时间，想着顺便把心心念念的算法过一遍，以下是一些个记录。</p><a id="more"></a><h4 id="数据结构基本概念与术语"><a href="#数据结构基本概念与术语" class="headerlink" title="数据结构基本概念与术语"></a>数据结构基本概念与术语</h4><ul><li>数据：实质是描述客观事物的符号，是能够被计算机识别并输入给计算机处理的符号集合。</li><li>数据元素（记录）：组成数据的具有一定意义的基本单位。</li><li>数据项：组成数据元素的最小单位，一个数据可由若干个数据项组成。</li><li>数据对象：由性质相同数据元素组成的集合，为数据的子集。</li><li>数据结构：相互之间存在一种或多种特定关系的数据元素的集合。<blockquote><p>结构：实质上可以理解为各组成部分相互搭配和排列的方式。</p></blockquote></li></ul><hr><h4 id="数据结构分类"><a href="#数据结构分类" class="headerlink" title="数据结构分类"></a>数据结构分类</h4><p>一，逻辑结构</p><blockquote><p>数据对象中数据元素之间的相互关系。（该结构是面向实际问题而言） </p></blockquote><ul><li>集合结构：集合结构中数据元素除了同属于一个集合外无其他关系。</li></ul><img src="/2020/03/20/Algorithms/Algorithms_start/jihe.png" class title="jihe"><ul><li>线性结构：线性结构中数据元素为一对一的关系。</li></ul><img src="/2020/03/20/Algorithms/Algorithms_start/xianxing.png" class title="xianxing"><ul><li>树形结构：树形结构中数据元素存在一对多的关系。</li></ul><img src="/2020/03/20/Algorithms/Algorithms_start/shuxing.png" class title="shuxing"><ul><li>图形结构：图形结构中数据元素存在多对多的关系。</li></ul><img src="/2020/03/20/Algorithms/Algorithms_start/tuxing.png" class title="tuxing"><p>二，物理结构</p><blockquote><p>数据的逻辑结构在计算机中的存储方式。</p></blockquote><ul><li>顺序存储结构：将数据元素存放到练习的存储单元中。（如线性表）<img src="/2020/03/20/Algorithms/Algorithms_start/shunxucunchu.png" class title="shunxucunchu"></li><li>链式存储结构：将数据元素存放在任意的存储单元中，该组存储单元可以连续也可以是非连续的。<blockquote><p>通过指针指向下一个存储单元，从而找到相应元素的位置。</p></blockquote></li></ul><img src="/2020/03/20/Algorithms/Algorithms_start/lianshicunchu.png" class title="lianshicunchu">]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;if you give someone a program you will frustrate him for a day, if you teach someone how to program you will frustrate him for a lifetime（如果你给了一个人一串代码，你将折磨他一整天；如果你教会他如何编程，你将折磨他一辈子。）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&amp;emsp;很荣幸，我找到了自己喜爱的事情：”frustrate myself for lifetime.”，最近在准备考研复试，在闲余时间，想着顺便把心心念念的算法过一遍，以下是一些个记录。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Algorithms" scheme="https://github.com/keviness/tags/Algorithms/"/>
    
  </entry>
  
  <entry>
    <title>CSS Layout 之三栏布局实现</title>
    <link href="https://github.com/keviness/2020/03/18/CSS/CSS_Layout2/"/>
    <id>https://github.com/keviness/2020/03/18/CSS/CSS_Layout2/</id>
    <published>2020-03-17T16:00:00.000Z</published>
    <updated>2020-06-19T11:50:08.446Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>&emsp;三栏布局和两栏布局一样，是经典的web布局方法，以下介绍四种实现三栏布局的常用方法：</p><a id="more"></a><h3 id="实现三栏布局（网页宽度自适应）"><a href="#实现三栏布局（网页宽度自适应）" class="headerlink" title="实现三栏布局（网页宽度自适应）"></a>实现三栏布局（网页宽度自适应）</h3><h4 id="一，absolute绝对定位法（main置于中间）"><a href="#一，absolute绝对定位法（main置于中间）" class="headerlink" title="一，absolute绝对定位法（main置于中间）"></a>一，absolute绝对定位法（main置于中间）</h4><p>HTML代码:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"left"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"main"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"right"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><p>CSS:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#left</span>, <span class="selector-id">#right</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>:absolute;</span><br><span class="line">    <span class="attribute">top</span>:<span class="number">0</span>;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">200px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#left</span>&#123;</span><br><span class="line">    <span class="attribute">left</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#right</span>&#123;</span><br><span class="line">    <span class="attribute">right</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#main</span>&#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">210px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="二，magrin负值法（negative-margin）"><a href="#二，magrin负值法（negative-margin）" class="headerlink" title="二，magrin负值法（negative margin）"></a>二，magrin负值法（negative margin）</h4><p>HTML代码：main要用双重嵌套标签。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"main"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"body"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"left"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"right"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><p>CSS:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#main</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">float</span>:left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#main</span> <span class="selector-id">#body</span>&#123;</span><br><span class="line">    <span class="attribute">margin</span>:<span class="number">0</span> <span class="number">210px</span>;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#left</span>, <span class="selector-id">#right</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">float</span>:float;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#left</span>&#123;</span><br><span class="line">    <span class="attribute">margin-left</span>: -<span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#right</span>&#123;</span><br><span class="line">    <span class="attribute">margin-right</span>: -<span class="number">200px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="三，float自身浮动法"><a href="#三，float自身浮动法" class="headerlink" title="三，float自身浮动法"></a>三，float自身浮动法</h4><p>HTML代码：main放于最后。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"left"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"right"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"main"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><p>CSS：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#main</span>&#123;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">margin</span>:<span class="number">0</span> <span class="number">210px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#left</span>, <span class="selector-id">#right</span>&#123;</span><br><span class="line">    <span class="attribute">right</span>:<span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">200px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#left</span>&#123;</span><br><span class="line">    <span class="attribute">float</span>:left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#right</span>&#123;</span><br><span class="line">    <span class="attribute">float</span>:right;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="四，双飞翼布局"><a href="#四，双飞翼布局" class="headerlink" title="四，双飞翼布局"></a>四，双飞翼布局</h4><p>HTML代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"main"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"sub"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"extra"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h5 id="法一-（类似方案三）"><a href="#法一-（类似方案三）" class="headerlink" title="法一:（类似方案三）"></a>法一:（类似方案三）</h5><p>HTML代码：不变。</p><hr><p>CSS：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span>&#123;</span><br><span class="line">    <span class="attribute">padding</span>:<span class="number">0</span> <span class="number">230px</span> <span class="number">0</span> <span class="number">190px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#main</span>&#123;</span><br><span class="line">    <span class="attribute">float</span>:left;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#sub</span>&#123;</span><br><span class="line">    <span class="attribute">float</span>:left;</span><br><span class="line">    <span class="attribute">margin-left</span>:-<span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">190px</span>;</span><br><span class="line">    <span class="attribute">position</span>:relative;</span><br><span class="line">    <span class="attribute">left</span>:-<span class="number">190px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#extra</span>&#123;</span><br><span class="line">    <span class="attribute">float</span>:left;</span><br><span class="line">    <span class="attribute">margin-left</span>:-<span class="number">230px</span>;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">230px</span>;</span><br><span class="line">    <span class="attribute">position</span>:relative;</span><br><span class="line">    <span class="attribute">right</span>:-<span class="number">230px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h5 id="法二：在main元素外加一层包装元素。"><a href="#法二：在main元素外加一层包装元素。" class="headerlink" title="法二：在main元素外加一层包装元素。"></a>法二：在main元素外加一层包装元素。</h5><p>HTML代码：id=”main”元素外加一个盒子，封装为id=”main-content”</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"main-content"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"main"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><p>CSS：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#main</span>&#123;</span><br><span class="line">    <span class="attribute">float</span>:left;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#main-content</span>&#123;</span><br><span class="line">    <span class="attribute">margin</span>:<span class="number">0</span> <span class="number">230px</span> <span class="number">0</span> <span class="number">190px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#sub</span>&#123;</span><br><span class="line">    <span class="attribute">float</span>:left;</span><br><span class="line">    <span class="attribute">margin-left</span>:-<span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">190px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#extra</span>&#123;</span><br><span class="line">    <span class="attribute">float</span>:left;</span><br><span class="line">    <span class="attribute">margin-left</span>:-<span class="number">230px</span>;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">230px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h5 id="法三：对main用padding。"><a href="#法三：对main用padding。" class="headerlink" title="法三：对main用padding。"></a>法三：对main用padding。</h5><p>HTML代码：不变。</p><hr><p>CSS：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#main</span>&#123;</span><br><span class="line">    <span class="attribute">float</span>:left;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">box-sizing</span>:border-box;</span><br><span class="line">    <span class="attribute">padding</span>:<span class="number">0</span> <span class="number">210px</span> <span class="number">0</span> <span class="number">190px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#sub</span>&#123;</span><br><span class="line">    <span class="attribute">float</span>:left;</span><br><span class="line">    <span class="attribute">margin-left</span>:-<span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">190px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#extra</span>&#123;</span><br><span class="line">    <span class="attribute">float</span>:left;</span><br><span class="line">    <span class="attribute">margin-left</span>:-<span class="number">230px</span>;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">230px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;&amp;emsp;三栏布局和两栏布局一样，是经典的web布局方法，以下介绍四种实现三栏布局的常用方法：&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="CSS" scheme="https://github.com/keviness/tags/CSS/"/>
    
      <category term="layout" scheme="https://github.com/keviness/tags/layout/"/>
    
  </entry>
  
  <entry>
    <title>CSS Layout 之两栏布局实现</title>
    <link href="https://github.com/keviness/2020/03/17/CSS/CSS_Layout1/"/>
    <id>https://github.com/keviness/2020/03/17/CSS/CSS_Layout1/</id>
    <published>2020-03-16T16:00:00.000Z</published>
    <updated>2020-06-19T11:44:05.602Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>&emsp;两栏布局是web布局中的经典布局，在布局中的应用十分广泛，以下总结六种常用的CSS两栏布局方法：</p><a id="more"></a><h3 id="实现两栏布局的方法（左侧固定右侧自适应）"><a href="#实现两栏布局的方法（左侧固定右侧自适应）" class="headerlink" title="实现两栏布局的方法（左侧固定右侧自适应）"></a>实现两栏布局的方法（左侧固定右侧自适应）</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrap"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span>left<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span>right<span class="tag">&lt;/<span class="name">right</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="一，双inline-block方案"><a href="#一，双inline-block方案" class="headerlink" title="一，双inline-block方案"></a>一，双inline-block方案</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.wrap</span>&#123;<span class="attribute">font-size</span>:<span class="number">0</span>&#125;</span><br><span class="line"><span class="selector-class">.left</span>, <span class="selector-class">.right</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>:inline-block;</span><br><span class="line">    <span class="attribute">vertical-align</span>:top;</span><br><span class="line">    <span class="attribute">font-size</span>:<span class="number">14px</span>;</span><br><span class="line">    <span class="attribute">box-sizing</span>:border-box;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.right</span>&#123;<span class="attribute">width</span>:<span class="built_in">calc</span>(<span class="number">100%</span>-<span class="number">140px</span>)&#125;</span><br></pre></td></tr></table></figure><h4 id="二，双float方案"><a href="#二，双float方案" class="headerlink" title="二，双float方案"></a>二，双float方案</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.wrap</span>&#123;<span class="attribute">overflow</span>:auto;</span><br><span class="line">    <span class="attribute">box-sizing</span>:content-box;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.left</span>, <span class="selector-class">.right</span>&#123;</span><br><span class="line">    <span class="attribute">float</span>:left;</span><br><span class="line">    <span class="attribute">box-sizing</span>:border-box;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.right</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>:<span class="built_in">calc</span>(<span class="number">100%</span>-<span class="number">140px</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="三，float-margin-left方案"><a href="#三，float-margin-left方案" class="headerlink" title="三，float + margin-left方案"></a>三，float + margin-left方案</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.wrap</span>&#123;<span class="attribute">overflow</span>:hidden;&#125;</span><br><span class="line"><span class="selector-class">.left</span>&#123;<span class="attribute">float</span>:left;&#125;</span><br><span class="line"><span class="selector-class">.right</span>&#123;<span class="attribute">margin-left</span>:<span class="number">150px</span>;&#125;</span><br></pre></td></tr></table></figure><h4 id="四，absolute-margin-left方案"><a href="#四，absolute-margin-left方案" class="headerlink" title="四，absolute + margin-left方案"></a>四，absolute + margin-left方案</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.left</span>&#123;<span class="attribute">position</span>:absolute;&#125;</span><br><span class="line"><span class="selector-class">.right</span>&#123;<span class="attribute">margin-left</span>:<span class="number">150px</span>;&#125;</span><br></pre></td></tr></table></figure><h4 id="五，float-BFC方案"><a href="#五，float-BFC方案" class="headerlink" title="五，float + BFC方案"></a>五，float + BFC方案</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.wrap</span>&#123;<span class="attribute">overflow</span>:auto;&#125;</span><br><span class="line"><span class="selector-class">.left</span>&#123;</span><br><span class="line">    <span class="attribute">float</span>:left;</span><br><span class="line">    <span class="attribute">margin-left</span>:<span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.right</span>&#123;</span><br><span class="line">    <span class="attribute">margin-left</span>:<span class="number">0</span>;</span><br><span class="line">    overflow:auto; //形成BFC</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="六，flex方案"><a href="#六，flex方案" class="headerlink" title="六，flex方案"></a>六，flex方案</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.wrap</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>:flex;</span><br><span class="line">    <span class="attribute">align-items</span>:flex-start;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.left</span>&#123;<span class="attribute">flex</span>:<span class="number">0</span> <span class="number">0</span> auto&#125;</span><br><span class="line"><span class="selector-class">.right</span>&#123;<span class="attribute">flex</span>:<span class="number">1</span> <span class="number">1</span> auto&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;&amp;emsp;两栏布局是web布局中的经典布局，在布局中的应用十分广泛，以下总结六种常用的CSS两栏布局方法：&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="CSS" scheme="https://github.com/keviness/tags/CSS/"/>
    
      <category term="Layout" scheme="https://github.com/keviness/tags/Layout/"/>
    
  </entry>
  
  <entry>
    <title>CSS Flex</title>
    <link href="https://github.com/keviness/2020/03/16/CSS/CSS_Flex/"/>
    <id>https://github.com/keviness/2020/03/16/CSS/CSS_Flex/</id>
    <published>2020-03-15T16:00:00.000Z</published>
    <updated>2020-06-21T04:44:12.171Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>&emsp;我们经常需要对web页面的元素进行布局，在现代浏览器中，Flex功能强大，应用十分广泛，以下是一些个总结：</p><a id="more"></a><h2 id="CSS-Flex"><a href="#CSS-Flex" class="headerlink" title="CSS Flex"></a>CSS Flex</h2><blockquote><p>Flexible Box</p></blockquote><h3 id="Flex示意图"><a href="#Flex示意图" class="headerlink" title="Flex示意图"></a>Flex示意图</h3><img src="/2020/03/16/CSS/CSS_Flex/CSSFlex.png" class title="CSS flex"><h4 id="1，任何容器都可指定为flex布局-webkit内核浏览器应加前缀-webkit"><a href="#1，任何容器都可指定为flex布局-webkit内核浏览器应加前缀-webkit" class="headerlink" title="1，任何容器都可指定为flex布局(webkit内核浏览器应加前缀-webkit)"></a>1，任何容器都可指定为flex布局(webkit内核浏览器应加前缀-webkit)</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.block_box</span>&#123;<span class="attribute">display</span>:flex&#125;</span><br><span class="line"><span class="selector-class">.inline_box</span>&#123;<span class="attribute">display</span>:inline-flex&#125;</span><br></pre></td></tr></table></figure><h4 id="2，flex布局之后：子元素float-clear-vertical-align将失效。"><a href="#2，flex布局之后：子元素float-clear-vertical-align将失效。" class="headerlink" title="2，flex布局之后：子元素float,clear,vertical-align将失效。"></a>2，flex布局之后：子元素float,clear,vertical-align将失效。</h4><hr><h3 id="一，容器属性"><a href="#一，容器属性" class="headerlink" title="一，容器属性"></a>一，容器属性</h3><h4 id="1，容器内项目排列属性"><a href="#1，容器内项目排列属性" class="headerlink" title="1，容器内项目排列属性"></a>1，容器内项目排列属性</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">flex-direction: row(default) | row-recerse |colum | colum-reverse</span><br><span class="line">flex-wrap: nowrap | wrap | wrap-reverse</span><br><span class="line">flex-flow: flex-direction || flex-wrap</span><br></pre></td></tr></table></figure><h4 id="2，容器内项目在主轴对齐方式"><a href="#2，容器内项目在主轴对齐方式" class="headerlink" title="2，容器内项目在主轴对齐方式"></a>2，容器内项目在主轴对齐方式</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">justify-content: flex-start | flex-end | center | space-around | space-between</span><br></pre></td></tr></table></figure><h4 id="3，容器内项目在交叉轴的对齐方式"><a href="#3，容器内项目在交叉轴的对齐方式" class="headerlink" title="3，容器内项目在交叉轴的对齐方式"></a>3，容器内项目在交叉轴的对齐方式</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">align-items: flex-start | flex-end | baseline | stretch</span><br></pre></td></tr></table></figure><h4 id="4，定义多样轴线对齐方式"><a href="#4，定义多样轴线对齐方式" class="headerlink" title="4，定义多样轴线对齐方式"></a>4，定义多样轴线对齐方式</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">align-content: flex-start | flex-end | center | stretch | space-between | space-around</span><br></pre></td></tr></table></figure><h3 id="二，项目属性"><a href="#二，项目属性" class="headerlink" title="二，项目属性"></a>二，项目属性</h3><ul><li>ord: 定义排列顺序<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item</span>&#123;<span class="attribute">ord</span>:integer&#125;</span><br></pre></td></tr></table></figure></li><li>flex-grow：定义放大比例（default:0）<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item</span>&#123;<span class="attribute">flex-grow</span>:integer&#125;</span><br></pre></td></tr></table></figure></li><li>flex-shrink：定义缩小比例（default:1）<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item</span>&#123;<span class="attribute">flex-shrink</span>:integer&#125;</span><br></pre></td></tr></table></figure></li><li>flex-basis：定义项目占据主轴空间<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item</span>&#123;<span class="attribute">flex-basis</span>:integer | auto&#125;</span><br></pre></td></tr></table></figure></li><li>flex：混合定义<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item</span>&#123;<span class="attribute">flex</span>: flex-grow | flex-shrink | flex-basis&#125;</span><br></pre></td></tr></table></figure><h3 id="三，align-self"><a href="#三，align-self" class="headerlink" title="三，align-self"></a>三，align-self</h3>允许单个项目与其他项目相比有不一样的对齐方式<blockquote><p>与align-items属性相似，如无父元素，等同于stretch</p></blockquote><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">align-self: auto | flex-start | flex-end | flex-center | baseline | stretch</span><br></pre></td></tr></table></figure></li></ul><hr><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html" target="_blank" rel="noopener">阮一峰：Flex布局教程</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;&amp;emsp;我们经常需要对web页面的元素进行布局，在现代浏览器中，Flex功能强大，应用十分广泛，以下是一些个总结：&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="CSS" scheme="https://github.com/keviness/tags/CSS/"/>
    
      <category term="Flex" scheme="https://github.com/keviness/tags/Flex/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript Event</title>
    <link href="https://github.com/keviness/2020/03/15/JavaScript/javascript_event/"/>
    <id>https://github.com/keviness/2020/03/15/JavaScript/javascript_event/</id>
    <published>2020-03-14T16:00:00.000Z</published>
    <updated>2020-06-21T04:44:56.094Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>&emsp;众所周知，我们的世界处于动态之中，我们身边在无时无刻不发生一些变化。在web世界中，当我们让一些元素的状态发生改变时，会引发“事件”。</p><a id="more"></a><h2 id="JavaScript事件"><a href="#JavaScript事件" class="headerlink" title="JavaScript事件"></a>JavaScript事件</h2><h3 id="JavaScript-Event-示意图"><a href="#JavaScript-Event-示意图" class="headerlink" title="JavaScript Event 示意图"></a>JavaScript Event 示意图</h3><img src="/2020/03/15/JavaScript/javascript_event/javascript_event.png" class title="javascript event"><h4 id="事件流：描述从页面接收事件的次序"><a href="#事件流：描述从页面接收事件的次序" class="headerlink" title="事件流：描述从页面接收事件的次序"></a>事件流：描述从页面接收事件的次序</h4><ul><li><p>事件冒泡（event bubbling）</p><blockquote><p>由嵌套层次最深节点元素（具体事件发生元素）接收，然后向上级元素传播到不具体元素。</p></blockquote></li><li><p>事件捕获（event capturing）</p><blockquote><p>由不具体元素到具体元素传播。</p></blockquote><h4 id="事件处理程序：事件发生后响应的处理函数（方法）"><a href="#事件处理程序：事件发生后响应的处理函数（方法）" class="headerlink" title="事件处理程序：事件发生后响应的处理函数（方法）"></a>事件处理程序：事件发生后响应的处理函数（方法）</h4></li><li><p>HTML事件处理程序</p><blockquote><p>在HTML文档内部为指定元素赋予事件处理程序。<br>例如：在input元素中直接调用事件处理程序。</p></blockquote></li><li><p>DOM0级事件处理程序</p><blockquote><p>在script tag中为元素节点绑定事件处理程序</p></blockquote><p>  element.onclick = function(){statements;}</p></li><li><p>DOM2级事件处理程序</p><blockquote><p>应用事件监听程序为元素节点绑定事件处理程序。</p></blockquote><p>  element.addEventListener(“click”, function,usecapture)</p></li></ul><h4 id="事件委托（事件代理）"><a href="#事件委托（事件代理）" class="headerlink" title="事件委托（事件代理）"></a>事件委托（事件代理）</h4><blockquote><p>利用事件冒泡，只指定一个事件处理程序，可管理某一类型的所有事件。<br>事件代理可有效减少对DOM文档的操作，在父元素中统一执行子元素中某一类型的事件，可大大优化运行性能。</p></blockquote><ul><li>举例<br>&emsp;页面上有这么一个节点树，div&gt;ul&gt;li&gt;a;比如给最里面的a加一个click点击事件，那么这个事件就会一层一层的往外执行，执行顺序a&gt;li&gt;ul&gt;div。</li></ul><p>&emsp;有这样一个机制，给最外面的div加点击事件，那么里面的ul，li，a做点击事件的时候，都会冒泡到最外层的div上，所以都会触发，这就是事件委托，委托它们父级代为执行事件。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;&amp;emsp;众所周知，我们的世界处于动态之中，我们身边在无时无刻不发生一些变化。在web世界中，当我们让一些元素的状态发生改变时，会引发“事件”。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="JavaScript" scheme="https://github.com/keviness/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript DOM</title>
    <link href="https://github.com/keviness/2020/03/14/JavaScript/javascript_DOM/"/>
    <id>https://github.com/keviness/2020/03/14/JavaScript/javascript_DOM/</id>
    <published>2020-03-13T16:00:00.000Z</published>
    <updated>2020-06-19T12:21:14.032Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>&emsp;JavaScript DOM是JavaScript核心模型之一，是DOMcore的重要表现之一，它是用JavaScript进行前端开发的原生技术，是“祖先”级别的方法，以下是一些个总结：</p><a id="more"></a><h2 id="JavaScript-DOM"><a href="#JavaScript-DOM" class="headerlink" title="JavaScript DOM"></a>JavaScript DOM</h2><blockquote><p>DOM Document Object Model</p></blockquote><ul><li>DOM是JavaScript核心模型之一，它也是DOMcore的重要表现之一。</li><li>DOM实质应用表现为一个DOM节点树，除html根元素之外，都有父元素，且每个元素仅有一个父元素。<h3 id="DOM重要点："><a href="#DOM重要点：" class="headerlink" title="DOM重要点："></a>DOM重要点：</h3><h4 id="访问节点树"><a href="#访问节点树" class="headerlink" title="访问节点树"></a>访问节点树</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">object.getElementById()</span><br><span class="line">object.getElementsByClassName()</span><br><span class="line">object.getElementsByTagName()</span><br><span class="line">object.getElementsByName()</span><br></pre></td></tr></table></figure><h4 id="操作节点"><a href="#操作节点" class="headerlink" title="操作节点"></a>操作节点</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.createElement()</span><br><span class="line"><span class="built_in">document</span>.createTextNode()</span><br><span class="line">object.appendChild()</span><br><span class="line">object.insertBefore()</span><br><span class="line">object.removeChild()</span><br><span class="line">object.cloneNode(<span class="literal">true</span>/<span class="literal">false</span>)</span><br><span class="line">object.replace(newNode, oldNode)</span><br></pre></td></tr></table></figure></li></ul><hr><h4 id="操作节点属性"><a href="#操作节点属性" class="headerlink" title="操作节点属性"></a>操作节点属性</h4><h5 id="位置信息"><a href="#位置信息" class="headerlink" title="位置信息"></a>位置信息</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">parentNode  </span><br><span class="line">childNode</span><br><span class="line">firstNode   </span><br><span class="line">lastNode</span><br><span class="line">previousSibling     </span><br><span class="line">nextSibling</span><br></pre></td></tr></table></figure><h5 id="节点属性信息"><a href="#节点属性信息" class="headerlink" title="节点属性信息"></a>节点属性信息</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">attributes</span><br><span class="line">nodeType</span><br><span class="line">nodeName</span><br><span class="line">nodeValue</span><br><span class="line">innerHTML</span><br><span class="line">innerText</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;&amp;emsp;JavaScript DOM是JavaScript核心模型之一，是DOMcore的重要表现之一，它是用JavaScript进行前端开发的原生技术，是“祖先”级别的方法，以下是一些个总结：&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="JavaScript" scheme="https://github.com/keviness/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>文档流与BFC感悟</title>
    <link href="https://github.com/keviness/2020/02/14/CSS/CSSNote/"/>
    <id>https://github.com/keviness/2020/02/14/CSS/CSSNote/</id>
    <published>2020-02-13T16:00:00.000Z</published>
    <updated>2020-06-19T12:01:21.718Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>&emsp;欢迎来到CSS和HTML交汇的世界！BFC是CSS和HTML相互影响的概念，HTML世界中的各个元素各有特性，这一点如同我们现实生活中一样，HTML中的各个元素在应用中展现了不同的个性，然而都要遵守共同的法则，让我们一起来了解其中普遍的BFC法则吧…</p><a id="more"></a><h2 id="文档流"><a href="#文档流" class="headerlink" title="文档流"></a>文档流</h2><blockquote><p>normal flow 正常文档流<br>position: absolute/fix/relative; z-index; float形成脱离文档流 </p></blockquote><ol><li>文档流包括正常文档流，脱离文档流。</li><li>浮动元素具有破坏性，包裹性及浮动性。会造成父元素高度塌陷，但可以形成文字环绕的效果，应合理应用float元素。</li><li>元素浮动后，块级元素将忽略他的存在，BFC将重新感知它的存在。</li><li>block级元素具有流体性质，会自动填满父级元素，可利用该性质，在布局上形成自适应宽度的效果。</li></ol><hr><h2 id="BFC"><a href="#BFC" class="headerlink" title="BFC"></a>BFC</h2><blockquote><p>Block Format Context 块级元素格式上下文</p></blockquote><ol><li>简单来说，块级元素形成BFC后，会在内部形成一个独立渲染区域，不管外部元素如何进行渲染，BFC总是“泰山崩于前而不改其色”。</li><li>在浮动图片与块级元素（文字）同一布局时，文字形成环绕，可将块级文字用overflow:hidden;形成BFC独立渲染区域，文字将不再环绕图片。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;&amp;emsp;欢迎来到CSS和HTML交汇的世界！BFC是CSS和HTML相互影响的概念，HTML世界中的各个元素各有特性，这一点如同我们现实生活中一样，HTML中的各个元素在应用中展现了不同的个性，然而都要遵守共同的法则，让我们一起来了解其中普遍的BFC法则吧…&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="CSS" scheme="https://github.com/keviness/tags/CSS/"/>
    
      <category term="BFC" scheme="https://github.com/keviness/tags/BFC/"/>
    
      <category term="HTML" scheme="https://github.com/keviness/tags/HTML/"/>
    
  </entry>
  
</feed>

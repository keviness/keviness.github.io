<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Keviness&#39;s Blog</title>
  
  <subtitle>for man is man and master of his fate</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://keviness.github.io/"/>
  <updated>2021-02-05T16:00:00.000Z</updated>
  <id>https://keviness.github.io/</id>
  
  <author>
    <name>keviness</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>用C语言实现显示日历</title>
    <link href="https://keviness.github.io/post/40451eee.html"/>
    <id>https://keviness.github.io/post/40451eee.html</id>
    <published>2021-02-05T16:00:00.000Z</published>
    <updated>2021-02-05T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>&emsp;时间过的飞快，研一上学期已经画上了句号。在翻看新年日历的时候，我突发奇想：能不能用程序实现日历的打印，于是就有了以下实现工作，具体的实现代码请用<a href>随意门</a>。</p><a id="more"></a><h2 id="一，查找一星期的第几天"><a href="#一，查找一星期的第几天" class="headerlink" title="一，查找一星期的第几天"></a>一，查找一星期的第几天</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dayofweek</span><span class="params">(<span class="keyword">int</span> year, <span class="keyword">int</span> month, <span class="keyword">int</span> day)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (month==<span class="number">1</span> &amp;&amp; month==<span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        year--;</span><br><span class="line">        month += <span class="number">12</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (year+year/<span class="number">4</span> - year/<span class="number">100</span>+year/<span class="number">400</span> +(<span class="number">13</span>*month+<span class="number">8</span>)/<span class="number">5</span> + day) % <span class="number">7</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二，确定闰年与平年"><a href="#二，确定闰年与平年" class="headerlink" title="二，确定闰年与平年"></a>二，确定闰年与平年</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">is_leap</span><span class="params">(<span class="keyword">int</span> year)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (year%<span class="number">4</span>==<span class="number">0</span> &amp;&amp; year%<span class="number">100</span>!=<span class="number">0</span>) || year%<span class="number">400</span>==<span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三，确定每个月的天数"><a href="#三，确定每个月的天数" class="headerlink" title="三，确定每个月的天数"></a>三，确定每个月的天数</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">monthdays</span><span class="params">(<span class="keyword">int</span> year, <span class="keyword">int</span> month)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (month-- != <span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> mday[month];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> mday[month] + is_leap(year);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="四，生成日历"><a href="#四，生成日历" class="headerlink" title="四，生成日历"></a>四，生成日历</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">make_calendar</span><span class="params">(<span class="keyword">int</span> year, <span class="keyword">int</span> month, <span class="keyword">char</span> s[<span class="number">7</span>][<span class="number">22</span>])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, k;</span><br><span class="line">    <span class="keyword">int</span> wd = dayofweek(year, month, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">int</span> mdays = monthdays(year, month);</span><br><span class="line">    <span class="keyword">char</span> tmp[<span class="number">4</span>];</span><br><span class="line"></span><br><span class="line">    <span class="built_in">sprintf</span>(s[<span class="number">0</span>], <span class="string">"%14d / %02d     "</span>, year, month);</span><br><span class="line">    <span class="keyword">for</span> (k=<span class="number">1</span>; k&lt;<span class="number">7</span>; k++)</span><br><span class="line">        s[k][<span class="number">0</span>] = <span class="string">'\0'</span>;</span><br><span class="line"></span><br><span class="line">    k = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">sprintf</span>(s[k], <span class="string">"%*s"</span>, <span class="number">3</span>*wd, <span class="string">""</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">1</span>; i&lt;=mdays; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">sprintf</span>(tmp, <span class="string">"%3d"</span>, i);</span><br><span class="line">        <span class="built_in">strcat</span>(s[k], tmp);</span><br><span class="line">        <span class="keyword">if</span> (++wd % <span class="number">7</span> == <span class="number">0</span>)</span><br><span class="line">            k++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (wd % <span class="number">7</span> == <span class="number">0</span>)</span><br><span class="line">        k--;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (wd %= <span class="number">7</span>; wd&lt;<span class="number">7</span>; wd++)</span><br><span class="line">            <span class="built_in">strcat</span>(s[k], <span class="string">"  "</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (++k &lt; <span class="number">7</span>)</span><br><span class="line">        <span class="built_in">sprintf</span>(s[k], <span class="string">"%21s"</span>, <span class="string">""</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="五，把存放在三维数组中的日历横向排列n个显示"><a href="#五，把存放在三维数组中的日历横向排列n个显示" class="headerlink" title="五，把存放在三维数组中的日历横向排列n个显示"></a>五，把存放在三维数组中的日历横向排列n个显示</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">char</span> sbuf[<span class="number">3</span>][<span class="number">7</span>][<span class="number">22</span>], <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%s   "</span>, sbuf[i][<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">'\n'</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;n; i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">" Sun Mon Tue Wed Thu Fri Sat     "</span>);</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">'\n'</span>);</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;n; i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"-----------------------    "</span>);</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">'\n'</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">1</span>; i&lt;<span class="number">7</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (j=<span class="number">0</span>; j&lt;n; j++)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%s  "</span>, sbuf[j][i]);</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">'\n'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">'\n'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="六，打印y1-m1到y2-m2的日历"><a href="#六，打印y1-m1到y2-m2的日历" class="headerlink" title="六，打印y1/m1到y2/m2的日历"></a>六，打印y1/m1到y2/m2的日历</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">put_calendar</span><span class="params">(<span class="keyword">int</span> y1, <span class="keyword">int</span> m1, <span class="keyword">int</span> y2, <span class="keyword">int</span> m2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> y = y1;</span><br><span class="line">    <span class="keyword">int</span> m = m1;</span><br><span class="line">    <span class="keyword">int</span> n = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> sbuf[<span class="number">3</span>][<span class="number">7</span>][<span class="number">22</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (y &lt;= y2)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (y == y2 &amp;&amp; m &gt;m2) <span class="keyword">break</span>;</span><br><span class="line">        make_calendar(y, m, sbuf[n++]);</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">3</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">print</span>(sbuf, n);</span><br><span class="line">            n = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        m++;</span><br><span class="line">        <span class="keyword">if</span> (m==<span class="number">13</span> &amp;&amp; y&lt;y2)</span><br><span class="line">        &#123;</span><br><span class="line">            y++;</span><br><span class="line">            m = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">print</span>(sbuf, m);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;&amp;emsp;时间过的飞快，研一上学期已经画上了句号。在翻看新年日历的时候，我突发奇想：能不能用程序实现日历的打印，于是就有了以下实现工作，具体的实现代码请用&lt;a href&gt;随意门&lt;/a&gt;。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="C" scheme="https://keviness.github.io/tags/C/"/>
    
      <category term="Calendar" scheme="https://keviness.github.io/tags/Calendar/"/>
    
      <category term="Project" scheme="https://keviness.github.io/tags/Project/"/>
    
  </entry>
  
  <entry>
    <title>常用查找算法（Java实现）</title>
    <link href="https://keviness.github.io/post/dedb6031.html"/>
    <id>https://keviness.github.io/post/dedb6031.html</id>
    <published>2020-12-26T16:00:00.000Z</published>
    <updated>2020-12-26T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>&emsp;怎样在一堆混乱的数据中查找到需要的数据呢？查找算法就显得很重要了。以下是常见的查找算法实现，看实现的完整代码请用<a href="https://github.com/keviness/Algorithms/tree/master/Algorithms_Java/Search" target="_blank" rel="noopener">随意门~</a></p><a id="more"></a><h2 id="一，顺序查找"><a href="#一，顺序查找" class="headerlink" title="一，顺序查找"></a>一，顺序查找</h2><blockquote><ul><li>Sequence Search</li><li>说明：顺序查找适合于存储结构为顺序存储或链接存储的线性表。</li></ul></blockquote><h3 id="（一）基本思想"><a href="#（一）基本思想" class="headerlink" title="（一）基本思想"></a>（一）基本思想</h3><blockquote><ul><li>顺序查找也称为线形查找，属于无序查找算法。</li><li>从数据结构线形表的一端开始，顺序扫描，依次将扫描到的结点关键字与给定值k相比较，若相等则表示查找成功；若扫描结束仍没有找到关键字等于k的结点，表示查找失败。</li></ul></blockquote><h3 id="（二）复杂度分析"><a href="#（二）复杂度分析" class="headerlink" title="（二）复杂度分析　"></a>（二）复杂度分析　</h3><blockquote><ul><li>查找成功时的平均查找长度为：（假设每个数据元素的概率相等） ASL = 1/n(1+2+3+…+n) = (n+1)/2 ;</li><li>当查找不成功时，需要n+1次比较，时间复杂度为O(n);</li><li>所以，顺序查找的时间复杂度为O(n)。</li></ul></blockquote><h3 id="（三）代码实现"><a href="#（三）代码实现" class="headerlink" title="（三）代码实现"></a>（三）代码实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">SequenceSort</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> value)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;SIZE; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr[i] == value)</span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二，折半查找"><a href="#二，折半查找" class="headerlink" title="二，折半查找"></a>二，折半查找</h2><blockquote><ul><li>Binary Search</li><li>说明：元素必须是有序的，如果是无序的则要先进行排序操作。</li></ul></blockquote><h3 id="（一）基本思想-1"><a href="#（一）基本思想-1" class="headerlink" title="（一）基本思想"></a>（一）基本思想</h3><blockquote><ul><li>也称为是折半查找，属于有序查找算法。</li><li>用给定值k先与中间结点的关键字比较，中间结点把线形表分成两个子表，若相等则查找成功；若不相等，再根据k与该中间结点关键字的比较结果确定下一步查找哪个子表，这样递归进行，直到查找到或查找结束发现表中没有这样的结点。</li></ul></blockquote><h3 id="（二）复杂度分析-1"><a href="#（二）复杂度分析-1" class="headerlink" title="（二）复杂度分析"></a>（二）复杂度分析</h3><blockquote><ul><li>最坏情况下，关键词比较次数为log2(n+1)，且期望时间复杂度为O(log2n)。</li></ul></blockquote><h3 id="（三）代码实现-1"><a href="#（三）代码实现-1" class="headerlink" title="（三）代码实现"></a>（三）代码实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*** 非递归版本 ***/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">BinarySearch</span><span class="params">(<span class="keyword">int</span>[] a, <span class="keyword">int</span> value, <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> low, high;</span><br><span class="line">    low = <span class="number">0</span>;</span><br><span class="line">    high = n-<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(low &lt;= high)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = (low+high)/<span class="number">2</span>;</span><br><span class="line">        printf(<span class="string">"low:%d\n"</span>, low);</span><br><span class="line">        printf(<span class="string">"high:%d\n"</span>, high);</span><br><span class="line">        printf(<span class="string">"middle:%d\n"</span>, mid);</span><br><span class="line">        <span class="keyword">if</span>(a[mid] == value)</span><br><span class="line">            <span class="keyword">return</span> mid;</span><br><span class="line">        <span class="keyword">if</span>(a[mid] &gt; value)</span><br><span class="line">            high = mid-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(a[mid] &lt; value)</span><br><span class="line">            low = mid+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*** 递归实现 ***/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">BinarySort</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> value, <span class="keyword">int</span> low, <span class="keyword">int</span> high)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (low &gt; high)</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> middle = (low+high)/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span> (arr[middle] == value)</span><br><span class="line">        <span class="keyword">return</span> middle;</span><br><span class="line">    <span class="keyword">if</span> (arr[middle] &gt; value)</span><br><span class="line">        <span class="keyword">return</span> BinarySort(arr, value, low, high-<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> (arr[middle] &lt; value)</span><br><span class="line">        <span class="keyword">return</span> BinarySort(arr, value, middle+<span class="number">1</span>, high);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三，插值查找"><a href="#三，插值查找" class="headerlink" title="三，插值查找"></a>三，插值查找</h2><h3 id="（一）基本思想-2"><a href="#（一）基本思想-2" class="headerlink" title="（一）基本思想"></a>（一）基本思想</h3><blockquote><ul><li>基于二分查找算法，将查找点的选择改进为自适应选择，可以提高查找效率。当然，差值查找也属于有序查找。</li><li>mid=low+(key-a[low])/(a[high]-a[low])*(high-low)</li><li>将上述的比例参数1/2改进为自适应的，根据关键字在整个有序表中所处的位置，让mid值的变化更靠近关键字key，这样也就间接地减少了比较次数。</li></ul></blockquote><h3 id="（二）复杂度分析-2"><a href="#（二）复杂度分析-2" class="headerlink" title="（二）复杂度分析"></a>（二）复杂度分析</h3><blockquote><ul><li>查找成功或者失败的时间复杂度均为：O(log2(log2n))。</li></ul></blockquote><h3 id="（三）代码实现-2"><a href="#（三）代码实现-2" class="headerlink" title="（三）代码实现"></a>（三）代码实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*** 非递归版本 ***/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">InsertSearch</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> value, <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> low, high, mid;</span><br><span class="line">    low = <span class="number">0</span>;</span><br><span class="line">    high = n-<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(low &lt;= high)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//自适应获取应该取得的索引</span></span><br><span class="line">        mid = low + ((value-arr[low])/(arr[high]-arr[low]))*(high-low);</span><br><span class="line">        printf(<span class="string">"low:%d\n"</span>, low);</span><br><span class="line">        printf(<span class="string">"high:%d\n"</span>, high);</span><br><span class="line">        printf(<span class="string">"middle:%d\n"</span>, mid);</span><br><span class="line">        <span class="keyword">if</span>(arr[mid] == value)</span><br><span class="line">            <span class="keyword">return</span> mid;</span><br><span class="line">        <span class="keyword">if</span>(arr[mid] &gt; value)</span><br><span class="line">            high = mid-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(arr[mid] &lt; value)</span><br><span class="line">            low = mid+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*** 递归实现 ***/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">InsertSort</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> value, <span class="keyword">int</span> low, <span class="keyword">int</span> high)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (low &gt; high)</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> middle = low + (value-arr[low])/(arr[high]-arr[low])*(high-low);</span><br><span class="line">    <span class="keyword">if</span> (arr[middle] == value)</span><br><span class="line">        <span class="keyword">return</span> middle;</span><br><span class="line">    <span class="keyword">if</span> (arr[middle] &gt; value)</span><br><span class="line">        <span class="keyword">return</span> InsertSort(arr, value, low, high-<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> (arr[middle] &lt; value)</span><br><span class="line">        <span class="keyword">return</span> InsertSort(arr, value, middle+<span class="number">1</span>, high);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="四，分块查找"><a href="#四，分块查找" class="headerlink" title="四，分块查找"></a>四，分块查找</h2><h3 id="（一）基本思想-3"><a href="#（一）基本思想-3" class="headerlink" title="（一）基本思想"></a>（一）基本思想</h3><blockquote><ul><li>也叫索引顺序查找，算法实现除了需要查找表本身之外，还需要根据查找表建立一个索引表。</li><li>建立的索引表要求按照关键字进行升序排序，查找表要么整体有序，要么分块有序。 分块有序指的是第二个子表中所有关键字都要大于第一个子表中的最大关键字，第三个子表的所有关键字都要大于第二个子表中 的最大关键字，依次类推。</li></ul></blockquote><h3 id="（二）复杂度分析-3"><a href="#（二）复杂度分析-3" class="headerlink" title="（二）复杂度分析"></a>（二）复杂度分析</h3><blockquote><ul><li>分块查找算法的运行效率受两部分影响：查找块的操作和块内查找的操作。</li><li>查找块的操作可以采用顺序查找，也可以采用折半查 找（更优）；块内查找的操作采用顺序查找的方式。</li><li>相比于折半查找，分块查找时间效率上更低一些；相比于顺序查找，由于在子表中进行，比较的子表个数会不同程度的减少，所有分块查找算法会更优</li><li>总体来说，分块查找算法的效率介于顺序查找和折半查找之间。</li></ul></blockquote><h3 id="（三）代码实现-3"><a href="#（三）代码实现-3" class="headerlink" title="（三）代码实现"></a>（三）代码实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">search</span><span class="params">(<span class="keyword">int</span> key, <span class="keyword">int</span>[] a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, startValue;</span><br><span class="line">    i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (i&lt;<span class="number">3</span> &amp;&amp; key&gt;newIndex[i].key) </span><br><span class="line">    &#123; </span><br><span class="line">        <span class="comment">//确定在哪个块中，遍历每个块，确定 key 在哪个块中</span></span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (i&gt;=<span class="number">3</span>) </span><br><span class="line">    &#123; </span><br><span class="line">        <span class="comment">//大于分得的块数，则返回 0</span></span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    startValue = newIndex[i].start; <span class="comment">//startValue 等于块范围的起始值</span></span><br><span class="line">    <span class="keyword">while</span> (startValue &lt;= startValue+<span class="number">5</span> &amp;&amp; a[startValue]!=key)</span><br><span class="line">    &#123;</span><br><span class="line">        startValue++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (startValue&gt;startValue+<span class="number">5</span>) </span><br><span class="line">    &#123; </span><br><span class="line">        <span class="comment">//如果大于块范围的结束值，则说明没有要查找的数</span></span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> startValue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="五，斐波那契查找"><a href="#五，斐波那契查找" class="headerlink" title="五，斐波那契查找"></a>五，斐波那契查找</h2><h3 id="（一）基本思想-4"><a href="#（一）基本思想-4" class="headerlink" title="（一）基本思想"></a>（一）基本思想</h3><blockquote><ul><li>也是二分查找的一种提升算法，通过运用黄金比例的概念在数列中选择查找点进行查找，提高查找效率。同样地，斐波那契查找也属于一种有序查找算法。<br>斐波那契查找与折半查找很相似，他是根据斐波那契序列的特点对有序表进行分割的。他要求开始表中记录的个数为某个斐波那契数小1，及n=F(k)-1;</li></ul></blockquote><blockquote><ul><li>开始将k值与第F(k-1)位置的记录进行比较(及mid=low+F(k-1)-1),比较结果也分为三种：</li><li>1）相等，mid位置的元素即为所求</li><li>2）&gt;，low=mid+1,k-=2;</li><li>说明：low=mid+1说明待查找的元素在[mid+1,high]范围内，k-=2 说明范围[mid+1,high]内的元素个数为n-(F(k-1))= Fk-1-F(k-1)=Fk-F(k-1)-1=F(k-2)-1个，所以可以递归的应用斐波那契查找。</li><li>3）&lt;，high=mid-1,k-=1。</li><li>说明：low=mid+1说明待查找的元素在[low,mid-1]范围内，k-=1 说明范围[low,mid-1]内的元素个数为F(k-1)-1个，所以可以递归 的应用斐波那契查找。</li></ul></blockquote><h3 id="（二）复杂度分析-4"><a href="#（二）复杂度分析-4" class="headerlink" title="（二）复杂度分析"></a>（二）复杂度分析</h3><blockquote><ul><li>最坏情况下，时间复杂度为O(log 2 n)，且其期望复杂度也为O(log 2 n)。</li></ul></blockquote><h3 id="（三）代码实现-4"><a href="#（三）代码实现-4" class="headerlink" title="（三）代码实现"></a>（三）代码实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*构造一个斐波那契数组*/</span> </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Fibonacci</span><span class="params">(<span class="keyword">int</span>[] F)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    F[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    F[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>; i&lt;max_size; ++i)</span><br><span class="line">        F[i] = F[i-<span class="number">1</span>] + F[i-<span class="number">2</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*定义斐波那契查找法*/</span>  </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">FibonacciSearch</span><span class="params">(<span class="keyword">int</span>[] a, <span class="keyword">int</span> n, <span class="keyword">int</span> key)</span>  </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> low = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> high = n-<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> F[max_size];</span><br><span class="line">    Fibonacci(F);   <span class="comment">//构造一个斐波那契数组F </span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> k = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(n &gt; F[k]-<span class="number">1</span>) <span class="comment">//计算n位于斐波那契数列的位置</span></span><br><span class="line">        ++k;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">int</span> temp[F[k]-<span class="number">1</span>];<span class="comment">//将数组a扩展到F[k]-1的长度</span></span><br><span class="line">    memcpy(temp, a, n*sizeof(<span class="keyword">int</span>));</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=n; i&lt;F[k]-<span class="number">1</span>; ++i)</span><br><span class="line">        temp[i] = a[n-<span class="number">1</span>];</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">while</span>(low &lt;= high)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = low + F[k-<span class="number">1</span>] - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(key &lt; temp[mid])</span><br><span class="line">        &#123;</span><br><span class="line">            high = mid - <span class="number">1</span>;</span><br><span class="line">            k-=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(key &gt; temp[mid])</span><br><span class="line">        &#123;</span><br><span class="line">            low = mid + <span class="number">1</span>;</span><br><span class="line">            k-=<span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(mid &lt; n)</span><br><span class="line">                <span class="keyword">return</span> mid; <span class="comment">//若相等则说明mid即为查找到的位置</span></span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">return</span> n-<span class="number">1</span>; <span class="comment">//若mid&gt;=n则说明是扩展的数值,返回n-1</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;&amp;emsp;怎样在一堆混乱的数据中查找到需要的数据呢？查找算法就显得很重要了。以下是常见的查找算法实现，看实现的完整代码请用&lt;a href=&quot;https://github.com/keviness/Algorithms/tree/master/Algorithms_Java/Search&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;随意门~&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Algorithms" scheme="https://keviness.github.io/tags/Algorithms/"/>
    
      <category term="Search" scheme="https://keviness.github.io/tags/Search/"/>
    
      <category term="Java" scheme="https://keviness.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>常见排序算法（Java实现）</title>
    <link href="https://keviness.github.io/post/f6eb039a.html"/>
    <id>https://keviness.github.io/post/f6eb039a.html</id>
    <published>2020-12-24T16:00:00.000Z</published>
    <updated>2020-12-24T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>&emsp;在算法的世界里，顺序具有重要地位。以下是一些常用排序算法的实现，完整实现代码请用<a href="https://github.com/keviness/Algorithms/tree/master/Algorithms_Java/Sort" target="_blank" rel="noopener">神奇的传送门~</a>。</p><a id="more"></a><h2 id="常见排序"><a href="#常见排序" class="headerlink" title="常见排序"></a>常见排序</h2><h3 id="一，插入排序"><a href="#一，插入排序" class="headerlink" title="一，插入排序"></a>一，插入排序</h3><blockquote><p>Insertion Sort</p></blockquote><h4 id="（一）直接插入排序"><a href="#（一）直接插入排序" class="headerlink" title="（一）直接插入排序"></a>（一）直接插入排序</h4><blockquote><p>Straight Insertion Sort</p></blockquote><h5 id="基本思想"><a href="#基本思想" class="headerlink" title="基本思想"></a>基本思想</h5><blockquote><ul><li>将一个记录插入到已排序好的有序表中，从而得到一个新，记录数增1的有序表。即：先将序列的第1个记录看成是一个有序的子序列，然后从第2个记录逐个进行插入，直至整个序列有序为止。</li></ul></blockquote><h5 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">StraightInsertionSort</span><span class="params">(<span class="keyword">int</span>[] arr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    for (i=2; i&lt;SIZE; i++)</span></span><br><span class="line"><span class="comment">    &#123;</span></span><br><span class="line"><span class="comment">        if (arr[i] &lt; arr[i-1])</span></span><br><span class="line"><span class="comment">        &#123;</span></span><br><span class="line"><span class="comment">            arr[0] = arr[i];  //设置数组首元素为哨兵</span></span><br><span class="line"><span class="comment">            for (j=i-1; arr[j]&gt;arr[0]; j--)</span></span><br><span class="line"><span class="comment">            &#123;</span></span><br><span class="line"><span class="comment">                arr[j+1] = arr[j];</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">            arr[j+1] = arr[0];</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">for</span> (i=<span class="number">1</span>; i&lt;SIZE; i++) <span class="comment">//首元素从第二个开始</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr[i] &lt; arr[i-<span class="number">1</span>])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> value = arr[i];  <span class="comment">//没有设置数组首元素为哨兵</span></span><br><span class="line">            <span class="keyword">for</span> (j=i-<span class="number">1</span>; j&gt;=<span class="number">0</span> &amp;&amp; arr[j]&gt;value; j--)</span><br><span class="line">            &#123;</span><br><span class="line">                arr[j+<span class="number">1</span>] = arr[j];</span><br><span class="line">            &#125;</span><br><span class="line">            arr[j+<span class="number">1</span>] = value;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="（二）折半排序"><a href="#（二）折半排序" class="headerlink" title="（二）折半排序"></a>（二）折半排序</h4><h5 id="基本思想-1"><a href="#基本思想-1" class="headerlink" title="基本思想"></a>基本思想</h5><blockquote><ul><li>在直接插入排序的基础上，在有序的子序列中运用折半查找确定插入位置。</li></ul></blockquote><h5 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">BInsertSort</span><span class="params">(<span class="keyword">int</span>[] arr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j, m, value, low, high;</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">1</span>; i&lt;SIZE; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        low = <span class="number">0</span>;</span><br><span class="line">        high = i-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (arr[i] &lt; arr[i-<span class="number">1</span>])</span><br><span class="line">        &#123;</span><br><span class="line">            value = arr[i];</span><br><span class="line">            <span class="keyword">while</span> (low &lt;= high)</span><br><span class="line">            &#123;</span><br><span class="line">                m = (low+high)/<span class="number">2</span>;</span><br><span class="line">                <span class="keyword">if</span> (arr[m]&gt;value) </span><br><span class="line">                    high = m-<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">else</span> </span><br><span class="line">                    low = m+<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (j=i-<span class="number">1</span>; j&gt;=high+<span class="number">1</span>; j--)</span><br><span class="line">            &#123;</span><br><span class="line">                arr[j+<span class="number">1</span>] = arr[j];</span><br><span class="line">            &#125;</span><br><span class="line">            arr[j+<span class="number">1</span>] = value; <span class="comment">//arr[high+1] = value;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="（三）希尔排序"><a href="#（三）希尔排序" class="headerlink" title="（三）希尔排序"></a>（三）希尔排序</h4><h5 id="基本思想-2"><a href="#基本思想-2" class="headerlink" title="基本思想"></a>基本思想</h5><blockquote><ul><li>先将整个待排序的记录序列分割成为若干子序列分别进行直接插入排序，待整个序列中的记录“基本有序”时，再对全体记录进行依次直接插入排序。</li></ul></blockquote><h5 id="代码实现-2"><a href="#代码实现-2" class="headerlink" title="代码实现"></a>代码实现</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">shellSort</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> incresement)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i=incresement; i&lt;SIZE; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr[i] &lt; arr[i-incresement])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> value = arr[i];</span><br><span class="line">            <span class="keyword">for</span> (j=i-incresement; j&gt;=<span class="number">0</span>&amp;&amp;arr[j]&gt;value; j=j-incresement)</span><br><span class="line">            &#123;</span><br><span class="line">                arr[j+incresement] = arr[j];</span><br><span class="line">            &#125;</span><br><span class="line">            arr[j+incresement] = value;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二，选择排序"><a href="#二，选择排序" class="headerlink" title="二，选择排序"></a>二，选择排序</h3><blockquote><p>Selection Sort</p></blockquote><h4 id="（一）简单选择排序"><a href="#（一）简单选择排序" class="headerlink" title="（一）简单选择排序"></a>（一）简单选择排序</h4><blockquote><p>Simple Selection Sort</p></blockquote><h5 id="基本思想-3"><a href="#基本思想-3" class="headerlink" title="基本思想"></a>基本思想</h5><blockquote><ul><li>在要排序的一组数中，选出最小（或者最大）的一个数与第1个位置的数交换；然后在剩下的数当中再找最小（或者最大）的与第2个位置的数交换，依次类推，直到第n-1个元素（倒数第二个数）和第n个元素（最后一个数）比较为止。</li></ul></blockquote><h5 id="代码实现-3"><a href="#代码实现-3" class="headerlink" title="代码实现"></a>代码实现</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">SimpleSelectSort</span><span class="params">(<span class="keyword">int</span>[] arr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j, min, temp;</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;SIZE-<span class="number">1</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        min = i;</span><br><span class="line">        <span class="keyword">for</span> (j=i+<span class="number">1</span>; j&lt;SIZE; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[min]&gt;arr[j])</span><br><span class="line">            &#123;</span><br><span class="line">                min = j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (min != i)</span><br><span class="line">        &#123;</span><br><span class="line">            temp = arr[min];</span><br><span class="line">            arr[min] = arr[i];</span><br><span class="line">            arr[i] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="（二）堆排序"><a href="#（二）堆排序" class="headerlink" title="（二）堆排序"></a>（二）堆排序</h4><blockquote><p>Heap Sort</p></blockquote><h5 id="基本思想-4"><a href="#基本思想-4" class="headerlink" title="基本思想"></a>基本思想</h5><blockquote><ul><li>堆的定义如下：具有n个元素的序列（k1,k2,…,kn),当且仅当满足ai&gt;=a2i+1,ai&gt;=a2i或者ai&lt;=a2i+1,ai&lt;=a2i时称之为堆。</li><li>可以将堆看做是一个完全二叉树。并且，每个结点的值都大于等于其左右孩子结点的值，称为大顶堆；或者每个结点的值都小于等于其左右孩子结点的值，称为小顶堆。</li><li>将待排序列表构造成一个最大堆，作为初始无序堆（即初始无序列表）</li><li>将堆顶元素（最大值）与堆尾元素互换</li><li>将该堆（无序区）尺寸缩小1，并对缩小后的堆重新调整为最大堆形式</li><li>重复上述步骤，直至堆（无序区）的尺寸变为1，此时排序完成</li></ul></blockquote><h5 id="代码实现-4"><a href="#代码实现-4" class="headerlink" title="代码实现"></a>代码实现</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">heapify</span><span class="params">(<span class="keyword">int</span>[] tree, <span class="keyword">int</span> n, <span class="keyword">int</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (i &gt;= n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> c1 = i*<span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> c2 = i*<span class="number">2</span> + <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">int</span> max = i;</span><br><span class="line">    <span class="keyword">if</span> (c1&lt;n &amp;&amp; tree[c1]&gt;tree[max])</span><br><span class="line">        max = c1;</span><br><span class="line">    <span class="keyword">if</span> (c2&lt;n &amp;&amp; tree[c2]&gt;tree[max])</span><br><span class="line">        max = c2;</span><br><span class="line">    <span class="keyword">if</span> (max != i)</span><br><span class="line">    &#123;</span><br><span class="line">        swap(tree, i, max);</span><br><span class="line">        heapify(tree, n, max);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">buildHeap</span><span class="params">(<span class="keyword">int</span>[] tree, <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> last_node = n-<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> last_node_parent = (last_node-<span class="number">1</span>)/<span class="number">2</span>; </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=last_node_parent; i&gt;=<span class="number">0</span>; i--)</span><br><span class="line">    &#123;</span><br><span class="line">        heapify(tree, n, i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">heapSort</span><span class="params">(<span class="keyword">int</span>[] tree, <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    buildHeap(tree, n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=n-<span class="number">1</span>; i&gt;=<span class="number">0</span>; i--)</span><br><span class="line">    &#123;</span><br><span class="line">        swap(tree, i, <span class="number">0</span>);</span><br><span class="line">        heapify(tree, i, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] tree, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> temp = tree[i];</span><br><span class="line">    tree[i] = tree[j];</span><br><span class="line">    tree[j] = temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="三，交换排序"><a href="#三，交换排序" class="headerlink" title="三，交换排序"></a>三，交换排序</h3><blockquote><p>Swap Sort</p></blockquote><h4 id="（一）冒泡排序"><a href="#（一）冒泡排序" class="headerlink" title="（一）冒泡排序"></a>（一）冒泡排序</h4><blockquote><p>Bubble Sort</p></blockquote><h5 id="基本思想-5"><a href="#基本思想-5" class="headerlink" title="基本思想"></a>基本思想</h5><blockquote><ul><li>重复的遍历（走过）待排序的一组数字（通常是列表形式），依次比较两个相邻的元素（数字），若它们的顺序错误则将它们调换一下位置，直至没有元素再需要交换为止。</li><li>每遍历一次列表，最大（或最小）的元素会经过交换一点点”浮“到列表的一端（顶端），所以形象的称这个算法为冒泡算法。</li></ul></blockquote><h5 id="代码实现-5"><a href="#代码实现-5" class="headerlink" title="代码实现"></a>代码实现</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">BubbleSort</span><span class="params">(<span class="keyword">int</span>[] arr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j, temp, flag;</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;SIZE-<span class="number">1</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        flag = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (j=<span class="number">0</span>; j&lt;SIZE-i-<span class="number">1</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[j] &gt; arr[j+<span class="number">1</span>])</span><br><span class="line">            &#123;</span><br><span class="line">                temp = arr[j];</span><br><span class="line">                arr[j] = arr[j+<span class="number">1</span>];</span><br><span class="line">                arr[j+<span class="number">1</span>] = temp;</span><br><span class="line">                flag = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (flag == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="（二）快速排序"><a href="#（二）快速排序" class="headerlink" title="（二）快速排序"></a>（二）快速排序</h4><blockquote><p>Quick Sort</p></blockquote><h5 id="基本思想-6"><a href="#基本思想-6" class="headerlink" title="基本思想"></a>基本思想</h5><blockquote><ul><li>通过一趟排序将待排序列表分割成独立的两部分，其中一部分的所有元素都比另一部分小，然后再按此方法将独立的两部分分别继续重复进行此操作，这个过程我们可以通过递归实现，从而达到最终将整个列表排序的目的。</li></ul></blockquote><h5 id="代码实现-6"><a href="#代码实现-6" class="headerlink" title="代码实现"></a>代码实现</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">quicksort</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> low, <span class="keyword">int</span> high)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> pos;</span><br><span class="line">    <span class="keyword">if</span> (low &lt; high)</span><br><span class="line">    &#123;</span><br><span class="line">        pos = findpos(arr, low, high);</span><br><span class="line">        quicksort(arr, low, pos-<span class="number">1</span>);</span><br><span class="line">        quicksort(arr, pos+<span class="number">1</span>, high);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">findpos</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> low, <span class="keyword">int</span> high)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> value = arr[low];</span><br><span class="line">    <span class="keyword">while</span> (low &lt; high)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span> (low&lt;high &amp;&amp; arr[high]&gt;=value)</span><br><span class="line">        &#123;</span><br><span class="line">            high--;</span><br><span class="line">        &#125;</span><br><span class="line">        arr[low] = arr[high];</span><br><span class="line">        <span class="keyword">while</span> (low&lt;high &amp;&amp; arr[low]&lt;=value)</span><br><span class="line">        &#123;</span><br><span class="line">            low++;</span><br><span class="line">        &#125;</span><br><span class="line">        arr[high] = arr[low];</span><br><span class="line">    &#125;</span><br><span class="line">    arr[low] = value;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> low;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="四，归并排序"><a href="#四，归并排序" class="headerlink" title="四，归并排序"></a>四，归并排序</h3><blockquote><p>Merge Sort</p></blockquote><h5 id="基本思想-7"><a href="#基本思想-7" class="headerlink" title="基本思想"></a>基本思想</h5><blockquote><ul><li>是将两个（或两个以上）有序表合并成一个新的有序表，即把待排序序列分为若干个子序列，每个子序列是有序的。然后再把有序子序列合并为整体有序序列。</li></ul></blockquote><h5 id="代码实现-7"><a href="#代码实现-7" class="headerlink" title="代码实现"></a>代码实现</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Merge</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> left, <span class="keyword">int</span> middle, <span class="keyword">int</span> right)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> left_size = middle-left;</span><br><span class="line">    <span class="keyword">int</span> right_size = right-middle+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> left_arr[left_size];</span><br><span class="line">    <span class="keyword">int</span> right_arr[right_size];</span><br><span class="line">    <span class="keyword">int</span> i, j, k;</span><br><span class="line">    <span class="keyword">for</span> (i=left; i&lt;middle; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        left_arr[i-left] = arr[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (j=middle; j&lt;=right; j++)</span><br><span class="line">    &#123;</span><br><span class="line">        right_arr[j-middle] = arr[j];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//对两个子数组元素进行合并</span></span><br><span class="line">    i=<span class="number">0</span>; j=<span class="number">0</span>; k=left;</span><br><span class="line">    <span class="keyword">while</span> (i&lt;left_size &amp;&amp; j&lt;right_size)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (left_arr[i] &lt; right_arr[j])</span><br><span class="line">        &#123;</span><br><span class="line">            arr[k] = left_arr[i];</span><br><span class="line">            i++;</span><br><span class="line">            k++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            arr[k] = right_arr[j];</span><br><span class="line">            j++;</span><br><span class="line">            k++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//将剩余数据填入源数组中</span></span><br><span class="line">    <span class="keyword">while</span> (i &lt; left_size)</span><br><span class="line">    &#123;</span><br><span class="line">        arr[k] = left_arr[i];</span><br><span class="line">        i++;</span><br><span class="line">        k++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (j &lt; right_size)</span><br><span class="line">    &#123;</span><br><span class="line">        arr[k] = right_arr[j];</span><br><span class="line">        j++;</span><br><span class="line">        k++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">MergeSort</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (left &gt;= right)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> middle = (left+right)/<span class="number">2</span>;</span><br><span class="line">        MergeSort(arr, left, middle);</span><br><span class="line">        MergeSort(arr, middle+<span class="number">1</span>, right);</span><br><span class="line">        Merge(arr, left, middle+<span class="number">1</span>, right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;&amp;emsp;在算法的世界里，顺序具有重要地位。以下是一些常用排序算法的实现，完整实现代码请用&lt;a href=&quot;https://github.com/keviness/Algorithms/tree/master/Algorithms_Java/Sort&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;神奇的传送门~&lt;/a&gt;。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Algorithms" scheme="https://keviness.github.io/tags/Algorithms/"/>
    
      <category term="Sort" scheme="https://keviness.github.io/tags/Sort/"/>
    
      <category term="Java" scheme="https://keviness.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>队列顺序存储实现（java实现）</title>
    <link href="https://keviness.github.io/post/f8b7c9ad.html"/>
    <id>https://keviness.github.io/post/f8b7c9ad.html</id>
    <published>2020-12-18T16:00:00.000Z</published>
    <updated>2020-12-18T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>&emsp;在算法中队列有顺序存储（连续存储）和链式存储（离散存储）两种方式。其中顺序存储必须要用循环队列的形式实现，具体实现可以走<a href="https://github.com/keviness/Algorithms/blob/master/Algorithms_Java/DataStruct/Queue/QueueSequence.java" target="_blank" rel="noopener">随意门~</a></p><a id="more"></a><h3 id="一，实现代码"><a href="#一，实现代码" class="headerlink" title="一，实现代码"></a>一，实现代码</h3><h4 id="（一）队列数据形式"><a href="#（一）队列数据形式" class="headerlink" title="（一）队列数据形式"></a>（一）队列数据形式</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> data;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(String name, <span class="keyword">int</span> data)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"The name:"</span>+<span class="keyword">this</span>.name+<span class="string">" the data:"</span>+<span class="keyword">this</span>.data;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="（二）初始化队列"><a href="#（二）初始化队列" class="headerlink" title="（二）初始化队列"></a>（二）初始化队列</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">int</span> length;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span> count;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span> front;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span> rear;</span><br><span class="line"><span class="keyword">public</span> Node[] queue;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Queue</span><span class="params">(<span class="keyword">int</span> length)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.length = length;</span><br><span class="line">    queue = <span class="keyword">new</span> Node[<span class="keyword">this</span>.length];</span><br><span class="line">    <span class="keyword">this</span>.front = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">this</span>.rear = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="（三）检测队列为空或已满"><a href="#（三）检测队列为空或已满" class="headerlink" title="（三）检测队列为空或已满"></a>（三）检测队列为空或已满</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.front == <span class="keyword">this</span>.rear;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isFull</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">this</span>.rear+<span class="number">1</span>)%<span class="keyword">this</span>.length == <span class="keyword">this</span>.front;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="（四）入队出队操作"><a href="#（四）入队出队操作" class="headerlink" title="（四）入队出队操作"></a>（四）入队出队操作</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">EnQueue</span><span class="params">(Node target)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.isFull())</span><br><span class="line">    &#123;</span><br><span class="line">        System.out.<span class="built_in">println</span>(<span class="string">"The queue is full!"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.<span class="built_in">queue</span>[<span class="keyword">this</span>.rear] = target;</span><br><span class="line">    <span class="keyword">this</span>.rear = (<span class="keyword">this</span>.rear+<span class="number">1</span>)%<span class="keyword">this</span>.length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Node <span class="title">DeQueue</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.isEmpty())</span><br><span class="line">    &#123;</span><br><span class="line">        System.out.<span class="built_in">println</span>(<span class="string">"The queue is empty!"</span>);</span><br><span class="line">        <span class="keyword">return</span> null;</span><br><span class="line">    &#125;</span><br><span class="line">    Node temp = <span class="keyword">this</span>.<span class="built_in">queue</span>[<span class="keyword">this</span>.front];</span><br><span class="line">    <span class="keyword">this</span>.front = (<span class="keyword">this</span>.front+<span class="number">1</span>)%<span class="keyword">this</span>.length;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="（五）打印队列"><a href="#（五）打印队列" class="headerlink" title="（五）打印队列"></a>（五）打印队列</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.isEmpty())</span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">"The queue is empty!"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="keyword">this</span>.front;</span><br><span class="line">    <span class="keyword">while</span> (i != <span class="keyword">this</span>.rear)</span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="keyword">this</span>.queue[i]);</span><br><span class="line">        i = (i+<span class="number">1</span>)%<span class="keyword">this</span>.length;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;&amp;emsp;在算法中队列有顺序存储（连续存储）和链式存储（离散存储）两种方式。其中顺序存储必须要用循环队列的形式实现，具体实现可以走&lt;a href=&quot;https://github.com/keviness/Algorithms/blob/master/Algorithms_Java/DataStruct/Queue/QueueSequence.java&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;随意门~&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Algorithms" scheme="https://keviness.github.io/tags/Algorithms/"/>
    
      <category term="Java" scheme="https://keviness.github.io/tags/Java/"/>
    
      <category term="Queue Sequence" scheme="https://keviness.github.io/tags/Queue-Sequence/"/>
    
  </entry>
  
  <entry>
    <title>队列链式存储实现（java实现）</title>
    <link href="https://keviness.github.io/post/dcb6bac6.html"/>
    <id>https://keviness.github.io/post/dcb6bac6.html</id>
    <published>2020-12-17T16:00:00.000Z</published>
    <updated>2020-12-17T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>&emsp;前面已经简单论述过它的顺序存储实现，接下来是它的链式存储实现，以下是一些实现思路，完整代码请用<a href="https://github.com/keviness/Algorithms/blob/master/Algorithms_Java/DataStruct/Queue/QueueLink.java" target="_blank" rel="noopener">随意门~</a></p><a id="more"></a><h3 id="一，实现代码"><a href="#一，实现代码" class="headerlink" title="一，实现代码"></a>一，实现代码</h3><h4 id="（一）队列结点形式"><a href="#（一）队列结点形式" class="headerlink" title="（一）队列结点形式"></a>（一）队列结点形式</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> data;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">public</span> Node next;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(String name, <span class="keyword">int</span> data)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"The name:"</span>+<span class="keyword">this</span>.name+<span class="string">" The data:"</span>+<span class="keyword">this</span>.data;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="（二）初始化队列"><a href="#（二）初始化队列" class="headerlink" title="（二）初始化队列"></a>（二）初始化队列</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Node front;</span><br><span class="line">    <span class="keyword">public</span> Node rear;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> length;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Queue</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.front = <span class="keyword">new</span> Node(<span class="keyword">null</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">this</span>.rear = <span class="keyword">this</span>.front;</span><br><span class="line">        <span class="keyword">this</span>.length = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="（三）检测队列为空"><a href="#（三）检测队列为空" class="headerlink" title="（三）检测队列为空"></a>（三）检测队列为空</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.rear == <span class="keyword">this</span>.front;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="（四）入队操作"><a href="#（四）入队操作" class="headerlink" title="（四）入队操作"></a>（四）入队操作</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">EnQueue</span><span class="params">(Node target)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.rear.next = target;</span><br><span class="line">        <span class="keyword">this</span>.rear = target;</span><br><span class="line">        <span class="keyword">this</span>.length++;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="（五）出队操作"><a href="#（五）出队操作" class="headerlink" title="（五）出队操作"></a>（五）出队操作</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Node <span class="title">DeQueue</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.isEmpty())</span><br><span class="line">        &#123;</span><br><span class="line">            System.out.println(<span class="string">"The queue is empty!"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Node temp = <span class="keyword">this</span>.front.next;</span><br><span class="line">        System.out.println(<span class="string">"The enqueue node:"</span>+temp);</span><br><span class="line">        <span class="keyword">this</span>.front.next = temp.next;</span><br><span class="line">        <span class="keyword">if</span> (temp == <span class="keyword">this</span>.rear)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">this</span>.rear = <span class="keyword">this</span>.front;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> temp;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="（六）打印队列"><a href="#（六）打印队列" class="headerlink" title="（六）打印队列"></a>（六）打印队列</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.isEmpty())</span><br><span class="line">        &#123;</span><br><span class="line">            System.out.println(<span class="string">"The queue is empty!"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Node temp = <span class="keyword">this</span>.front.next;</span><br><span class="line">        <span class="keyword">while</span> (temp != <span class="keyword">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            System.out.println(temp);</span><br><span class="line">            temp = temp.next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;&amp;emsp;前面已经简单论述过它的顺序存储实现，接下来是它的链式存储实现，以下是一些实现思路，完整代码请用&lt;a href=&quot;https://github.com/keviness/Algorithms/blob/master/Algorithms_Java/DataStruct/Queue/QueueLink.java&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;随意门~&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Algorithms" scheme="https://keviness.github.io/tags/Algorithms/"/>
    
      <category term="Java" scheme="https://keviness.github.io/tags/Java/"/>
    
      <category term="Queue Link" scheme="https://keviness.github.io/tags/Queue-Link/"/>
    
  </entry>
  
  <entry>
    <title>栈的链式存储实现（Java实现）</title>
    <link href="https://keviness.github.io/post/f05b471.html"/>
    <id>https://keviness.github.io/post/f05b471.html</id>
    <published>2020-12-16T16:00:00.000Z</published>
    <updated>2020-12-16T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>&emsp;栈是一种先进后出的数据结构（First In Last Out）。栈按存储结构分类分为链式栈和顺序栈。那么栈的链式存储如何实现呢？以下是一些实现思路，完整代码请用<a href="https://github.com/keviness/Algorithms/blob/master/Algorithms_Java/DataStruct/Stack/stackLink.java" target="_blank" rel="noopener">随意门~</a></p><a id="more"></a><h3 id="一，实现代码"><a href="#一，实现代码" class="headerlink" title="一，实现代码"></a>一，实现代码</h3><h4 id="（一）数据形式"><a href="#（一）数据形式" class="headerlink" title="（一）数据形式"></a>（一）数据形式</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> data;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">public</span> Node next;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(String name, <span class="keyword">int</span> data)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.data = data;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"name:"</span>+<span class="keyword">this</span>.name+<span class="string">" data:"</span>+<span class="keyword">this</span>.data;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="（二）初始化"><a href="#（二）初始化" class="headerlink" title="（二）初始化"></a>（二）初始化</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">int</span> length;</span><br><span class="line"><span class="keyword">public</span> Node top;</span><br><span class="line"><span class="keyword">public</span> Node bottom;</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Stack</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.top = <span class="keyword">new</span> Node(<span class="keyword">null</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">this</span>.bottom = top;</span><br><span class="line">    <span class="keyword">this</span>.length = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="（三）检测为空"><a href="#（三）检测为空" class="headerlink" title="（三）检测为空"></a>（三）检测为空</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.top==<span class="keyword">this</span>.bottom? <span class="keyword">true</span>:<span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="（四）压栈操作"><a href="#（四）压栈操作" class="headerlink" title="（四）压栈操作"></a>（四）压栈操作</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(Node target)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        target.next = <span class="keyword">this</span>.top;</span><br><span class="line">        <span class="keyword">this</span>.top = target;</span><br><span class="line">        <span class="keyword">this</span>.length++;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="（五）出栈操作"><a href="#（五）出栈操作" class="headerlink" title="（五）出栈操作"></a>（五）出栈操作</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Node <span class="title">pop</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Node temp = <span class="keyword">this</span>.top;</span><br><span class="line">        <span class="keyword">this</span>.top = temp.next;</span><br><span class="line">        <span class="keyword">this</span>.length--;</span><br><span class="line">        <span class="keyword">return</span> temp;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="（七）遍历操作"><a href="#（七）遍历操作" class="headerlink" title="（七）遍历操作"></a>（七）遍历操作</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.isEmpty())</span><br><span class="line">        &#123;</span><br><span class="line">            System.out.println(<span class="string">"The stack is empty!"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Node temp = <span class="keyword">this</span>.top;</span><br><span class="line">        <span class="keyword">while</span> (temp != bottom)</span><br><span class="line">        &#123;</span><br><span class="line">            System.out.println(temp);</span><br><span class="line">            temp = temp.next;</span><br><span class="line">        &#125; </span><br><span class="line">        System.out.println(<span class="string">"The stack deep:"</span>+<span class="keyword">this</span>.length);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;&amp;emsp;栈是一种先进后出的数据结构（First In Last Out）。栈按存储结构分类分为链式栈和顺序栈。那么栈的链式存储如何实现呢？以下是一些实现思路，完整代码请用&lt;a href=&quot;https://github.com/keviness/Algorithms/blob/master/Algorithms_Java/DataStruct/Stack/stackLink.java&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;随意门~&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Algorithms" scheme="https://keviness.github.io/tags/Algorithms/"/>
    
      <category term="Java" scheme="https://keviness.github.io/tags/Java/"/>
    
      <category term="Stack Link" scheme="https://keviness.github.io/tags/Stack-Link/"/>
    
  </entry>
  
  <entry>
    <title>栈的顺序存储实现（Java实现）</title>
    <link href="https://keviness.github.io/post/2b04c71a.html"/>
    <id>https://keviness.github.io/post/2b04c71a.html</id>
    <published>2020-12-16T16:00:00.000Z</published>
    <updated>2020-12-16T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>&emsp;前面已经利用Java进行了栈的链式存储实现，接下来是它的顺序存储实现，以下是一些实现思路，完整代码请用<a href="https://github.com/keviness/Algorithms/blob/master/Algorithms_Java/DataStruct/Stack/stackLink.java" target="_blank" rel="noopener">神奇的随意门~</a></p><a id="more"></a><h3 id="一，实现代码"><a href="#一，实现代码" class="headerlink" title="一，实现代码"></a>一，实现代码</h3><h4 id="（一）数据形式"><a href="#（一）数据形式" class="headerlink" title="（一）数据形式"></a>（一）数据形式</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> data;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(String name, <span class="keyword">int</span> data)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"name:"</span>+<span class="keyword">this</span>.name+<span class="string">" data:"</span>+<span class="keyword">this</span>.data;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="（二）初始化"><a href="#（二）初始化" class="headerlink" title="（二）初始化"></a>（二）初始化</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Node[] stack;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span> top;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span> length;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Stack</span><span class="params">(<span class="keyword">int</span> length)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    stack = <span class="keyword">new</span> Node[length];</span><br><span class="line">    <span class="keyword">this</span>.top = -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">this</span>.length = length;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="（三）检测为空或为满"><a href="#（三）检测为空或为满" class="headerlink" title="（三）检测为空或为满"></a>（三）检测为空或为满</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.top == -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isFull</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.top == <span class="keyword">this</span>.length;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="（四）压栈操作"><a href="#（四）压栈操作" class="headerlink" title="（四）压栈操作"></a>（四）压栈操作</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(Node target)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.isFull())</span><br><span class="line">        &#123;</span><br><span class="line">            System.out.println(<span class="string">"The stack is full!"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.top++;</span><br><span class="line">        stack[<span class="keyword">this</span>.top] = target;</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">"The push into the stack successfully!"</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="（五）出栈操作"><a href="#（五）出栈操作" class="headerlink" title="（五）出栈操作"></a>（五）出栈操作</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Node <span class="title">pop</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.isEmpty())</span><br><span class="line">        &#123;</span><br><span class="line">            System.out.println(<span class="string">"The stack is empty!"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Node temp = stack[<span class="keyword">this</span>.top];</span><br><span class="line">        <span class="keyword">this</span>.top--;</span><br><span class="line">        System.out.println(<span class="string">"Pop successfully!"</span>);;</span><br><span class="line">        <span class="keyword">return</span> temp;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;&amp;emsp;前面已经利用Java进行了栈的链式存储实现，接下来是它的顺序存储实现，以下是一些实现思路，完整代码请用&lt;a href=&quot;https://github.com/keviness/Algorithms/blob/master/Algorithms_Java/DataStruct/Stack/stackLink.java&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;神奇的随意门~&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Algorithms" scheme="https://keviness.github.io/tags/Algorithms/"/>
    
      <category term="Java" scheme="https://keviness.github.io/tags/Java/"/>
    
      <category term="Stack Sequence" scheme="https://keviness.github.io/tags/Stack-Sequence/"/>
    
  </entry>
  
  <entry>
    <title>线性表：链表实现（链式存储实现）</title>
    <link href="https://keviness.github.io/post/53dd0bf9.html"/>
    <id>https://keviness.github.io/post/53dd0bf9.html</id>
    <published>2020-12-15T16:00:00.000Z</published>
    <updated>2020-12-15T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>&emsp;线性表是比较常见的数据结构，按存储方式分，有链表（链式存储）和数组（顺序存储）两种，那么Java如何实现链表呢？以下是一些个实现思路，完整代码请用<a href="https://github.com/keviness/Algorithms/blob/master/Algorithms_Java/DataStruct/SingleLinkList/SingleLink.java" target="_blank" rel="noopener">传送门~</a></p><a id="more"></a><h3 id="一，实现代码"><a href="#一，实现代码" class="headerlink" title="一，实现代码"></a>一，实现代码</h3><h4 id="（一）数据形式"><a href="#（一）数据形式" class="headerlink" title="（一）数据形式"></a>（一）数据形式</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> data;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">public</span> Node next;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(String name, <span class="keyword">int</span> data)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.data = data;</span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"name:"</span>+<span class="keyword">this</span>.name+<span class="string">" "</span>+<span class="string">"data:"</span>+<span class="keyword">this</span>.data;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="（二）初始化"><a href="#（二）初始化" class="headerlink" title="（二）初始化"></a>（二）初始化</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">int</span> length;</span><br><span class="line">    <span class="keyword">private</span> Node head;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Link</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.length = <span class="number">0</span>;</span><br><span class="line">        head = <span class="keyword">new</span> Node(<span class="string">""</span>, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="（三）检测为空或已满"><a href="#（三）检测为空或已满" class="headerlink" title="（三）检测为空或已满"></a>（三）检测为空或已满</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> head.next == <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="（四）追加操作"><a href="#（四）追加操作" class="headerlink" title="（四）追加操作"></a>（四）追加操作</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">append</span><span class="params">(Node target)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Node temp = head;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (temp.next != <span class="keyword">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            temp = temp.next;</span><br><span class="line">        &#125;</span><br><span class="line">        temp.next = target;</span><br><span class="line">        <span class="keyword">this</span>.length++;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"Append successfully"</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="（五）插入操作"><a href="#（五）插入操作" class="headerlink" title="（五）插入操作"></a>（五）插入操作</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">insert</span><span class="params">(Node target, <span class="keyword">int</span> pos)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (pos&lt;<span class="number">1</span> || pos&gt;length)</span><br><span class="line">        &#123;</span><br><span class="line">            System.out.println(<span class="string">"The pos is error!"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Node temp = head;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (i&lt;pos-<span class="number">1</span> &amp;&amp; temp.next!= <span class="keyword">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            temp = temp.next;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (i&gt;pos-<span class="number">1</span> &amp;&amp; temp.next==<span class="keyword">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            System.out.println(<span class="string">"The pos is wrong!"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        target.next = temp.next;</span><br><span class="line">        temp.next = target;</span><br><span class="line">        <span class="keyword">this</span>.length++;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"Insert successfully!"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="（六）删除元素"><a href="#（六）删除元素" class="headerlink" title="（六）删除元素"></a>（六）删除元素</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(Node target)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty())</span><br><span class="line">        &#123;</span><br><span class="line">            System.out.<span class="built_in">println</span>(<span class="string">"The link is empty!"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Node temp = head;</span><br><span class="line">        <span class="keyword">while</span> (temp.next != target)</span><br><span class="line">        &#123;</span><br><span class="line">            temp = temp.next;</span><br><span class="line">        &#125;</span><br><span class="line">        temp.next = target.next;</span><br><span class="line">        <span class="keyword">this</span>.length--;</span><br><span class="line"></span><br><span class="line">        System.out.<span class="built_in">println</span>(<span class="string">"Delete successfully!"</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;&amp;emsp;线性表是比较常见的数据结构，按存储方式分，有链表（链式存储）和数组（顺序存储）两种，那么Java如何实现链表呢？以下是一些个实现思路，完整代码请用&lt;a href=&quot;https://github.com/keviness/Algorithms/blob/master/Algorithms_Java/DataStruct/SingleLinkList/SingleLink.java&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;传送门~&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Algorithms" scheme="https://keviness.github.io/tags/Algorithms/"/>
    
      <category term="Sequence" scheme="https://keviness.github.io/tags/Sequence/"/>
    
      <category term="Java" scheme="https://keviness.github.io/tags/Java/"/>
    
      <category term="Link List" scheme="https://keviness.github.io/tags/Link-List/"/>
    
  </entry>
  
  <entry>
    <title>数组：顺序存储实现（Java实现）</title>
    <link href="https://keviness.github.io/post/a85270f4.html"/>
    <id>https://keviness.github.io/post/a85270f4.html</id>
    <published>2020-12-02T16:00:00.000Z</published>
    <updated>2020-12-02T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>&emsp;日月如梭，不知不觉已经到了2020年的最后一个月。2020年真心是一个魔幻的年份，世界发生了很多不可预料的事情，总结起来就是一句话：今年光见证历史了:)<br>&emsp;接触Java已经大半年时间了，前面用C实现过一些基本的算法，现在拿Java进行实现，顺便对常用算法知识进行复习巩固，本博客作为笔记。具体实现请用<a href="https://github.com/keviness/Algorithms/blob/master/Algorithms_Java/DataStruct/Array/Array.java" target="_blank" rel="noopener">随意门~</a></p><a id="more"></a><h2 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h2><h4 id="（一）结点形式"><a href="#（一）结点形式" class="headerlink" title="（一）结点形式"></a>（一）结点形式</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> data;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(<span class="keyword">int</span> data)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"The data:"</span>+<span class="keyword">this</span>.data;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="（二）初始化"><a href="#（二）初始化" class="headerlink" title="（二）初始化"></a>（二）初始化</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">int</span> length;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span> count;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ArrayList</span><span class="params">(<span class="keyword">int</span> length)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.length = length;</span><br><span class="line">    <span class="keyword">public</span> Node[] array = <span class="keyword">new</span> Node[<span class="keyword">this</span>.length];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="（三）检测为空-满"><a href="#（三）检测为空-满" class="headerlink" title="（三）检测为空/满"></a>（三）检测为空/满</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.count == <span class="number">0</span>? <span class="keyword">true</span>:<span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isFull</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.count == <span class="keyword">this</span>.length? <span class="keyword">true</span>:<span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="（四）获取元素"><a href="#（四）获取元素" class="headerlink" title="（四）获取元素"></a>（四）获取元素</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.isEmpty())</span><br><span class="line">        &#123;</span><br><span class="line">            System.out.println(<span class="string">"The array is empty!"</span>);</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.array[index-<span class="number">1</span>].data;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="（五）修改元素"><a href="#（五）修改元素" class="headerlink" title="（五）修改元素"></a>（五）修改元素</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> index, <span class="keyword">int</span> value)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.isEmpty())</span><br><span class="line">        &#123;</span><br><span class="line">            System.out.println(<span class="string">"The array is empty!"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.array[index].data = value;</span><br><span class="line">        System.out.printf(<span class="string">"%d modified successfully! \n"</span>, index);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="（六）末尾追加元素"><a href="#（六）末尾追加元素" class="headerlink" title="（六）末尾追加元素"></a>（六）末尾追加元素</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">append</span><span class="params">(Node element)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.isFull())</span><br><span class="line">        &#123;</span><br><span class="line">            System.out.println(<span class="string">"The array is full!"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.array[<span class="keyword">this</span>.count] = element;</span><br><span class="line">        <span class="keyword">this</span>.count++;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="（七）插入元素"><a href="#（七）插入元素" class="headerlink" title="（七）插入元素"></a>（七）插入元素</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> index, Node value)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.isEmpty() || index==<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">this</span>.array[<span class="number">0</span>] = value;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.isFull())</span><br><span class="line">        &#123;</span><br><span class="line">            System.out.println(<span class="string">"The array is full!"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(index&lt;<span class="number">1</span> &amp;&amp; index&gt;count+<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            System.out.println(<span class="string">"The error index!"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="keyword">this</span>.count-<span class="number">1</span>; i&gt;=index-<span class="number">1</span>; i--)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">this</span>.array[i+<span class="number">1</span>] = <span class="keyword">this</span>.array[i];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">this</span>.array[index-<span class="number">1</span>] = value;</span><br><span class="line">            <span class="keyword">this</span>.count++;</span><br><span class="line">            System.out.printf(<span class="string">"%d inserted successfully! \n"</span>, index);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="（八）删除元素"><a href="#（八）删除元素" class="headerlink" title="（八）删除元素"></a>（八）删除元素</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(<span class="keyword">int</span> index)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.isEmpty())</span><br><span class="line">        &#123;</span><br><span class="line">            System.out.println(<span class="string">"The array is empty!"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (index&lt;<span class="number">1</span> || index&gt;<span class="keyword">this</span>.count)</span><br><span class="line">        &#123;</span><br><span class="line">            System.out.println(<span class="string">"The index is error!"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=index; i&lt;<span class="keyword">this</span>.count; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">this</span>.array[i-<span class="number">1</span>] = <span class="keyword">this</span>.array[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.array[<span class="keyword">this</span>.count-<span class="number">1</span>] = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">this</span>.count--;</span><br><span class="line">        System.out.printf(<span class="string">"%d deleted successfully! \n"</span>, index);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="（九）打印元素"><a href="#（九）打印元素" class="headerlink" title="（九）打印元素"></a>（九）打印元素</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"The array elements:"</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="keyword">this</span>.count; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            System.out.println(i+<span class="number">1</span> + <span class="string">": "</span>+ array[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">=======</span><br><span class="line">---</span><br><span class="line">title: 数组：顺序存储实现（Java实现）</span><br><span class="line">date: <span class="number">2020.12</span><span class="number">.3</span></span><br><span class="line">tags:</span><br><span class="line">  - Java</span><br><span class="line">  - Algorithms</span><br><span class="line">  - Array</span><br><span class="line">abbrlink: a85270f4</span><br><span class="line">---</span><br><span class="line"># 背景</span><br><span class="line">&amp;emsp;日月如梭，不知不觉已经到了<span class="number">2020</span>年的最后一个月。<span class="number">2020</span>年真心是一个魔幻的一年，世界发生了很多不可预料的事情，总结起来就是一句话：今年光见证历史了:)</span><br><span class="line">&amp;emsp;接触Java已经大半年时间了，前面用C实现过一些基本的算法，现在拿Java进行实现，顺便对常用算法知识进行复习巩固，本博客作为笔记。具体实现请用[随意门~](https:<span class="comment">//github.com/keviness/Algorithms/blob/master/Algorithms_Java/DataStruct/Array/Array.java)</span></span><br><span class="line">&lt;!--more--&gt;</span><br><span class="line">## 实现代码</span><br><span class="line"></span><br><span class="line">#### （一）结点形式</span><br><span class="line">~~~java</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> data;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(<span class="keyword">int</span> data)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"The data:"</span>+<span class="keyword">this</span>.data;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="（二）初始化-1"><a href="#（二）初始化-1" class="headerlink" title="（二）初始化"></a>（二）初始化</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">int</span> length;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span> count;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ArrayList</span><span class="params">(<span class="keyword">int</span> length)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.length = length;</span><br><span class="line">    <span class="keyword">public</span> Node[] array = <span class="keyword">new</span> Node[<span class="keyword">this</span>.length];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="（三）检测为空-满-1"><a href="#（三）检测为空-满-1" class="headerlink" title="（三）检测为空/满"></a>（三）检测为空/满</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.count == <span class="number">0</span>? <span class="keyword">true</span>:<span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isFull</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.count == <span class="keyword">this</span>.length? <span class="keyword">true</span>:<span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="（四）获取元素-1"><a href="#（四）获取元素-1" class="headerlink" title="（四）获取元素"></a>（四）获取元素</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.isEmpty())</span><br><span class="line">        &#123;</span><br><span class="line">            System.out.println(<span class="string">"The array is empty!"</span>);</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.array[index-<span class="number">1</span>].data;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="（五）修改元素-1"><a href="#（五）修改元素-1" class="headerlink" title="（五）修改元素"></a>（五）修改元素</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> index, <span class="keyword">int</span> value)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.isEmpty())</span><br><span class="line">        &#123;</span><br><span class="line">            System.out.println(<span class="string">"The array is empty!"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.array[index].data = value;</span><br><span class="line">        System.out.printf(<span class="string">"%d modified successfully! \n"</span>, index);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="（六）末尾追加元素-1"><a href="#（六）末尾追加元素-1" class="headerlink" title="（六）末尾追加元素"></a>（六）末尾追加元素</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">append</span><span class="params">(Node element)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.isFull())</span><br><span class="line">        &#123;</span><br><span class="line">            System.out.println(<span class="string">"The array is full!"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.array[<span class="keyword">this</span>.count] = element;</span><br><span class="line">        <span class="keyword">this</span>.count++;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="（七）插入元素-1"><a href="#（七）插入元素-1" class="headerlink" title="（七）插入元素"></a>（七）插入元素</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> index, Node value)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.isEmpty() || index==<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">this</span>.array[<span class="number">0</span>] = value;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.isFull())</span><br><span class="line">        &#123;</span><br><span class="line">            System.out.println(<span class="string">"The array is full!"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(index&lt;<span class="number">1</span> &amp;&amp; index&gt;count+<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            System.out.println(<span class="string">"The error index!"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="keyword">this</span>.count-<span class="number">1</span>; i&gt;=index-<span class="number">1</span>; i--)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">this</span>.array[i+<span class="number">1</span>] = <span class="keyword">this</span>.array[i];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">this</span>.array[index-<span class="number">1</span>] = value;</span><br><span class="line">            <span class="keyword">this</span>.count++;</span><br><span class="line">            System.out.printf(<span class="string">"%d inserted successfully! \n"</span>, index);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="（八）删除元素-1"><a href="#（八）删除元素-1" class="headerlink" title="（八）删除元素"></a>（八）删除元素</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(<span class="keyword">int</span> index)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.isEmpty())</span><br><span class="line">        &#123;</span><br><span class="line">            System.out.println(<span class="string">"The array is empty!"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (index&lt;<span class="number">1</span> || index&gt;<span class="keyword">this</span>.count)</span><br><span class="line">        &#123;</span><br><span class="line">            System.out.println(<span class="string">"The index is error!"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=index; i&lt;<span class="keyword">this</span>.count; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">this</span>.array[i-<span class="number">1</span>] = <span class="keyword">this</span>.array[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.array[<span class="keyword">this</span>.count-<span class="number">1</span>] = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">this</span>.count--;</span><br><span class="line">        System.out.printf(<span class="string">"%d deleted successfully! \n"</span>, index);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="（九）打印元素-1"><a href="#（九）打印元素-1" class="headerlink" title="（九）打印元素"></a>（九）打印元素</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"The array elements:"</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="keyword">this</span>.count; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            System.out.println(i+<span class="number">1</span> + <span class="string">": "</span>+ array[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;&gt; a7c4693 (Update: blog)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;&amp;emsp;日月如梭，不知不觉已经到了2020年的最后一个月。2020年真心是一个魔幻的年份，世界发生了很多不可预料的事情，总结起来就是一句话：今年光见证历史了:)&lt;br&gt;&amp;emsp;接触Java已经大半年时间了，前面用C实现过一些基本的算法，现在拿Java进行实现，顺便对常用算法知识进行复习巩固，本博客作为笔记。具体实现请用&lt;a href=&quot;https://github.com/keviness/Algorithms/blob/master/Algorithms_Java/DataStruct/Array/Array.java&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;随意门~&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Algorithms" scheme="https://keviness.github.io/tags/Algorithms/"/>
    
      <category term="Array" scheme="https://keviness.github.io/tags/Array/"/>
    
      <category term="Java" scheme="https://keviness.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java访问修饰符</title>
    <link href="https://keviness.github.io/post/98b7ffbf.html"/>
    <id>https://keviness.github.io/post/98b7ffbf.html</id>
    <published>2020-10-23T16:00:00.000Z</published>
    <updated>2020-10-23T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>&emsp;Java是面向对象的编程语言，Java的世界里一切皆为对象。Java将面向对象的思想发挥到了极致，它将数据和函数有机结合在了一起，使真实世界里面的关系能用更好的逻辑关系在程序中进行体现。以下是它的访问修饰符概述。</p><a id="more"></a><h2 id="java访问修饰符"><a href="#java访问修饰符" class="headerlink" title="java访问修饰符"></a>java访问修饰符</h2><h3 id="一，java访问修饰符"><a href="#一，java访问修饰符" class="headerlink" title="一，java访问修饰符"></a>一，java访问修饰符</h3><img src="/post/98b7ffbf/javaVistedPromise.png" class title="javaVistedPromise"><h4 id="一-public"><a href="#一-public" class="headerlink" title="(一)public"></a>(一)public</h4><blockquote><ul><li>定义为public的class、interface可以被其他任何类访问：</li><li>定义为public的field、method可以被其他类访问，前提是首先有访问class的权限。</li></ul></blockquote><h5 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//in package abc</span></span><br><span class="line"><span class="keyword">package</span> abc;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hello</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hi</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//in package xyz</span></span><br><span class="line"><span class="keyword">package</span> xyz;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">foo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Main可以访问Hello</span></span><br><span class="line">        Hello h = <span class="keyword">new</span> Hello();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="（二）protected"><a href="#（二）protected" class="headerlink" title="（二）protected"></a>（二）protected</h4><blockquote><ul><li>protected作用于继承关系。定义为protected的字段和方法可以被子类访问，以及子类的子类访问。</li><li>子类可访问不同包之间有继承关系的父类中有protected修饰的field和method。</li></ul></blockquote><h5 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> abc;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hello</span> </span>&#123;</span><br><span class="line">    <span class="comment">// protected方法:</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">hi</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> xyz;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Main</span> <span class="keyword">extends</span> <span class="title">Hello</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">foo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 可以访问protected方法:</span></span><br><span class="line">        hi();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="（三）private"><a href="#（三）private" class="headerlink" title="（三）private"></a>（三）private</h4><blockquote><ul><li>private修饰的field和method不允许被其他类访问。</li></ul></blockquote><h5 id="示例-2"><a href="#示例-2" class="headerlink" title="示例"></a>示例</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Person ming = <span class="keyword">new</span> Person();</span><br><span class="line">        ming.setBirth(<span class="number">2008</span>);</span><br><span class="line">        System.out.println(ming.getAge());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> birth;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBirth</span><span class="params">(<span class="keyword">int</span> birth)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.birth = birth;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> calcAge(<span class="number">2019</span>); <span class="comment">// 调用private方法</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// private方法:</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">calcAge</span><span class="params">(<span class="keyword">int</span> currentYear)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> currentYear - <span class="keyword">this</span>.birth;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="（四）package"><a href="#（四）package" class="headerlink" title="（四）package"></a>（四）package</h4><blockquote><ul><li>包作用域是指一个类允许访问同一个package的没有public、private修饰的class，以及没有public、protected、private修饰的字段和方法。</li><li>只要在同一个包，就可以访问package权限的class、field和method。</li></ul></blockquote><h5 id="示例-3"><a href="#示例-3" class="headerlink" title="示例"></a>示例</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> abc;</span><br><span class="line"><span class="comment">// package权限的类:</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hello</span> </span>&#123;</span><br><span class="line">    <span class="comment">// package权限的方法:</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">hi</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> abc;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">foo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 可以访问package权限的类:</span></span><br><span class="line">        Hello h = <span class="keyword">new</span> Hello();</span><br><span class="line">        <span class="comment">// 可以调用package权限的方法:</span></span><br><span class="line">        h.hi();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="（五）局部变量"><a href="#（五）局部变量" class="headerlink" title="（五）局部变量"></a>（五）局部变量</h4><blockquote><ul><li>在方法内部定义的变量称为局部变量，局部变量作用域从变量声明处开始到对应的块结束。方法参数也是局部变量。</li></ul></blockquote><h5 id="示例-4"><a href="#示例-4" class="headerlink" title="示例"></a>示例</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> abc;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hello</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">hi</span><span class="params">(String name)</span> </span>&#123; <span class="comment">// ①</span></span><br><span class="line">        String s = name.toLowerCase(); <span class="comment">// ②</span></span><br><span class="line">        <span class="keyword">int</span> len = s.length(); <span class="comment">// ③</span></span><br><span class="line">        <span class="keyword">if</span> (len &lt; <span class="number">10</span>) &#123; <span class="comment">// ④</span></span><br><span class="line">            <span class="keyword">int</span> p = <span class="number">10</span> - len; <span class="comment">// ⑤</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">10</span>; i++) &#123; <span class="comment">// ⑥</span></span><br><span class="line">                System.out.println(); <span class="comment">// ⑦</span></span><br><span class="line">            &#125; <span class="comment">// ⑧</span></span><br><span class="line">        &#125; <span class="comment">// ⑨</span></span><br><span class="line">    &#125; <span class="comment">// ⑩</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="（六）final"><a href="#（六）final" class="headerlink" title="（六）final"></a>（六）final</h4><blockquote><ul><li>用final修饰class可以阻止被继承。</li><li>用final修饰method可以阻止被子类覆写。</li><li>用final修饰field可以阻止被重新赋值。</li><li>用final修饰局部变量可以阻止被重新赋值。</li></ul></blockquote><h5 id="示例-5"><a href="#示例-5" class="headerlink" title="示例"></a>示例</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> abc;</span><br><span class="line"></span><br><span class="line"><span class="comment">// final修饰class可以阻止被继承。</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Hello</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> n = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">hi</span><span class="params">(<span class="keyword">int</span> t)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> i = t;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//用final修饰method可以阻止被子类覆写。</span></span><br><span class="line"><span class="keyword">package</span> abc;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hello</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">hi</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//用final修饰field可以阻止被重新赋值。</span></span><br><span class="line"><span class="keyword">package</span> abc;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hello</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> n = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">hi</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.n = <span class="number">1</span>; <span class="comment">// error!</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//final修饰局部变量可以阻止被重新赋值。</span></span><br><span class="line"><span class="keyword">package</span> abc;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hello</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">hi</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span> t)</span> </span>&#123;</span><br><span class="line">        t = <span class="number">1</span>; <span class="comment">// error!</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="（七）总结"><a href="#（七）总结" class="headerlink" title="（七）总结"></a>（七）总结</h4><ul><li>protected修饰符所修饰的类（这句话中指父类）属成员变量和方法，只可以被子类访问，而不管子类是不是和父类位于同一个包中。protected属于子类限制修饰符。</li><li>default修饰符所修饰的类属成员变量和方法，只可被同一个包中的其他类访问，而不管其他类是不是该类的子类。default属于包限制修饰符。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;&amp;emsp;Java是面向对象的编程语言，Java的世界里一切皆为对象。Java将面向对象的思想发挥到了极致，它将数据和函数有机结合在了一起，使真实世界里面的关系能用更好的逻辑关系在程序中进行体现。以下是它的访问修饰符概述。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Java" scheme="https://keviness.github.io/tags/Java/"/>
    
      <category term="visted" scheme="https://keviness.github.io/tags/visted/"/>
    
  </entry>
  
  <entry>
    <title>队列：链式存储实现</title>
    <link href="https://keviness.github.io/post/91f8721d.html"/>
    <id>https://keviness.github.io/post/91f8721d.html</id>
    <published>2020-09-12T16:00:00.000Z</published>
    <updated>2020-09-12T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>&emsp;暑假快要结束了，研究生生涯就要拉开序幕了。数据结构的工作可以告一段落了，这个暑假过得还是很充实的，接下来的Java工作也要加油~<br>&emsp;队列这个数据结构和我们生活的一些排队场景十分相似（FIFO），前面已经简单论述过它的顺序存储实现，接下来是它的链式存储实现，以下是一些实现思路，完整代码请用<a href="https://github.com/keviness/Algorithms/blob/master/Algorithms_C/DataStruct/queue_link.c" target="_blank" rel="noopener">随意门~</a></p><a id="more"></a><h2 id="队列的链式存储实现"><a href="#队列的链式存储实现" class="headerlink" title="队列的链式存储实现"></a>队列的链式存储实现</h2><h3 id="一，概念及示意图"><a href="#一，概念及示意图" class="headerlink" title="一，概念及示意图"></a>一，概念及示意图</h3><h4 id="队列示意图"><a href="#队列示意图" class="headerlink" title="队列示意图"></a>队列示意图</h4><img src="/post/91f8721d/queue_link.png" class title="queueLink"><h3 id="二，实现代码"><a href="#二，实现代码" class="headerlink" title="二，实现代码"></a>二，实现代码</h3><h4 id="（一）队列数据形式"><a href="#（一）队列数据形式" class="headerlink" title="（一）队列数据形式"></a>（一）队列数据形式</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">pnext</span>;</span></span><br><span class="line">&#125;Node, * Pnode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">queue</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    Pnode front;</span><br><span class="line">    Pnode rear;</span><br><span class="line">&#125;Queue, * Pqueue;</span><br></pre></td></tr></table></figure><h4 id="（二）初始化队列"><a href="#（二）初始化队列" class="headerlink" title="（二）初始化队列"></a>（二）初始化队列</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InitQueue</span><span class="params">(Pqueue <span class="built_in">queue</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">queue</span>-&gt;front = (Pnode)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">queue</span>-&gt;front == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"Can\'t locate the memory!"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">queue</span>-&gt;rear = <span class="built_in">queue</span>-&gt;front;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="（三）检测队列为空"><a href="#（三）检测队列为空" class="headerlink" title="（三）检测队列为空"></a>（三）检测队列为空</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">QueueIsEmpty</span><span class="params">(Pqueue <span class="built_in">queue</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="built_in">queue</span>-&gt;front == <span class="built_in">queue</span>-&gt;rear)? <span class="literal">true</span>:<span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="（四）入队操作"><a href="#（四）入队操作" class="headerlink" title="（四）入队操作"></a>（四）入队操作</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">EnQueue</span><span class="params">(Pqueue <span class="built_in">queue</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> data, ch;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Enter the data you want to enqueue:"</span>);</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;data) != <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span> ((ch = getchar()) != <span class="string">'\n'</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">putchar</span>(ch);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">" is not a number! try again:"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    EATLINE;</span><br><span class="line">    Pnode newNode = (Pnode)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">    newNode-&gt;data = data;</span><br><span class="line">    newNode-&gt;pnext = <span class="literal">NULL</span>; </span><br><span class="line">    <span class="built_in">queue</span>-&gt;rear-&gt;pnext = newNode;</span><br><span class="line">    <span class="built_in">queue</span>-&gt;rear = newNode;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Enter the %d successfully! \n"</span>, data);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">#### （五）出队操作</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">DeQueue</span><span class="params">(Pqueue <span class="built_in">queue</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (QueueIsEmpty(<span class="built_in">queue</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"The queue is empty!"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> data;</span><br><span class="line">    Pnode temp = <span class="built_in">queue</span>-&gt;front-&gt;pnext;</span><br><span class="line">    data = temp-&gt;data;</span><br><span class="line">    <span class="built_in">queue</span>-&gt;front-&gt;pnext = temp-&gt;pnext;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (temp == <span class="built_in">queue</span>-&gt;rear)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">queue</span>-&gt;rear = <span class="built_in">queue</span>-&gt;front;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">free</span>(temp);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Delete %d from the queue successfully!\n"</span>, data);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="（六）队列长度"><a href="#（六）队列长度" class="headerlink" title="（六）队列长度"></a>（六）队列长度</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">QueueLength</span><span class="params">(Pqueue <span class="built_in">queue</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (QueueIsEmpty(<span class="built_in">queue</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"The queue is empty!"</span>);</span><br><span class="line">        count = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Pnode start = <span class="built_in">queue</span>-&gt;front-&gt;pnext;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (start != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        count++;</span><br><span class="line">        start = start-&gt;pnext;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"The queue length:%d \n"</span>, count);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="（七）打印队列"><a href="#（七）打印队列" class="headerlink" title="（七）打印队列"></a>（七）打印队列</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ShowQueue</span><span class="params">(Pqueue <span class="built_in">queue</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (QueueIsEmpty(<span class="built_in">queue</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"The queue is empty!"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Pnode start = <span class="built_in">queue</span>-&gt;front-&gt;pnext;</span><br><span class="line">    <span class="keyword">while</span> (start != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>, start-&gt;data);</span><br><span class="line">        start = start-&gt;pnext;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">'\n'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="（八）清空队列"><a href="#（八）清空队列" class="headerlink" title="（八）清空队列"></a>（八）清空队列</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ClearQueue</span><span class="params">(Pqueue <span class="built_in">queue</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (QueueIsEmpty(<span class="built_in">queue</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"The queue is empty!"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Pnode temp = <span class="built_in">queue</span>-&gt;front;</span><br><span class="line">    <span class="keyword">while</span> (temp != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">queue</span>-&gt;front = <span class="built_in">queue</span>-&gt;front-&gt;pnext;</span><br><span class="line">        <span class="built_in">free</span>(temp);</span><br><span class="line">        temp = <span class="built_in">queue</span>-&gt;front;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"clear the queue successfully!"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;&amp;emsp;暑假快要结束了，研究生生涯就要拉开序幕了。数据结构的工作可以告一段落了，这个暑假过得还是很充实的，接下来的Java工作也要加油~&lt;br&gt;&amp;emsp;队列这个数据结构和我们生活的一些排队场景十分相似（FIFO），前面已经简单论述过它的顺序存储实现，接下来是它的链式存储实现，以下是一些实现思路，完整代码请用&lt;a href=&quot;https://github.com/keviness/Algorithms/blob/master/Algorithms_C/DataStruct/queue_link.c&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;随意门~&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Algorithms" scheme="https://keviness.github.io/tags/Algorithms/"/>
    
      <category term="C" scheme="https://keviness.github.io/tags/C/"/>
    
      <category term="Queue" scheme="https://keviness.github.io/tags/Queue/"/>
    
      <category term="Link" scheme="https://keviness.github.io/tags/Link/"/>
    
  </entry>
  
  <entry>
    <title>栈：顺序存储实现</title>
    <link href="https://keviness.github.io/post/50fbc576.html"/>
    <id>https://keviness.github.io/post/50fbc576.html</id>
    <published>2020-09-09T16:00:00.000Z</published>
    <updated>2020-09-09T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>&emsp;栈是一种应用十分广泛的数据结构，前面我们已经展示了栈的链式存储实现，接下来是它的顺序存储实现，以下是一些实现思路，完整代码请用<a href="https://github.com/keviness/Algorithms/blob/master/Algorithms_C/DataStruct/stack_sequence.c" target="_blank" rel="noopener">神奇的随意门~</a></p><a id="more"></a><h2 id="栈的顺序存储实现"><a href="#栈的顺序存储实现" class="headerlink" title="栈的顺序存储实现"></a>栈的顺序存储实现</h2><h3 id="一，概念及示意图"><a href="#一，概念及示意图" class="headerlink" title="一，概念及示意图"></a>一，概念及示意图</h3><h4 id="栈的顺序存储示意图"><a href="#栈的顺序存储示意图" class="headerlink" title="栈的顺序存储示意图"></a>栈的顺序存储示意图</h4><img src="/post/50fbc576/stack_sequence.png" class title="stackSequence"><h3 id="二，实现代码"><a href="#二，实现代码" class="headerlink" title="二，实现代码"></a>二，实现代码</h3><h4 id="（一）数据形式"><a href="#（一）数据形式" class="headerlink" title="（一）数据形式"></a>（一）数据形式</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">stack</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> *pint;</span><br><span class="line">    <span class="keyword">int</span> top;</span><br><span class="line">&#125;STACK;</span><br></pre></td></tr></table></figure><h4 id="（二）初始化"><a href="#（二）初始化" class="headerlink" title="（二）初始化"></a>（二）初始化</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">InitializeStack</span><span class="params">(STACK *pstack)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    pstack-&gt;pint = (<span class="keyword">int</span> *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span>) * SIZE);</span><br><span class="line">    <span class="keyword">if</span> (pstack-&gt;pint == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"Can\'t locate memory!"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    pstack-&gt;top = <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="（三）检测为空或为满"><a href="#（三）检测为空或为满" class="headerlink" title="（三）检测为空或为满"></a>（三）检测为空或为满</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">StackIsEmpty</span><span class="params">(STACK *pstack)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (pstack-&gt;top == <span class="number">-1</span>)? <span class="literal">true</span>:<span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">StackIsFull</span><span class="params">(STACK *pstack)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (pstack-&gt;top == SIZE)? <span class="literal">true</span>:<span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="（四）压栈操作"><a href="#（四）压栈操作" class="headerlink" title="（四）压栈操作"></a>（四）压栈操作</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">PushStack</span><span class="params">(STACK *pstack)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (StackIsFull(pstack))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"The stack is full!"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> data, ch;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Enter the data you want to push:"</span>);</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;data) != <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span> ((ch = getchar()) != <span class="string">'\n'</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">putchar</span>(ch);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">" is not a number! try again:"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    EATLINE;</span><br><span class="line"></span><br><span class="line">    (pstack-&gt;top)++;</span><br><span class="line">    (pstack-&gt;pint)[pstack-&gt;top] = data;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="（五）出栈操作"><a href="#（五）出栈操作" class="headerlink" title="（五）出栈操作"></a>（五）出栈操作</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">PopStack</span><span class="params">(STACK *pstack)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (StackIsEmpty(pstack))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"The stack is empty!"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> data;</span><br><span class="line">    data = (pstack-&gt;pint)[pstack-&gt;top];</span><br><span class="line">    (pstack-&gt;top)--;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"The poped data is:%d \n"</span>, data);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;&amp;emsp;栈是一种应用十分广泛的数据结构，前面我们已经展示了栈的链式存储实现，接下来是它的顺序存储实现，以下是一些实现思路，完整代码请用&lt;a href=&quot;https://github.com/keviness/Algorithms/blob/master/Algorithms_C/DataStruct/stack_sequence.c&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;神奇的随意门~&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Algorithms" scheme="https://keviness.github.io/tags/Algorithms/"/>
    
      <category term="C" scheme="https://keviness.github.io/tags/C/"/>
    
      <category term="Stack" scheme="https://keviness.github.io/tags/Stack/"/>
    
      <category term="Sequence" scheme="https://keviness.github.io/tags/Sequence/"/>
    
  </entry>
  
  <entry>
    <title>栈：链式存储实现</title>
    <link href="https://keviness.github.io/post/add41033.html"/>
    <id>https://keviness.github.io/post/add41033.html</id>
    <published>2020-09-07T16:00:00.000Z</published>
    <updated>2020-09-07T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>&emsp;栈是一种先进后出的数据结构（First In Last Out）。它在实际编程中起到了非常重要的作用。比如，我们程序在运行中对函数的调用，就有着明显的压栈和出栈的操作，栈按存储结构分类分为链式栈和顺序栈。那么栈的链式存储如何实现呢？以下是一些实现思路，完整代码请用<a href="https://github.com/keviness/Algorithms/blob/master/Algorithms_C/DataStruct/stack_link.c" target="_blank" rel="noopener">随意门</a>~</p><a id="more"></a><h2 id="栈的链式存储实现"><a href="#栈的链式存储实现" class="headerlink" title="栈的链式存储实现"></a>栈的链式存储实现</h2><h3 id="一，概念及示意图"><a href="#一，概念及示意图" class="headerlink" title="一，概念及示意图"></a>一，概念及示意图</h3><h4 id="栈的链式存储示意图"><a href="#栈的链式存储示意图" class="headerlink" title="栈的链式存储示意图"></a>栈的链式存储示意图</h4><img src="/post/add41033/stackLink.png" class title="stackLink"><h3 id="二，实现代码"><a href="#二，实现代码" class="headerlink" title="二，实现代码"></a>二，实现代码</h3><h4 id="（一）数据形式"><a href="#（一）数据形式" class="headerlink" title="（一）数据形式"></a>（一）数据形式</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">pnext</span>;</span></span><br><span class="line">&#125;NODE, * Pnode;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">stack</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    Pnode top;</span><br><span class="line">    Pnode buttom;</span><br><span class="line">&#125;STACK, * Pstack;</span><br></pre></td></tr></table></figure><h4 id="（二）初始化"><a href="#（二）初始化" class="headerlink" title="（二）初始化"></a>（二）初始化</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InitStack</span><span class="params">(Pstack <span class="built_in">stack</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">stack</span>-&gt;top = (Pnode)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(NODE));</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">stack</span>-&gt;top == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"Error in locate the memory!"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">stack</span>-&gt;buttom = <span class="built_in">stack</span>-&gt;top;</span><br><span class="line">    <span class="built_in">stack</span>-&gt;top-&gt;pnext = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="（三）检测为空"><a href="#（三）检测为空" class="headerlink" title="（三）检测为空"></a>（三）检测为空</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">StackIsEmpty</span><span class="params">(Pstack <span class="built_in">stack</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">stack</span>-&gt;top == <span class="built_in">stack</span>-&gt;buttom)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//return (stack-&gt;top)==(stack-&gt;buttom) ? true:false;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="（四）压栈操作"><a href="#（四）压栈操作" class="headerlink" title="（四）压栈操作"></a>（四）压栈操作</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">PushStack</span><span class="params">(Pstack <span class="built_in">stack</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> value;</span><br><span class="line">    Pnode pnew = (Pnode)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(NODE));</span><br><span class="line">    <span class="keyword">if</span> (pnew == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"Error in locating memory!"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Enter the data you want to save:"</span>);</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;value) != <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        EATLINE;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"Error value you input, try again:"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    EATLINE;</span><br><span class="line">    pnew-&gt;data = value;</span><br><span class="line">    pnew-&gt;pnext = <span class="built_in">stack</span>-&gt;top;</span><br><span class="line">    <span class="built_in">stack</span>-&gt;top = pnew;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"push %d into the stack successfully!\n"</span>, value);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="（五）出栈操作"><a href="#（五）出栈操作" class="headerlink" title="（五）出栈操作"></a>（五）出栈操作</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">PopStack</span><span class="params">(Pstack <span class="built_in">stack</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (StackIsEmpty(<span class="built_in">stack</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"The stack is empty!"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Pnode temp;</span><br><span class="line">    <span class="keyword">int</span> data;</span><br><span class="line">    temp = <span class="built_in">stack</span>-&gt;top;</span><br><span class="line">    data = temp-&gt;data;</span><br><span class="line">    <span class="built_in">stack</span>-&gt;top = temp-&gt;pnext;</span><br><span class="line">    <span class="built_in">free</span>(temp);</span><br><span class="line">    temp = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"pop %d from stack successfully!\n"</span>, data);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="（六）获取栈的长度"><a href="#（六）获取栈的长度" class="headerlink" title="（六）获取栈的长度"></a>（六）获取栈的长度</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">GetStackLength</span><span class="params">(Pstack <span class="built_in">stack</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (StackIsEmpty(<span class="built_in">stack</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"The stack is empty!"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    Pnode previousTop = <span class="built_in">stack</span>-&gt;top;</span><br><span class="line">    <span class="keyword">while</span> (previousTop != (<span class="built_in">stack</span>-&gt;buttom))</span><br><span class="line">    &#123;</span><br><span class="line">        count++;</span><br><span class="line">        previousTop = previousTop-&gt;pnext;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"The stack length:%d \n"</span>, count);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="（七）遍历操作"><a href="#（七）遍历操作" class="headerlink" title="（七）遍历操作"></a>（七）遍历操作</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">TraverseStack</span><span class="params">(Pstack <span class="built_in">stack</span>, <span class="keyword">void</span>(*pfun)(<span class="keyword">int</span> *data))</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (StackIsEmpty(<span class="built_in">stack</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"The stack is empty!"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Pnode previousTop = <span class="built_in">stack</span>-&gt;top;</span><br><span class="line">    <span class="keyword">while</span> (previousTop != (<span class="built_in">stack</span>-&gt;buttom))</span><br><span class="line">    &#123;</span><br><span class="line">        (*pfun)(&amp;(previousTop-&gt;data));</span><br><span class="line">        previousTop = previousTop-&gt;pnext;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;&amp;emsp;栈是一种先进后出的数据结构（First In Last Out）。它在实际编程中起到了非常重要的作用。比如，我们程序在运行中对函数的调用，就有着明显的压栈和出栈的操作，栈按存储结构分类分为链式栈和顺序栈。那么栈的链式存储如何实现呢？以下是一些实现思路，完整代码请用&lt;a href=&quot;https://github.com/keviness/Algorithms/blob/master/Algorithms_C/DataStruct/stack_link.c&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;随意门&lt;/a&gt;~&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Algorithms" scheme="https://keviness.github.io/tags/Algorithms/"/>
    
      <category term="C" scheme="https://keviness.github.io/tags/C/"/>
    
      <category term="Stack" scheme="https://keviness.github.io/tags/Stack/"/>
    
      <category term="Link" scheme="https://keviness.github.io/tags/Link/"/>
    
  </entry>
  
  <entry>
    <title>常用查找算法</title>
    <link href="https://keviness.github.io/post/821c169a.html"/>
    <id>https://keviness.github.io/post/821c169a.html</id>
    <published>2020-09-06T16:00:00.000Z</published>
    <updated>2020-09-06T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>&emsp;众里寻他千百度，那人却在灯火燃珊处。怎样在一堆混乱的数据中查找到需要的数据呢？查找算法就显得很重要了，常见的查找有多种，以下是其中的一些，看实现的完整代码请用<a href="https://github.com/keviness/Algorithms/tree/master/Algorithms_C/Search" target="_blank" rel="noopener">随意门~</a></p><a id="more"></a><img src="/post/821c169a/search.png" class title="search"><h2 id="一，顺序查找"><a href="#一，顺序查找" class="headerlink" title="一，顺序查找"></a>一，顺序查找</h2><blockquote><ul><li>Sequence Search</li><li>说明：顺序查找适合于存储结构为顺序存储或链接存储的线性表。</li></ul></blockquote><h3 id="（一）基本思想"><a href="#（一）基本思想" class="headerlink" title="（一）基本思想"></a>（一）基本思想</h3><blockquote><ul><li>顺序查找也称为线形查找，属于无序查找算法。</li><li>从数据结构线形表的一端开始，顺序扫描，依次将扫描到的结点关键字与给定值k相比较，若相等则表示查找成功；若扫描结束仍没有找到关键字等于k的结点，表示查找失败。</li></ul></blockquote><h3 id="（二）复杂度分析"><a href="#（二）复杂度分析" class="headerlink" title="（二）复杂度分析　"></a>（二）复杂度分析　</h3><blockquote><ul><li>查找成功时的平均查找长度为：（假设每个数据元素的概率相等） ASL = 1/n(1+2+3+…+n) = (n+1)/2 ;</li><li>当查找不成功时，需要n+1次比较，时间复杂度为O(n);</li><li>所以，顺序查找的时间复杂度为O(n)。</li></ul></blockquote><h3 id="（三）代码实现"><a href="#（三）代码实现" class="headerlink" title="（三）代码实现"></a>（三）代码实现</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">SequenceSort</span><span class="params">(<span class="keyword">int</span> *arr, <span class="keyword">int</span> value)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;SIZE; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr[i] == value)</span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二，折半查找"><a href="#二，折半查找" class="headerlink" title="二，折半查找"></a>二，折半查找</h2><blockquote><ul><li>Binary Search</li><li>说明：元素必须是有序的，如果是无序的则要先进行排序操作。</li></ul></blockquote><h3 id="（一）基本思想-1"><a href="#（一）基本思想-1" class="headerlink" title="（一）基本思想"></a>（一）基本思想</h3><blockquote><ul><li>也称为是折半查找，属于有序查找算法。</li><li>用给定值k先与中间结点的关键字比较，中间结点把线形表分成两个子表，若相等则查找成功；若不相等，再根据k与该中间结点关键字的比较结果确定下一步查找哪个子表，这样递归进行，直到查找到或查找结束发现表中没有这样的结点。</li></ul></blockquote><h3 id="（二）复杂度分析-1"><a href="#（二）复杂度分析-1" class="headerlink" title="（二）复杂度分析"></a>（二）复杂度分析</h3><blockquote><ul><li>最坏情况下，关键词比较次数为log2(n+1)，且期望时间复杂度为O(log2n)。</li></ul></blockquote><h3 id="（三）代码实现-1"><a href="#（三）代码实现-1" class="headerlink" title="（三）代码实现"></a>（三）代码实现</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*** 非递归版本 ***/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">BinarySearch</span><span class="params">(<span class="keyword">int</span> *a, <span class="keyword">int</span> value, <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> low, high;</span><br><span class="line">    low = <span class="number">0</span>;</span><br><span class="line">    high = n<span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(low &lt;= high)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = (low+high)/<span class="number">2</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"low:%d\n"</span>, low);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"high:%d\n"</span>, high);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"middle:%d\n"</span>, mid);</span><br><span class="line">        <span class="keyword">if</span>(a[mid] == value)</span><br><span class="line">            <span class="keyword">return</span> mid;</span><br><span class="line">        <span class="keyword">if</span>(a[mid] &gt; value)</span><br><span class="line">            high = mid<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">if</span>(a[mid] &lt; value)</span><br><span class="line">            low = mid+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*** 递归实现 ***/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">BinarySort</span><span class="params">(<span class="keyword">int</span> *arr, <span class="keyword">int</span> value, <span class="keyword">int</span> low, <span class="keyword">int</span> high)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (low &gt; high)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">int</span> middle = (low+high)/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span> (arr[middle] == value)</span><br><span class="line">        <span class="keyword">return</span> middle;</span><br><span class="line">    <span class="keyword">if</span> (arr[middle] &gt; value)</span><br><span class="line">        <span class="keyword">return</span> BinarySort(arr, value, low, high<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">if</span> (arr[middle] &lt; value)</span><br><span class="line">        <span class="keyword">return</span> BinarySort(arr, value, middle+<span class="number">1</span>, high);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三，插值查找"><a href="#三，插值查找" class="headerlink" title="三，插值查找"></a>三，插值查找</h2><h3 id="（一）基本思想-2"><a href="#（一）基本思想-2" class="headerlink" title="（一）基本思想"></a>（一）基本思想</h3><blockquote><ul><li>基于二分查找算法，将查找点的选择改进为自适应选择，可以提高查找效率。当然，差值查找也属于有序查找。</li><li>mid=low+(key-a[low])/(a[high]-a[low])*(high-low)</li><li>将上述的比例参数1/2改进为自适应的，根据关键字在整个有序表中所处的位置，让mid值的变化更靠近关键字key，这样也就间接地减少了比较次数。</li></ul></blockquote><h3 id="（二）复杂度分析-2"><a href="#（二）复杂度分析-2" class="headerlink" title="（二）复杂度分析"></a>（二）复杂度分析</h3><blockquote><ul><li>查找成功或者失败的时间复杂度均为：O(log2(log2n))。</li></ul></blockquote><h3 id="（三）代码实现-2"><a href="#（三）代码实现-2" class="headerlink" title="（三）代码实现"></a>（三）代码实现</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*** 非递归版本 ***/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">InsertSearch</span><span class="params">(<span class="keyword">int</span> *arr, <span class="keyword">int</span> value, <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> low, high, mid;</span><br><span class="line">    low = <span class="number">0</span>;</span><br><span class="line">    high = n<span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(low &lt;= high)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//自适应获取应该取得的索引</span></span><br><span class="line">        mid = low + ((value-arr[low])/(arr[high]-arr[low]))*(high-low);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"low:%d\n"</span>, low);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"high:%d\n"</span>, high);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"middle:%d\n"</span>, mid);</span><br><span class="line">        <span class="keyword">if</span>(arr[mid] == value)</span><br><span class="line">            <span class="keyword">return</span> mid;</span><br><span class="line">        <span class="keyword">if</span>(arr[mid] &gt; value)</span><br><span class="line">            high = mid<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">if</span>(arr[mid] &lt; value)</span><br><span class="line">            low = mid+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*** 递归实现 ***/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">InsertSort</span><span class="params">(<span class="keyword">int</span> *arr, <span class="keyword">int</span> value, <span class="keyword">int</span> low, <span class="keyword">int</span> high)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (low &gt; high)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">int</span> middle = low + (value-arr[low])/(arr[high]-arr[low])*(high-low);</span><br><span class="line">    <span class="keyword">if</span> (arr[middle] == value)</span><br><span class="line">        <span class="keyword">return</span> middle;</span><br><span class="line">    <span class="keyword">if</span> (arr[middle] &gt; value)</span><br><span class="line">        <span class="keyword">return</span> InsertSort(arr, value, low, high<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">if</span> (arr[middle] &lt; value)</span><br><span class="line">        <span class="keyword">return</span> InsertSort(arr, value, middle+<span class="number">1</span>, high);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="四，分块查找"><a href="#四，分块查找" class="headerlink" title="四，分块查找"></a>四，分块查找</h2><h3 id="（一）基本思想-3"><a href="#（一）基本思想-3" class="headerlink" title="（一）基本思想"></a>（一）基本思想</h3><blockquote><ul><li>也叫索引顺序查找，算法实现除了需要查找表本身之外，还需要根据查找表建立一个索引表。</li><li>建立的索引表要求按照关键字进行升序排序，查找表要么整体有序，要么分块有序。 分块有序指的是第二个子表中所有关键字都要大于第一个子表中的最大关键字，第三个子表的所有关键字都要大于第二个子表中 的最大关键字，依次类推。</li></ul></blockquote><h3 id="（二）复杂度分析-3"><a href="#（二）复杂度分析-3" class="headerlink" title="（二）复杂度分析"></a>（二）复杂度分析</h3><blockquote><ul><li>分块查找算法的运行效率受两部分影响：查找块的操作和块内查找的操作。</li><li>查找块的操作可以采用顺序查找，也可以采用折半查 找（更优）；块内查找的操作采用顺序查找的方式。</li><li>相比于折半查找，分块查找时间效率上更低一些；相比于顺序查找，由于在子表中进行，比较的子表个数会不同程度的减少，所有分块查找算法会更优</li><li>总体来说，分块查找算法的效率介于顺序查找和折半查找之间。</li></ul></blockquote><h3 id="（三）代码实现-3"><a href="#（三）代码实现-3" class="headerlink" title="（三）代码实现"></a>（三）代码实现</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">search</span><span class="params">(<span class="keyword">int</span> key, <span class="keyword">int</span> a[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, startValue;</span><br><span class="line">    i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (i&lt;<span class="number">3</span> &amp;&amp; key&gt;newIndex[i].key) </span><br><span class="line">    &#123; </span><br><span class="line">        <span class="comment">//确定在哪个块中，遍历每个块，确定 key 在哪个块中</span></span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (i&gt;=<span class="number">3</span>) </span><br><span class="line">    &#123; </span><br><span class="line">        <span class="comment">//大于分得的块数，则返回 0</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    startValue = newIndex[i].start; <span class="comment">//startValue 等于块范围的起始值</span></span><br><span class="line">    <span class="keyword">while</span> (startValue &lt;= startValue+<span class="number">5</span> &amp;&amp; a[startValue]!=key)</span><br><span class="line">    &#123;</span><br><span class="line">        startValue++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (startValue&gt;startValue+<span class="number">5</span>) </span><br><span class="line">    &#123; </span><br><span class="line">        <span class="comment">//如果大于块范围的结束值，则说明没有要查找的数</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> startValue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="五，斐波那契查找"><a href="#五，斐波那契查找" class="headerlink" title="五，斐波那契查找"></a>五，斐波那契查找</h2><h3 id="（一）基本思想-4"><a href="#（一）基本思想-4" class="headerlink" title="（一）基本思想"></a>（一）基本思想</h3><blockquote><ul><li>也是二分查找的一种提升算法，通过运用黄金比例的概念在数列中选择查找点进行查找，提高查找效率。同样地，斐波那契查找也属于一种有序查找算法。<br>斐波那契查找与折半查找很相似，他是根据斐波那契序列的特点对有序表进行分割的。他要求开始表中记录的个数为某个斐波那契数小1，及n=F(k)-1;</li></ul></blockquote><blockquote><ul><li>开始将k值与第F(k-1)位置的记录进行比较(及mid=low+F(k-1)-1),比较结果也分为三种：</li><li>1）相等，mid位置的元素即为所求</li><li>2）&gt;，low=mid+1,k-=2;</li><li>说明：low=mid+1说明待查找的元素在[mid+1,high]范围内，k-=2 说明范围[mid+1,high]内的元素个数为n-(F(k-1))= Fk-1-F(k-1)=Fk-F(k-1)-1=F(k-2)-1个，所以可以递归的应用斐波那契查找。</li><li>3）&lt;，high=mid-1,k-=1。</li><li>说明：low=mid+1说明待查找的元素在[low,mid-1]范围内，k-=1 说明范围[low,mid-1]内的元素个数为F(k-1)-1个，所以可以递归 的应用斐波那契查找。</li></ul></blockquote><h3 id="（二）复杂度分析-4"><a href="#（二）复杂度分析-4" class="headerlink" title="（二）复杂度分析"></a>（二）复杂度分析</h3><blockquote><ul><li>最坏情况下，时间复杂度为O(log 2 n)，且其期望复杂度也为O(log 2 n)。</li></ul></blockquote><h3 id="（三）代码实现-4"><a href="#（三）代码实现-4" class="headerlink" title="（三）代码实现"></a>（三）代码实现</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*构造一个斐波那契数组*/</span> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Fibonacci</span><span class="params">(<span class="keyword">int</span> * F)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    F[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    F[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>; i&lt;max_size; ++i)</span><br><span class="line">        F[i] = F[i<span class="number">-1</span>] + F[i<span class="number">-2</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*定义斐波那契查找法*/</span>  </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">FibonacciSearch</span><span class="params">(<span class="keyword">int</span> *a, <span class="keyword">int</span> n, <span class="keyword">int</span> key)</span>  </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> low = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> high = n<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">int</span> F[max_size];</span><br><span class="line">    Fibonacci(F);   <span class="comment">//构造一个斐波那契数组F </span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> k = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(n &gt; F[k]<span class="number">-1</span>) <span class="comment">//计算n位于斐波那契数列的位置</span></span><br><span class="line">        ++k;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">int</span> temp[F[k]<span class="number">-1</span>];<span class="comment">//将数组a扩展到F[k]-1的长度</span></span><br><span class="line">    <span class="built_in">memcpy</span>(temp, a, n*<span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=n; i&lt;F[k]<span class="number">-1</span>; ++i)</span><br><span class="line">        temp[i] = a[n<span class="number">-1</span>];</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">while</span>(low &lt;= high)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = low + F[k<span class="number">-1</span>] - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(key &lt; temp[mid])</span><br><span class="line">        &#123;</span><br><span class="line">            high = mid - <span class="number">1</span>;</span><br><span class="line">            k-=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(key &gt; temp[mid])</span><br><span class="line">        &#123;</span><br><span class="line">            low = mid + <span class="number">1</span>;</span><br><span class="line">            k-=<span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(mid &lt; n)</span><br><span class="line">                <span class="keyword">return</span> mid; <span class="comment">//若相等则说明mid即为查找到的位置</span></span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">return</span> n<span class="number">-1</span>; <span class="comment">//若mid&gt;=n则说明是扩展的数值,返回n-1</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;&amp;emsp;众里寻他千百度，那人却在灯火燃珊处。怎样在一堆混乱的数据中查找到需要的数据呢？查找算法就显得很重要了，常见的查找有多种，以下是其中的一些，看实现的完整代码请用&lt;a href=&quot;https://github.com/keviness/Algorithms/tree/master/Algorithms_C/Search&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;随意门~&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Algorithms" scheme="https://keviness.github.io/tags/Algorithms/"/>
    
      <category term="C" scheme="https://keviness.github.io/tags/C/"/>
    
      <category term="Search" scheme="https://keviness.github.io/tags/Search/"/>
    
  </entry>
  
  <entry>
    <title>常见排序算法</title>
    <link href="https://keviness.github.io/post/c90bdf37.html"/>
    <id>https://keviness.github.io/post/c90bdf37.html</id>
    <published>2020-09-04T16:00:00.000Z</published>
    <updated>2020-09-04T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>&emsp;人类社会需要秩序，顺序从某个角度而言是秩序的一种。在算法的世界里，顺序具有重要地位。那该将一些混乱无序的数据变成有序的呢？以下是一些经典算法实现，完整代码请用<a href="https://github.com/keviness/Algorithms/tree/master/Algorithms_C/Sorts" target="_blank" rel="noopener">神奇的传送门~</a>。</p><a id="more"></a><h2 id="常见排序"><a href="#常见排序" class="headerlink" title="常见排序"></a>常见排序</h2><h4 id="1，排序总结图"><a href="#1，排序总结图" class="headerlink" title="1，排序总结图"></a>1，排序总结图</h4><img src="/post/c90bdf37/sortPict.png" class title="sortPict"><h4 id="2，排序算法分析图"><a href="#2，排序算法分析图" class="headerlink" title="2，排序算法分析图"></a>2，排序算法分析图</h4><img src="/post/c90bdf37/sortAnalysis.png" class title="sortAnalysis"><h3 id="一，插入排序"><a href="#一，插入排序" class="headerlink" title="一，插入排序"></a>一，插入排序</h3><blockquote><p>Insertion Sort</p></blockquote><h4 id="（一）直接插入排序"><a href="#（一）直接插入排序" class="headerlink" title="（一）直接插入排序"></a>（一）直接插入排序</h4><blockquote><p>Straight Insertion Sort</p></blockquote><h5 id="基本思想"><a href="#基本思想" class="headerlink" title="基本思想"></a>基本思想</h5><blockquote><ul><li>将一个记录插入到已排序好的有序表中，从而得到一个新，记录数增1的有序表。即：先将序列的第1个记录看成是一个有序的子序列，然后从第2个记录逐个进行插入，直至整个序列有序为止。</li></ul></blockquote><h5 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">StraightInsertionSort</span><span class="params">(<span class="keyword">int</span> *arr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    for (i=2; i&lt;SIZE; i++)</span></span><br><span class="line"><span class="comment">    &#123;</span></span><br><span class="line"><span class="comment">        if (arr[i] &lt; arr[i-1])</span></span><br><span class="line"><span class="comment">        &#123;</span></span><br><span class="line"><span class="comment">            arr[0] = arr[i];  //设置数组首元素为哨兵</span></span><br><span class="line"><span class="comment">            for (j=i-1; arr[j]&gt;arr[0]; j--)</span></span><br><span class="line"><span class="comment">            &#123;</span></span><br><span class="line"><span class="comment">                arr[j+1] = arr[j];</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">            arr[j+1] = arr[0];</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">for</span> (i=<span class="number">1</span>; i&lt;SIZE; i++) <span class="comment">//首元素从第二个开始</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr[i] &lt; arr[i<span class="number">-1</span>])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> value = arr[i];  <span class="comment">//没有设置数组首元素为哨兵</span></span><br><span class="line">            <span class="keyword">for</span> (j=i<span class="number">-1</span>; j&gt;=<span class="number">0</span> &amp;&amp; arr[j]&gt;value; j--)</span><br><span class="line">            &#123;</span><br><span class="line">                arr[j+<span class="number">1</span>] = arr[j];</span><br><span class="line">            &#125;</span><br><span class="line">            arr[j+<span class="number">1</span>] = value;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="（二）折半排序"><a href="#（二）折半排序" class="headerlink" title="（二）折半排序"></a>（二）折半排序</h4><h5 id="基本思想-1"><a href="#基本思想-1" class="headerlink" title="基本思想"></a>基本思想</h5><blockquote><ul><li>在直接插入排序的基础上，在有序的子序列中运用折半查找确定插入位置。</li></ul></blockquote><h5 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BInsertSort</span><span class="params">(<span class="keyword">int</span> *arr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j, m, value, low, high;</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">1</span>; i&lt;SIZE; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        low = <span class="number">0</span>;</span><br><span class="line">        high = i<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">if</span> (arr[i] &lt; arr[i<span class="number">-1</span>])</span><br><span class="line">        &#123;</span><br><span class="line">            value = arr[i];</span><br><span class="line">            <span class="keyword">while</span> (low &lt;= high)</span><br><span class="line">            &#123;</span><br><span class="line">                m = (low+high)/<span class="number">2</span>;</span><br><span class="line">                <span class="keyword">if</span> (arr[m]&gt;value) </span><br><span class="line">                    high = m<span class="number">-1</span>;</span><br><span class="line">                <span class="keyword">else</span> </span><br><span class="line">                    low = m+<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (j=i<span class="number">-1</span>; j&gt;=high+<span class="number">1</span>; j--)</span><br><span class="line">            &#123;</span><br><span class="line">                arr[j+<span class="number">1</span>] = arr[j];</span><br><span class="line">            &#125;</span><br><span class="line">            arr[j+<span class="number">1</span>] = value; <span class="comment">//arr[high+1] = value;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="（三）希尔排序"><a href="#（三）希尔排序" class="headerlink" title="（三）希尔排序"></a>（三）希尔排序</h4><h5 id="基本思想-2"><a href="#基本思想-2" class="headerlink" title="基本思想"></a>基本思想</h5><blockquote><ul><li>先将整个待排序的记录序列分割成为若干子序列分别进行直接插入排序，待整个序列中的记录“基本有序”时，再对全体记录进行依次直接插入排序。</li></ul></blockquote><h5 id="代码实现-2"><a href="#代码实现-2" class="headerlink" title="代码实现"></a>代码实现</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">shellSort</span><span class="params">(<span class="keyword">int</span> *arr, <span class="keyword">int</span> incresement)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i=incresement; i&lt;SIZE; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr[i] &lt; arr[i-incresement])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> value = arr[i];</span><br><span class="line">            <span class="keyword">for</span> (j=i-incresement; j&gt;=<span class="number">0</span>&amp;&amp;arr[j]&gt;value; j=j-incresement)</span><br><span class="line">            &#123;</span><br><span class="line">                arr[j+incresement] = arr[j];</span><br><span class="line">            &#125;</span><br><span class="line">            arr[j+incresement] = value;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二，选择排序"><a href="#二，选择排序" class="headerlink" title="二，选择排序"></a>二，选择排序</h3><blockquote><p>Selection Sort</p></blockquote><h4 id="（一）简单选择排序"><a href="#（一）简单选择排序" class="headerlink" title="（一）简单选择排序"></a>（一）简单选择排序</h4><blockquote><p>Simple Selection Sort</p></blockquote><h5 id="基本思想-3"><a href="#基本思想-3" class="headerlink" title="基本思想"></a>基本思想</h5><blockquote><ul><li>在要排序的一组数中，选出最小（或者最大）的一个数与第1个位置的数交换；然后在剩下的数当中再找最小（或者最大）的与第2个位置的数交换，依次类推，直到第n-1个元素（倒数第二个数）和第n个元素（最后一个数）比较为止。</li></ul></blockquote><h5 id="代码实现-3"><a href="#代码实现-3" class="headerlink" title="代码实现"></a>代码实现</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SimpleSelectSort</span><span class="params">(<span class="keyword">int</span> *arr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j, <span class="built_in">min</span>, temp;</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;SIZE<span class="number">-1</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">min</span> = i;</span><br><span class="line">        <span class="keyword">for</span> (j=i+<span class="number">1</span>; j&lt;SIZE; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[<span class="built_in">min</span>]&gt;arr[j])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">min</span> = j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">min</span> != i)</span><br><span class="line">        &#123;</span><br><span class="line">            temp = arr[<span class="built_in">min</span>];</span><br><span class="line">            arr[<span class="built_in">min</span>] = arr[i];</span><br><span class="line">            arr[i] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="（二）堆排序"><a href="#（二）堆排序" class="headerlink" title="（二）堆排序"></a>（二）堆排序</h4><blockquote><p>Heap Sort</p></blockquote><h5 id="基本思想-4"><a href="#基本思想-4" class="headerlink" title="基本思想"></a>基本思想</h5><blockquote><ul><li>堆的定义如下：具有n个元素的序列（k1,k2,…,kn),当且仅当满足ai&gt;=a2i+1,ai&gt;=a2i或者ai&lt;=a2i+1,ai&lt;=a2i时称之为堆。</li><li>可以将堆看做是一个完全二叉树。并且，每个结点的值都大于等于其左右孩子结点的值，称为大顶堆；或者每个结点的值都小于等于其左右孩子结点的值，称为小顶堆。</li><li>将待排序列表构造成一个最大堆，作为初始无序堆（即初始无序列表）</li><li>将堆顶元素（最大值）与堆尾元素互换</li><li>将该堆（无序区）尺寸缩小1，并对缩小后的堆重新调整为最大堆形式</li><li>重复上述步骤，直至堆（无序区）的尺寸变为1，此时排序完成</li></ul></blockquote><h5 id="代码实现-4"><a href="#代码实现-4" class="headerlink" title="代码实现"></a>代码实现</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">heapify</span><span class="params">(<span class="keyword">int</span> *tree, <span class="keyword">int</span> n, <span class="keyword">int</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (i &gt;= n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> c1 = i*<span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> c2 = i*<span class="number">2</span> + <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">int</span> <span class="built_in">max</span> = i;</span><br><span class="line">    <span class="keyword">if</span> (c1&lt;n &amp;&amp; tree[c1]&gt;tree[<span class="built_in">max</span>])</span><br><span class="line">        <span class="built_in">max</span> = c1;</span><br><span class="line">    <span class="keyword">if</span> (c2&lt;n &amp;&amp; tree[c2]&gt;tree[<span class="built_in">max</span>])</span><br><span class="line">        <span class="built_in">max</span> = c2;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">max</span> != i)</span><br><span class="line">    &#123;</span><br><span class="line">        swap(tree, i, <span class="built_in">max</span>);</span><br><span class="line">        heapify(tree, n, <span class="built_in">max</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">buildHeap</span><span class="params">(<span class="keyword">int</span> *tree, <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> last_node = n<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">int</span> last_node_parent = (last_node<span class="number">-1</span>)/<span class="number">2</span>; </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=last_node_parent; i&gt;=<span class="number">0</span>; i--)</span><br><span class="line">    &#123;</span><br><span class="line">        heapify(tree, n, i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">heapSort</span><span class="params">(<span class="keyword">int</span> *tree, <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    buildHeap(tree, n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=n<span class="number">-1</span>; i&gt;=<span class="number">0</span>; i--)</span><br><span class="line">    &#123;</span><br><span class="line">        swap(tree, i, <span class="number">0</span>);</span><br><span class="line">        heapify(tree, i, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> *tree, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> temp = tree[i];</span><br><span class="line">    tree[i] = tree[j];</span><br><span class="line">    tree[j] = temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="三，交换排序"><a href="#三，交换排序" class="headerlink" title="三，交换排序"></a>三，交换排序</h3><blockquote><p>Swap Sort</p></blockquote><h4 id="（一）冒泡排序"><a href="#（一）冒泡排序" class="headerlink" title="（一）冒泡排序"></a>（一）冒泡排序</h4><blockquote><p>Bubble Sort</p></blockquote><h5 id="基本思想-5"><a href="#基本思想-5" class="headerlink" title="基本思想"></a>基本思想</h5><blockquote><ul><li>重复的遍历（走过）待排序的一组数字（通常是列表形式），依次比较两个相邻的元素（数字），若它们的顺序错误则将它们调换一下位置，直至没有元素再需要交换为止。</li><li>每遍历一次列表，最大（或最小）的元素会经过交换一点点”浮“到列表的一端（顶端），所以形象的称这个算法为冒泡算法。</li></ul></blockquote><h5 id="代码实现-5"><a href="#代码实现-5" class="headerlink" title="代码实现"></a>代码实现</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BubbleSort</span><span class="params">(<span class="keyword">int</span> *arr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j, temp, flag;</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;SIZE<span class="number">-1</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        flag = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (j=<span class="number">0</span>; j&lt;SIZE-i<span class="number">-1</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[j] &gt; arr[j+<span class="number">1</span>])</span><br><span class="line">            &#123;</span><br><span class="line">                temp = arr[j];</span><br><span class="line">                arr[j] = arr[j+<span class="number">1</span>];</span><br><span class="line">                arr[j+<span class="number">1</span>] = temp;</span><br><span class="line">                flag = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (flag == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="（二）快速排序"><a href="#（二）快速排序" class="headerlink" title="（二）快速排序"></a>（二）快速排序</h4><blockquote><p>Quick Sort</p></blockquote><h5 id="基本思想-6"><a href="#基本思想-6" class="headerlink" title="基本思想"></a>基本思想</h5><blockquote><ul><li>通过一趟排序将待排序列表分割成独立的两部分，其中一部分的所有元素都比另一部分小，然后再按此方法将独立的两部分分别继续重复进行此操作，这个过程我们可以通过递归实现，从而达到最终将整个列表排序的目的。</li></ul></blockquote><h5 id="代码实现-6"><a href="#代码实现-6" class="headerlink" title="代码实现"></a>代码实现</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">quicksort</span><span class="params">(<span class="keyword">int</span> *arr, <span class="keyword">int</span> low, <span class="keyword">int</span> high)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> pos;</span><br><span class="line">    <span class="keyword">if</span> (low &lt; high)</span><br><span class="line">    &#123;</span><br><span class="line">        pos = findpos(arr, low, high);</span><br><span class="line">        quicksort(arr, low, pos<span class="number">-1</span>);</span><br><span class="line">        quicksort(arr, pos+<span class="number">1</span>, high);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">findpos</span><span class="params">(<span class="keyword">int</span> *arr, <span class="keyword">int</span> low, <span class="keyword">int</span> high)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> value = arr[low];</span><br><span class="line">    <span class="keyword">while</span> (low &lt; high)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span> (low&lt;high &amp;&amp; arr[high]&gt;=value)</span><br><span class="line">        &#123;</span><br><span class="line">            high--;</span><br><span class="line">        &#125;</span><br><span class="line">        arr[low] = arr[high];</span><br><span class="line">        <span class="keyword">while</span> (low&lt;high &amp;&amp; arr[low]&lt;=value)</span><br><span class="line">        &#123;</span><br><span class="line">            low++;</span><br><span class="line">        &#125;</span><br><span class="line">        arr[high] = arr[low];</span><br><span class="line">    &#125;</span><br><span class="line">    arr[low] = value;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> low;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="四，归并排序"><a href="#四，归并排序" class="headerlink" title="四，归并排序"></a>四，归并排序</h3><blockquote><p>Merge Sort</p></blockquote><h5 id="基本思想-7"><a href="#基本思想-7" class="headerlink" title="基本思想"></a>基本思想</h5><blockquote><ul><li>是将两个（或两个以上）有序表合并成一个新的有序表，即把待排序序列分为若干个子序列，每个子序列是有序的。然后再把有序子序列合并为整体有序序列。</li></ul></blockquote><h5 id="代码实现-7"><a href="#代码实现-7" class="headerlink" title="代码实现"></a>代码实现</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Merge</span><span class="params">(<span class="keyword">int</span> *arr, <span class="keyword">int</span> left, <span class="keyword">int</span> middle, <span class="keyword">int</span> right)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> left_size = middle-left;</span><br><span class="line">    <span class="keyword">int</span> right_size = right-middle+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> left_arr[left_size];</span><br><span class="line">    <span class="keyword">int</span> right_arr[right_size];</span><br><span class="line">    <span class="keyword">int</span> i, j, k;</span><br><span class="line">    <span class="keyword">for</span> (i=left; i&lt;middle; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        left_arr[i-left] = arr[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (j=middle; j&lt;=right; j++)</span><br><span class="line">    &#123;</span><br><span class="line">        right_arr[j-middle] = arr[j];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//对两个子数组元素进行合并</span></span><br><span class="line">    i=<span class="number">0</span>; j=<span class="number">0</span>; k=left;</span><br><span class="line">    <span class="keyword">while</span> (i&lt;left_size &amp;&amp; j&lt;right_size)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (left_arr[i] &lt; right_arr[j])</span><br><span class="line">        &#123;</span><br><span class="line">            arr[k] = left_arr[i];</span><br><span class="line">            i++;</span><br><span class="line">            k++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            arr[k] = right_arr[j];</span><br><span class="line">            j++;</span><br><span class="line">            k++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//将剩余数据填入源数组中</span></span><br><span class="line">    <span class="keyword">while</span> (i &lt; left_size)</span><br><span class="line">    &#123;</span><br><span class="line">        arr[k] = left_arr[i];</span><br><span class="line">        i++;</span><br><span class="line">        k++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (j &lt; right_size)</span><br><span class="line">    &#123;</span><br><span class="line">        arr[k] = right_arr[j];</span><br><span class="line">        j++;</span><br><span class="line">        k++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MergeSort</span><span class="params">(<span class="keyword">int</span> *arr, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (left &gt;= right)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> middle = (left+right)/<span class="number">2</span>;</span><br><span class="line">        MergeSort(arr, left, middle);</span><br><span class="line">        MergeSort(arr, middle+<span class="number">1</span>, right);</span><br><span class="line">        Merge(arr, left, middle+<span class="number">1</span>, right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;&amp;emsp;人类社会需要秩序，顺序从某个角度而言是秩序的一种。在算法的世界里，顺序具有重要地位。那该将一些混乱无序的数据变成有序的呢？以下是一些经典算法实现，完整代码请用&lt;a href=&quot;https://github.com/keviness/Algorithms/tree/master/Algorithms_C/Sorts&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;神奇的传送门~&lt;/a&gt;。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Algorithms" scheme="https://keviness.github.io/tags/Algorithms/"/>
    
      <category term="C" scheme="https://keviness.github.io/tags/C/"/>
    
      <category term="Sort" scheme="https://keviness.github.io/tags/Sort/"/>
    
  </entry>
  
  <entry>
    <title>线性表：数组的实现</title>
    <link href="https://keviness.github.io/post/ab15e1cb.html"/>
    <id>https://keviness.github.io/post/ab15e1cb.html</id>
    <published>2020-09-02T16:00:00.000Z</published>
    <updated>2020-09-02T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>&emsp;数组在C语言中已经存在了，那么如何实现一个自定义的数组呢？以下是一些实现思路，完整代码请走<a href="https://github.com/keviness/Algorithms/blob/master/Algorithms_C/DataStruct/array.c" target="_blank" rel="noopener">神奇的传送门~</a></p><a id="more"></a><h2 id="线性表：数组的实现"><a href="#线性表：数组的实现" class="headerlink" title="线性表：数组的实现"></a>线性表：数组的实现</h2><h3 id="一，概念及示意图"><a href="#一，概念及示意图" class="headerlink" title="一，概念及示意图"></a>一，概念及示意图</h3><ul><li>数组的链式存储示意图<br><img src="/post/queue1.png" alt="数组链表存储示意图"></li></ul><h3 id="二，实现代码"><a href="#二，实现代码" class="headerlink" title="二，实现代码"></a>二，实现代码</h3><h4 id="（一）数据形式"><a href="#（一）数据形式" class="headerlink" title="（一）数据形式"></a>（一）数据形式</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">array</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> count;</span><br><span class="line">    <span class="keyword">int</span> length;</span><br><span class="line">    <span class="keyword">int</span> *pint;</span><br><span class="line">&#125;Array;</span><br></pre></td></tr></table></figure><h4 id="（二）初始化"><a href="#（二）初始化" class="headerlink" title="（二）初始化"></a>（二）初始化</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InitializeArray</span><span class="params">(Array *parr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    parr-&gt;pint = (<span class="keyword">int</span> *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span>)*(parr-&gt;length));</span><br><span class="line">    <span class="keyword">if</span> ((parr-&gt;pint) == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"Can\'t locate the memory!"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">    &#125;</span><br><span class="line">    parr-&gt;count = <span class="number">0</span>;</span><br><span class="line">    parr-&gt;length = MAXSIZE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="（三）检测为空或已满"><a href="#（三）检测为空或已满" class="headerlink" title="（三）检测为空或已满"></a>（三）检测为空或已满</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">ArrayIsFull</span><span class="params">(<span class="keyword">const</span> Array *parr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (parr-&gt;count)==(parr-&gt;length)? <span class="literal">true</span>:<span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">ArrayIsEmpty</span><span class="params">(<span class="keyword">const</span> Array *parr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (parr-&gt;count) == <span class="number">0</span>? <span class="literal">true</span>:<span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="（四）追加操作"><a href="#（四）追加操作" class="headerlink" title="（四）追加操作"></a>（四）追加操作</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">AppendItem</span><span class="params">(Array *parr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> item;</span><br><span class="line">    <span class="keyword">if</span> (ArrayIsFull(parr))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"The array is full!"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Enter the item you want to append:"</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;item);</span><br><span class="line">    EATLINE;</span><br><span class="line">    (parr-&gt;pint)[parr-&gt;count] = item;</span><br><span class="line">    (parr-&gt;count)++;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="（五）插入操作"><a href="#（五）插入操作" class="headerlink" title="（五）插入操作"></a>（五）插入操作</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">InsertItem</span><span class="params">(Array *parr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> pos;</span><br><span class="line">    <span class="keyword">int</span> item;</span><br><span class="line">    <span class="keyword">if</span> (ArrayIsFull(parr))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"The array is full!"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Enter the index you want to insert:"</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;pos);</span><br><span class="line">    EATLINE;</span><br><span class="line">    <span class="keyword">if</span> (pos&lt;<span class="number">1</span> || pos&gt;(parr-&gt;count)+<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"Error pos!"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Enter the item you want to insert:"</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;item);</span><br><span class="line">    EATLINE;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=(parr-&gt;count<span class="number">-1</span>); i&gt;=(pos<span class="number">-1</span>); i--)</span><br><span class="line">    &#123;</span><br><span class="line">        (parr-&gt;pint)[i+<span class="number">1</span>] = (parr-&gt;pint)[i];</span><br><span class="line">    &#125;</span><br><span class="line">    (parr-&gt;pint)[pos<span class="number">-1</span>] = item;</span><br><span class="line">    (parr-&gt;count)++;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="（六）删除操作"><a href="#（六）删除操作" class="headerlink" title="（六）删除操作"></a>（六）删除操作</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">DeleteItem</span><span class="params">(Array *parr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> pos;</span><br><span class="line">    <span class="keyword">int</span> item;</span><br><span class="line">    <span class="keyword">if</span> (ArrayIsEmpty(parr))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"The array is empty!"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Enter the index of the item you want to delete:"</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;pos);</span><br><span class="line">    EATLINE;</span><br><span class="line">    <span class="keyword">if</span> (pos&lt;<span class="number">1</span> || pos&gt;(parr-&gt;count))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"The index out of range!"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    item = (parr-&gt;pint)[pos<span class="number">-1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=pos; i&lt;(parr-&gt;count); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        (parr-&gt;pint)[i<span class="number">-1</span>] = (parr-&gt;pint)[i];</span><br><span class="line">    &#125;</span><br><span class="line">    parr-&gt;count--;</span><br><span class="line">    <span class="keyword">return</span> item;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="（七）获取元素"><a href="#（七）获取元素" class="headerlink" title="（七）获取元素"></a>（七）获取元素</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">GetItem</span><span class="params">(<span class="keyword">const</span> Array *parr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> pos;</span><br><span class="line">    <span class="keyword">int</span> result;</span><br><span class="line">    <span class="keyword">if</span> (ArrayIsEmpty(parr))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"The Array is empty!"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Enter the index of element you want to get:"</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;pos);</span><br><span class="line">    EATLINE;</span><br><span class="line">    result = (parr-&gt;pint)[pos];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;&amp;emsp;数组在C语言中已经存在了，那么如何实现一个自定义的数组呢？以下是一些实现思路，完整代码请走&lt;a href=&quot;https://github.com/keviness/Algorithms/blob/master/Algorithms_C/DataStruct/array.c&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;神奇的传送门~&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Algorithms" scheme="https://keviness.github.io/tags/Algorithms/"/>
    
      <category term="C" scheme="https://keviness.github.io/tags/C/"/>
    
      <category term="Array" scheme="https://keviness.github.io/tags/Array/"/>
    
      <category term="List" scheme="https://keviness.github.io/tags/List/"/>
    
  </entry>
  
  <entry>
    <title>线性表：链表的实现</title>
    <link href="https://keviness.github.io/post/c206fe66.html"/>
    <id>https://keviness.github.io/post/c206fe66.html</id>
    <published>2020-08-31T16:00:00.000Z</published>
    <updated>2020-08-31T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>&emsp;转眼就到九月份了，数据结构的工作还未结束，任重而道远啊，加油~<br>&emsp;线性表是比较常见的数据结构，按存储方式分，有链表（链式存储）和数组（顺序存储）两种，那么链表如何实现呢？以下是一些个实现思路，完整代码请用<a href="https://github.com/keviness/Algorithms/blob/master/Algorithms_C/DataStruct/list.c" target="_blank" rel="noopener">神奇的传送门</a>~</p><a id="more"></a><h3 id="一，概念及示意图"><a href="#一，概念及示意图" class="headerlink" title="一，概念及示意图"></a>一，概念及示意图</h3><h4 id="（一）数据结构分类图"><a href="#（一）数据结构分类图" class="headerlink" title="（一）数据结构分类图"></a>（一）数据结构分类图</h4><img src="/post/c206fe66/struct.png" class title="struct"><h4 id="（二）线性表示意图"><a href="#（二）线性表示意图" class="headerlink" title="（二）线性表示意图"></a>（二）线性表示意图</h4><img src="/post/c206fe66/xianxing.png" class title="SequenceList"><h3 id="二，实现代码"><a href="#二，实现代码" class="headerlink" title="二，实现代码"></a>二，实现代码</h3><h4 id="（一）数据形式"><a href="#（一）数据形式" class="headerlink" title="（一）数据形式"></a>（一）数据形式</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">pnext</span>;</span></span><br><span class="line">&#125;List, *Plist;</span><br></pre></td></tr></table></figure><h4 id="（二）初始化"><a href="#（二）初始化" class="headerlink" title="（二）初始化"></a>（二）初始化</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InitList</span><span class="params">(PQUEUE <span class="built_in">queue</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;count; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        pnew = (Plist)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(List));</span><br><span class="line">        <span class="keyword">if</span> (pnew == <span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">"Locate mmemory error!"</span>);</span><br><span class="line">            <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Enter the %d data:"</span>, i+<span class="number">1</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;item);</span><br><span class="line">        EATLINE;</span><br><span class="line">        pnew-&gt;data = item;</span><br><span class="line">        pnew-&gt;pnext = <span class="literal">NULL</span>;</span><br><span class="line">        pprevious-&gt;pnext = pnew;</span><br><span class="line">        pprevious = pnew;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> phead;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="（三）检测为空或已满"><a href="#（三）检测为空或已满" class="headerlink" title="（三）检测为空或已满"></a>（三）检测为空或已满</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">ListIsEmpty</span><span class="params">(Plist phead)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (phead-&gt;pnext == <span class="literal">NULL</span>) ? <span class="literal">true</span>:<span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="（四）追加操作"><a href="#（四）追加操作" class="headerlink" title="（四）追加操作"></a>（四）追加操作</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">AppendItem</span><span class="params">(Plist phead)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Plist pnew;</span><br><span class="line">    Plist p = phead;</span><br><span class="line">    <span class="keyword">int</span> item;</span><br><span class="line">    <span class="keyword">while</span> (p-&gt;pnext != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        p = p-&gt;pnext;</span><br><span class="line">    &#125;</span><br><span class="line">    pnew = (Plist)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(List));</span><br><span class="line">    <span class="keyword">if</span> (pnew == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"Locate memory error!"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Enter the data you want to append:"</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;item);</span><br><span class="line">    EATLINE;</span><br><span class="line">    pnew-&gt;data = item;</span><br><span class="line">    pnew-&gt;pnext = <span class="literal">NULL</span>;</span><br><span class="line">    p-&gt;pnext = pnew;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Enter the %d successfully!\n"</span>, item);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="（五）插入操作"><a href="#（五）插入操作" class="headerlink" title="（五）插入操作"></a>（五）插入操作</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">InsertItem</span><span class="params">(Plist phead)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> pos, data;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    Plist p = phead;</span><br><span class="line">    Plist pnew;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Enter the index you want to insert:"</span>);</span><br><span class="line">    <span class="keyword">while</span> ((<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;pos) != <span class="number">1</span>) &amp;&amp; pos&lt;<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        EATLINE;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"The error pos value, try again:"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    EATLINE;</span><br><span class="line">    <span class="keyword">while</span> (i&lt;pos<span class="number">-1</span> &amp;&amp; p!=<span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        p = p-&gt;pnext;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (i&gt;pos<span class="number">-1</span> &amp;&amp; p==<span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"The pos input error!"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    pnew = (Plist)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(List));</span><br><span class="line">    <span class="keyword">if</span> (pnew == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"Can\'t locate the memory!"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Enter the data you want to save:"</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;data);</span><br><span class="line">    EATLINE;</span><br><span class="line">    pnew-&gt;data = data;</span><br><span class="line">    </span><br><span class="line">    pnew-&gt;pnext = p-&gt;pnext;</span><br><span class="line">    p-&gt;pnext = pnew;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"successfully insert %d \n"</span>, data);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="（六）删除操作"><a href="#（六）删除操作" class="headerlink" title="（六）删除操作"></a>（六）删除操作</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">DeleteItem</span><span class="params">(Plist phead)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> pos, data, i, value;</span><br><span class="line">    Plist pnew, p, q;</span><br><span class="line">    p = phead;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Enter the pos you want to delete:"</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> ((<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;pos) != <span class="number">1</span>) &amp;&amp; pos&lt;<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        EATLINE;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"The error pos value, try again:"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    EATLINE;</span><br><span class="line">    i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (i&lt;pos<span class="number">-1</span> &amp;&amp; p-&gt;pnext!=<span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        p = p-&gt;pnext;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (i&gt;pos<span class="number">-1</span> || p-&gt;pnext==<span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"The pos input error!"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">    &#125;</span><br><span class="line">    q = p-&gt;pnext;</span><br><span class="line">    value = q-&gt;data;</span><br><span class="line">    p-&gt;pnext = q-&gt;pnext;</span><br><span class="line">    <span class="built_in">free</span>(q);</span><br><span class="line">    q = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="（七）遍历操作"><a href="#（七）遍历操作" class="headerlink" title="（七）遍历操作"></a>（七）遍历操作</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">TraverseList</span><span class="params">(Plist phead, <span class="keyword">void</span>(*pfun)(Plist plst))</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Plist p = phead-&gt;pnext;</span><br><span class="line">    <span class="keyword">if</span> (ListIsEmpty(phead))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"The List is empty！"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (p != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        (*pfun)(p);</span><br><span class="line">        p = p-&gt;pnext;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="（八）获取长度"><a href="#（八）获取长度" class="headerlink" title="（八）获取长度"></a>（八）获取长度</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ListLength</span><span class="params">(Plist phead)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    Plist p = phead-&gt;pnext;</span><br><span class="line">    <span class="keyword">while</span> (p != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        p = p-&gt;pnext;</span><br><span class="line">        count++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;&amp;emsp;转眼就到九月份了，数据结构的工作还未结束，任重而道远啊，加油~&lt;br&gt;&amp;emsp;线性表是比较常见的数据结构，按存储方式分，有链表（链式存储）和数组（顺序存储）两种，那么链表如何实现呢？以下是一些个实现思路，完整代码请用&lt;a href=&quot;https://github.com/keviness/Algorithms/blob/master/Algorithms_C/DataStruct/list.c&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;神奇的传送门&lt;/a&gt;~&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Algorithms" scheme="https://keviness.github.io/tags/Algorithms/"/>
    
      <category term="C" scheme="https://keviness.github.io/tags/C/"/>
    
      <category term="List" scheme="https://keviness.github.io/tags/List/"/>
    
  </entry>
  
  <entry>
    <title>队列：顺序存储实现</title>
    <link href="https://keviness.github.io/post/75b41c5c.html"/>
    <id>https://keviness.github.io/post/75b41c5c.html</id>
    <published>2020-08-10T16:00:00.000Z</published>
    <updated>2020-08-10T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>&emsp;队列在生活中可是经常见的。比如，食堂，商场等地方经常需要排队。它的主要性质是先进先出（first in first out），在算法中队列有顺序存储（连续存储）和链式存储（离散存储）两种方式。其中顺序存储必须要用循环队列的形式实现，具体如下：</p><a id="more"></a><h2 id="队列：顺序存储实现"><a href="#队列：顺序存储实现" class="headerlink" title="队列：顺序存储实现"></a>队列：顺序存储实现</h2><h3 id="一，顺序存储实现"><a href="#一，顺序存储实现" class="headerlink" title="一，顺序存储实现"></a>一，顺序存储实现</h3><blockquote><ul><li>顺序存储实现队列必须用循环队列方式实现。</li><li>如此，对内存的使用友好，不会使程序奔溃。</li></ul></blockquote><h4 id="（一）概念及示意图"><a href="#（一）概念及示意图" class="headerlink" title="（一）概念及示意图"></a>（一）概念及示意图</h4><h5 id="1-入队出队示意图"><a href="#1-入队出队示意图" class="headerlink" title="1,入队出队示意图"></a>1,入队出队示意图</h5><img src="/post/75b41c5c/queue_sequence.png" class title="queueSequence"><h5 id="2-判断队列满或空示意图"><a href="#2-判断队列满或空示意图" class="headerlink" title="2,判断队列满或空示意图"></a>2,判断队列满或空示意图</h5><img src="/post/75b41c5c/queue_empty.png" class title="queueEmpty"><h3 id="二，实现代码"><a href="#二，实现代码" class="headerlink" title="二，实现代码"></a>二，实现代码</h3><h4 id="（一）队列数据形式"><a href="#（一）队列数据形式" class="headerlink" title="（一）队列数据形式"></a>（一）队列数据形式</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Queue</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> *pbase;</span><br><span class="line">    <span class="keyword">int</span> front;</span><br><span class="line">    <span class="keyword">int</span> rear;</span><br><span class="line">&#125;QUEUE, * PQUEUE;</span><br></pre></td></tr></table></figure><h4 id="（二）初始化队列"><a href="#（二）初始化队列" class="headerlink" title="（二）初始化队列"></a>（二）初始化队列</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InitQueue</span><span class="params">(PQUEUE <span class="built_in">queue</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">queue</span>-&gt;pbase = (<span class="keyword">int</span> *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span>) * SIZE);</span><br><span class="line">    <span class="keyword">if</span> ((<span class="built_in">queue</span>-&gt;pbase) == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"Error in locating the memory!"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">queue</span>-&gt;front = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">queue</span>-&gt;rear = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="（三）检测队列为空或已满"><a href="#（三）检测队列为空或已满" class="headerlink" title="（三）检测队列为空或已满"></a>（三）检测队列为空或已满</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">QueueIsEmpty</span><span class="params">(PQUEUE <span class="built_in">queue</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ((<span class="built_in">queue</span>-&gt;front) == (<span class="built_in">queue</span>-&gt;rear))? <span class="literal">true</span>:<span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">QueueIsFull</span><span class="params">(PQUEUE <span class="built_in">queue</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (((<span class="built_in">queue</span>-&gt;rear)+<span class="number">1</span> % SIZE) == (<span class="built_in">queue</span>-&gt;front)) ? <span class="literal">true</span>:<span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="（四）入队出队操作"><a href="#（四）入队出队操作" class="headerlink" title="（四）入队出队操作"></a>（四）入队出队操作</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">EnterQueue</span><span class="params">(PQUEUE <span class="built_in">queue</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (QueueIsFull(<span class="built_in">queue</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"The queue is full!"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> data;</span><br><span class="line">    (<span class="built_in">queue</span>-&gt;pbase)[<span class="built_in">queue</span>-&gt;rear] = data;</span><br><span class="line">    <span class="built_in">queue</span>-&gt;rear = (<span class="built_in">queue</span>-&gt;rear+<span class="number">1</span>)%SIZE;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">OutQueue</span><span class="params">(PQUEUE <span class="built_in">queue</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (QueueIsEmpty(<span class="built_in">queue</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"The queue is empty!"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> data;</span><br><span class="line">    data = (<span class="built_in">queue</span>-&gt;pbase)[<span class="built_in">queue</span>-&gt;front];</span><br><span class="line">    <span class="built_in">queue</span>-&gt;front = (<span class="built_in">queue</span>-&gt;front+<span class="number">1</span>)%SIZE;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"The out queue data:%d \n"</span>, data);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="（五）遍历队列"><a href="#（五）遍历队列" class="headerlink" title="（五）遍历队列"></a>（五）遍历队列</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">TraverseQueue</span><span class="params">(PQUEUE <span class="built_in">queue</span>, <span class="keyword">void</span>(*pfunc)(<span class="keyword">int</span> *data))</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (QueueIsEmpty(<span class="built_in">queue</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"The queue is empty!"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="built_in">queue</span>-&gt;front;</span><br><span class="line">    <span class="keyword">while</span> (i != <span class="built_in">queue</span>-&gt;rear)</span><br><span class="line">    &#123;</span><br><span class="line">        (*pfunc)(&amp;(<span class="built_in">queue</span>-&gt;pbase[i]));</span><br><span class="line">        i = (i+<span class="number">1</span>)%SIZE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="（六）打印队列"><a href="#（六）打印队列" class="headerlink" title="（六）打印队列"></a>（六）打印队列</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ShowQueue</span><span class="params">(PQUEUE <span class="built_in">queue</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (QueueIsEmpty(<span class="built_in">queue</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"The queue is empty!"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="built_in">queue</span>-&gt;front;</span><br><span class="line">    <span class="keyword">while</span> (i != <span class="built_in">queue</span>-&gt;rear)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>, (<span class="built_in">queue</span>-&gt;pbase)[i]);</span><br><span class="line">        i = (i+<span class="number">1</span>)%SIZE;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">'\n'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="（七）队列长度"><a href="#（七）队列长度" class="headerlink" title="（七）队列长度"></a>（七）队列长度</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">QueueLength</span><span class="params">(PQUEUE <span class="built_in">queue</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="built_in">queue</span>-&gt;front;</span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (i != <span class="built_in">queue</span>-&gt;rear)</span><br><span class="line">    &#123;</span><br><span class="line">        count++;</span><br><span class="line">        i = (i+<span class="number">1</span>)%SIZE;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"The queue length:%d \n"</span>, count);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="（八）清空队列"><a href="#（八）清空队列" class="headerlink" title="（八）清空队列"></a>（八）清空队列</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ClearQueue</span><span class="params">(PQUEUE <span class="built_in">queue</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (QueueIsEmpty(<span class="built_in">queue</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"The queue is empty!"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">free</span>(<span class="built_in">queue</span>-&gt;pbase);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Clear queue successfully!"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;&amp;emsp;队列在生活中可是经常见的。比如，食堂，商场等地方经常需要排队。它的主要性质是先进先出（first in first out），在算法中队列有顺序存储（连续存储）和链式存储（离散存储）两种方式。其中顺序存储必须要用循环队列的形式实现，具体如下：&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Algorithms" scheme="https://keviness.github.io/tags/Algorithms/"/>
    
      <category term="C" scheme="https://keviness.github.io/tags/C/"/>
    
      <category term="Queue" scheme="https://keviness.github.io/tags/Queue/"/>
    
  </entry>
  
  <entry>
    <title>递归概述</title>
    <link href="https://keviness.github.io/post/631fd3f2.html"/>
    <id>https://keviness.github.io/post/631fd3f2.html</id>
    <published>2020-08-08T16:00:00.000Z</published>
    <updated>2020-08-08T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>&emsp;什么是递归呢？别急，让我给你讲一个故事：<br>&emsp;从前，有一座山，山里有座庙，庙里有一个老和尚和一个小和尚，有一天老和尚给小和尚讲了一个故事。故事是：从前，有一座山，山里有座庙，庙里有一个老和尚和一个小和尚，有一天老和尚给小和尚讲了一个故事。故事是：从前，有一座山……<br>&emsp;怎么样，体会到什么是递归了吗？递归是算法里面重要的角色，可以帮助我们解决一些难题。</p><a id="more"></a><h2 id="递归（recursion）"><a href="#递归（recursion）" class="headerlink" title="递归（recursion）"></a>递归（recursion）</h2><h3 id="一，定义"><a href="#一，定义" class="headerlink" title="一，定义"></a>一，定义</h3><blockquote><p>递归：一个函数自己直接或间接调用自己</p></blockquote><h3 id="二，函数调用另一个函数时发生了什么？"><a href="#二，函数调用另一个函数时发生了什么？" class="headerlink" title="二，函数调用另一个函数时发生了什么？"></a>二，函数调用另一个函数时发生了什么？</h3><ul><li>主调函数运行被调函数之前：<blockquote><ul><li>1.将实际参数，返回地址等信息传递给被调函数。</li><li>2.为被调函数的局部变量（包括形参）分配存储空间。</li><li>3.将控制权转移到被调函数的入口。</li></ul></blockquote></li><li>被调函数返回主调函数之前：<blockquote><ul><li>1.保存被调函数的返回结果（若有返回值）。</li><li>2.释放被调函数的存储空间。</li><li>3.依照被调用函数返回的地址将控制权转移回主调函数。</li></ul></blockquote></li><li>注意：<blockquote><ul><li>1.多个函数相互调用时，函数之间的信息传递和控制转移由栈来实现:</li><li>2.在整个程序运行过程中，系统将程序运行所需要的数据空间安排在一个栈中。</li><li>3.每调用一个函数，就在栈顶分配一个存储空间，对该调用的函数进行压栈操作。</li><li>4.当函数执行结束返回时，就释放它的存储空间，进行出栈操作。</li><li>5.因此，当前运行的函数永远在栈顶位置。</li></ul></blockquote><h3 id="三，递归满足三个条件"><a href="#三，递归满足三个条件" class="headerlink" title="三，递归满足三个条件"></a>三，递归满足三个条件</h3><blockquote><ul><li>1.递归必须得有一个明确的终止条件</li><li>2.该函数所处理的数据规模必须在递减</li><li>3.这个转化必须是可解的</li></ul></blockquote></li></ul><h3 id="四，循环和递归的关系："><a href="#四，循环和递归的关系：" class="headerlink" title="四，循环和递归的关系："></a>四，循环和递归的关系：</h3><blockquote><ul><li>理论上，所有的循环都可以转化成递归，但是用递归能解决的问题不一定能用循环解决。</li></ul></blockquote><h3 id="五，循环和递归的比较"><a href="#五，循环和递归的比较" class="headerlink" title="五，循环和递归的比较"></a>五，循环和递归的比较</h3><blockquote><ul><li>递归：易于理解，速度慢，存储空间大</li><li>循环：不易理解，速度快，存储空间小</li></ul></blockquote><h3 id="六，常用递归示例"><a href="#六，常用递归示例" class="headerlink" title="六，常用递归示例"></a>六，常用递归示例</h3><h4 id="（一）计算1-2-3-…-n-1-n的和"><a href="#（一）计算1-2-3-…-n-1-n的和" class="headerlink" title="（一）计算1+2+3+…+n-1+n的和"></a>（一）计算1+2+3+…+n-1+n的和</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">long</span> <span class="title">sum_numbers</span><span class="params">(<span class="keyword">int</span> num)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (num == <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> sum_numbers(num<span class="number">-1</span>) + num;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="（二）计算n的阶乘-N"><a href="#（二）计算n的阶乘-N" class="headerlink" title="（二）计算n的阶乘(N!)"></a>（二）计算n的阶乘(N!)</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">long</span> <span class="title">multiply_numbers</span><span class="params">(<span class="keyword">int</span> num)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (num == <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> multiply_numbers(num<span class="number">-1</span>) * num;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="（三）汉诺塔"><a href="#（三）汉诺塔" class="headerlink" title="（三）汉诺塔"></a>（三）汉诺塔</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">hannuo_tower</span><span class="params">(<span class="keyword">int</span> num, <span class="keyword">char</span> A, <span class="keyword">char</span> B, <span class="keyword">char</span> C)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">如果是一个盘子</span></span><br><span class="line"><span class="comment">直接将A柱子上的盘子从A移到C</span></span><br><span class="line"><span class="comment">否则</span></span><br><span class="line"><span class="comment">先将A柱子上的n-1个盘子借助C移到B</span></span><br><span class="line"><span class="comment">直接将A柱子上的盘子从A移到C</span></span><br><span class="line"><span class="comment">最后将B柱子上的n-1个盘子借助A移到C</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (num == <span class="number">1</span>)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"move the %d pan from %c to %c \n"</span>, num, A, C);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        hannuo_tower(num<span class="number">-1</span>, A, C, B);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"move the %d pan from %c to %c \n"</span>, num, A, C);</span><br><span class="line">        hannuo_tower(num<span class="number">-1</span>, B, A, C);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="（四）斐波那契数列"><a href="#（四）斐波那契数列" class="headerlink" title="（四）斐波那契数列"></a>（四）斐波那契数列</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">long</span> <span class="title">fabo</span><span class="params">(<span class="keyword">int</span> num)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (num == <span class="number">2</span> || num==<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> fabo(num<span class="number">-2</span>) + fabo(num<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;&amp;emsp;什么是递归呢？别急，让我给你讲一个故事：&lt;br&gt;&amp;emsp;从前，有一座山，山里有座庙，庙里有一个老和尚和一个小和尚，有一天老和尚给小和尚讲了一个故事。故事是：从前，有一座山，山里有座庙，庙里有一个老和尚和一个小和尚，有一天老和尚给小和尚讲了一个故事。故事是：从前，有一座山……&lt;br&gt;&amp;emsp;怎么样，体会到什么是递归了吗？递归是算法里面重要的角色，可以帮助我们解决一些难题。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Algorithms" scheme="https://keviness.github.io/tags/Algorithms/"/>
    
      <category term="C" scheme="https://keviness.github.io/tags/C/"/>
    
      <category term="recursion" scheme="https://keviness.github.io/tags/recursion/"/>
    
  </entry>
  
  <entry>
    <title>Numpy（二）：numpy数组常用操作</title>
    <link href="https://keviness.github.io/post/9ae22f4b.html"/>
    <id>https://keviness.github.io/post/9ae22f4b.html</id>
    <published>2020-07-26T16:00:00.000Z</published>
    <updated>2020-07-26T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>&emsp;Numpy中的数组是多维数组，Numpy除了有很强的数组元素访问能力，还有很强的数组操作能力，以下是常用的Numpy数组操作函数：</p><a id="more"></a><h2 id="一，修改数组形状"><a href="#一，修改数组形状" class="headerlink" title="一，修改数组形状"></a>一，修改数组形状</h2><h3 id="（一），numpy-reshape"><a href="#（一），numpy-reshape" class="headerlink" title="（一），numpy.reshape"></a>（一），numpy.reshape</h3><blockquote><ul><li><code>numpy.reshape</code> 函数可以在不改变数据的条件下修改形状，格式如下</li><li><code>numpy.reshape(arr, newshape, order=&#39;C&#39;)</code></li><li>arr：要修改形状的数组</li><li>newshape：整数或者整数数组，新的形状应当兼容原有形状</li><li>order：’C’ – 按行，’F’ – 按列，’A’ – 原顺序，’k’ – 元素在内存中的出现顺序。</li></ul></blockquote><h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a = np.arange(<span class="number">8</span>)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'原始数组：'</span>)</span><br><span class="line"><span class="keyword">print</span> (a)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'\n'</span>)</span><br><span class="line">b = a.reshape(<span class="number">4</span>,<span class="number">2</span>)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'修改后的数组：'</span>)</span><br><span class="line"><span class="keyword">print</span> (b)</span><br><span class="line"><span class="comment">#输出结果如下：</span></span><br><span class="line">原始数组：</span><br><span class="line">[<span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span>]</span><br><span class="line">修改后的数组：</span><br><span class="line">[[<span class="number">0</span> <span class="number">1</span>]</span><br><span class="line"> [<span class="number">2</span> <span class="number">3</span>]</span><br><span class="line"> [<span class="number">4</span> <span class="number">5</span>]</span><br><span class="line"> [<span class="number">6</span> <span class="number">7</span>]]</span><br></pre></td></tr></table></figure><h2 id="二，翻转数组"><a href="#二，翻转数组" class="headerlink" title="二，翻转数组"></a>二，翻转数组</h2><h3 id="（一），numpy-transpose"><a href="#（一），numpy-transpose" class="headerlink" title="（一），numpy.transpose"></a>（一），numpy.transpose</h3><blockquote><ul><li><code>numpy.transpose(arr, axes)</code></li><li>arr：要操作的数组</li><li>axes：整数列表，对应维度，通常所有维度都会对换。</li></ul></blockquote><h4 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a = np.arange(<span class="number">12</span>).reshape(<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'原数组：'</span>)</span><br><span class="line"><span class="keyword">print</span> (a )</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'\n'</span>)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'对换数组：'</span>)</span><br><span class="line"><span class="keyword">print</span> (np.transpose(a))</span><br><span class="line"><span class="comment">#输出结果如下：</span></span><br><span class="line">原数组：</span><br><span class="line">[[ <span class="number">0</span>  <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span>]</span><br><span class="line"> [ <span class="number">4</span>  <span class="number">5</span>  <span class="number">6</span>  <span class="number">7</span>]</span><br><span class="line"> [ <span class="number">8</span>  <span class="number">9</span> <span class="number">10</span> <span class="number">11</span>]]</span><br><span class="line">对换数组：</span><br><span class="line">[[ <span class="number">0</span>  <span class="number">4</span>  <span class="number">8</span>]</span><br><span class="line"> [ <span class="number">1</span>  <span class="number">5</span>  <span class="number">9</span>]</span><br><span class="line"> [ <span class="number">2</span>  <span class="number">6</span> <span class="number">10</span>]</span><br><span class="line"> [ <span class="number">3</span>  <span class="number">7</span> <span class="number">11</span>]]</span><br></pre></td></tr></table></figure><h3 id="（二），numpy-ndarray-T"><a href="#（二），numpy-ndarray-T" class="headerlink" title="（二），numpy.ndarray.T"></a>（二），numpy.ndarray.T</h3><blockquote><ul><li>类似 <code>numpy.transpose</code>：</li></ul></blockquote><h4 id="实例-2"><a href="#实例-2" class="headerlink" title="实例"></a>实例</h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a = np.arange(<span class="number">12</span>).reshape(<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'原数组：'</span>)</span><br><span class="line"><span class="keyword">print</span> (a)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'\n'</span>)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'转置数组：'</span>)</span><br><span class="line"><span class="keyword">print</span> (a.T)</span><br><span class="line"><span class="comment">#输出结果如下：</span></span><br><span class="line">原数组：</span><br><span class="line">[[ <span class="number">0</span>  <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span>]</span><br><span class="line"> [ <span class="number">4</span>  <span class="number">5</span>  <span class="number">6</span>  <span class="number">7</span>]</span><br><span class="line"> [ <span class="number">8</span>  <span class="number">9</span> <span class="number">10</span> <span class="number">11</span>]]</span><br><span class="line">转置数组：</span><br><span class="line">[[ <span class="number">0</span>  <span class="number">4</span>  <span class="number">8</span>]</span><br><span class="line"> [ <span class="number">1</span>  <span class="number">5</span>  <span class="number">9</span>]</span><br><span class="line"> [ <span class="number">2</span>  <span class="number">6</span> <span class="number">10</span>]</span><br><span class="line"> [ <span class="number">3</span>  <span class="number">7</span> <span class="number">11</span>]]</span><br></pre></td></tr></table></figure><h2 id="三，连接数组"><a href="#三，连接数组" class="headerlink" title="三，连接数组"></a>三，连接数组</h2><table><thead><tr><th align="center">函数</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">concatenate</td><td align="center">连接沿现有轴的数组序列</td></tr><tr><td align="center">stack</td><td align="center">沿着新的轴加入一系列数组。</td></tr><tr><td align="center">hstack</td><td align="center">水平堆叠序列中的数组（列方向）</td></tr><tr><td align="center">vstack</td><td align="center">竖直堆叠序列中的数组（行方向）</td></tr></tbody></table><h3 id="（一），numpy-concatenate"><a href="#（一），numpy-concatenate" class="headerlink" title="（一），numpy.concatenate"></a>（一），numpy.concatenate</h3><blockquote><ul><li><code>numpy.concatenate((a1, a2, ...), axis)</code></li><li>a1, a2, …：相同类型的数组</li><li>axis：沿着它连接数组的轴，默认为 0</li></ul></blockquote><h4 id="实例-3"><a href="#实例-3" class="headerlink" title="实例"></a>实例</h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a = np.array([[<span class="number">1</span>,<span class="number">2</span>],[<span class="number">3</span>,<span class="number">4</span>]])</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'第一个数组：'</span>)</span><br><span class="line"><span class="keyword">print</span> (a)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'\n'</span>)</span><br><span class="line">b = np.array([[<span class="number">5</span>,<span class="number">6</span>],[<span class="number">7</span>,<span class="number">8</span>]])</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'第二个数组：'</span>)</span><br><span class="line"><span class="keyword">print</span> (b)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'\n'</span>)</span><br><span class="line"><span class="comment"># 两个数组的维度相同</span></span><br><span class="line"><span class="keyword">print</span> (<span class="string">'沿轴 0 连接两个数组：'</span>)</span><br><span class="line"><span class="keyword">print</span> (np.concatenate((a,b)))</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'\n'</span>)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'沿轴 1 连接两个数组：'</span>)</span><br><span class="line"><span class="keyword">print</span> (np.concatenate((a,b),axis = <span class="number">1</span>))</span><br><span class="line"><span class="comment">#输出结果为：</span></span><br><span class="line">第一个数组：</span><br><span class="line">[[<span class="number">1</span> <span class="number">2</span>]</span><br><span class="line"> [<span class="number">3</span> <span class="number">4</span>]]</span><br><span class="line">第二个数组：</span><br><span class="line">[[<span class="number">5</span> <span class="number">6</span>]</span><br><span class="line"> [<span class="number">7</span> <span class="number">8</span>]]</span><br><span class="line">沿轴 <span class="number">0</span> 连接两个数组：</span><br><span class="line">[[<span class="number">1</span> <span class="number">2</span>]</span><br><span class="line"> [<span class="number">3</span> <span class="number">4</span>]</span><br><span class="line"> [<span class="number">5</span> <span class="number">6</span>]</span><br><span class="line"> [<span class="number">7</span> <span class="number">8</span>]]</span><br><span class="line">沿轴 <span class="number">1</span> 连接两个数组：</span><br><span class="line">[[<span class="number">1</span> <span class="number">2</span> <span class="number">5</span> <span class="number">6</span>]</span><br><span class="line"> [<span class="number">3</span> <span class="number">4</span> <span class="number">7</span> <span class="number">8</span>]]</span><br></pre></td></tr></table></figure><h3 id="（二），numpy-stack"><a href="#（二），numpy-stack" class="headerlink" title="（二），numpy.stack"></a>（二），numpy.stack</h3><blockquote><ul><li><code>numpy.stack(arrays, axis)</code></li><li>arrays相同形状的数组序列</li><li>axis：返回数组中的轴，输入数组沿着它来堆叠</li></ul></blockquote><h4 id="实例-4"><a href="#实例-4" class="headerlink" title="实例"></a>实例</h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a = np.array([[<span class="number">1</span>,<span class="number">2</span>],[<span class="number">3</span>,<span class="number">4</span>]])</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'第一个数组：'</span>)</span><br><span class="line"><span class="keyword">print</span> (a)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'\n'</span>)</span><br><span class="line">b = np.array([[<span class="number">5</span>,<span class="number">6</span>],[<span class="number">7</span>,<span class="number">8</span>]])</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'第二个数组：'</span>)</span><br><span class="line"><span class="keyword">print</span> (b)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'\n'</span>)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'沿轴 0 堆叠两个数组：'</span>)</span><br><span class="line"><span class="keyword">print</span> (np.stack((a,b),<span class="number">0</span>))</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'\n'</span>)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'沿轴 1 堆叠两个数组：'</span>)</span><br><span class="line"><span class="keyword">print</span> (np.stack((a,b),<span class="number">1</span>))</span><br><span class="line"><span class="comment">#输出结果如下：</span></span><br><span class="line">第一个数组：</span><br><span class="line">[[<span class="number">1</span> <span class="number">2</span>]</span><br><span class="line"> [<span class="number">3</span> <span class="number">4</span>]]</span><br><span class="line">第二个数组：</span><br><span class="line">[[<span class="number">5</span> <span class="number">6</span>]</span><br><span class="line"> [<span class="number">7</span> <span class="number">8</span>]]</span><br><span class="line">沿轴 <span class="number">0</span> 堆叠两个数组：</span><br><span class="line">[[[<span class="number">1</span> <span class="number">2</span>]</span><br><span class="line">  [<span class="number">3</span> <span class="number">4</span>]]</span><br><span class="line"> [[<span class="number">5</span> <span class="number">6</span>]</span><br><span class="line">  [<span class="number">7</span> <span class="number">8</span>]]]</span><br><span class="line">沿轴 <span class="number">1</span> 堆叠两个数组：</span><br><span class="line">[[[<span class="number">1</span> <span class="number">2</span>]</span><br><span class="line">  [<span class="number">5</span> <span class="number">6</span>]]</span><br><span class="line"> [[<span class="number">3</span> <span class="number">4</span>]</span><br><span class="line">  [<span class="number">7</span> <span class="number">8</span>]]]</span><br></pre></td></tr></table></figure><h3 id="（三），numpy-hstack"><a href="#（三），numpy-hstack" class="headerlink" title="（三），numpy.hstack"></a>（三），numpy.hstack</h3><blockquote><ul><li><code>numpy.hstack</code>是<code>numpy.stack</code>函数的变体，它通过水平堆叠来生成数组。</li></ul></blockquote><h4 id="实例-5"><a href="#实例-5" class="headerlink" title="实例"></a>实例</h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a = np.array([[<span class="number">1</span>,<span class="number">2</span>],[<span class="number">3</span>,<span class="number">4</span>]])</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'第一个数组：'</span>)</span><br><span class="line"><span class="keyword">print</span> (a)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'\n'</span>)</span><br><span class="line">b = np.array([[<span class="number">5</span>,<span class="number">6</span>],[<span class="number">7</span>,<span class="number">8</span>]])</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'第二个数组：'</span>)</span><br><span class="line"><span class="keyword">print</span> (b)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'\n'</span>)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'水平堆叠：'</span>)</span><br><span class="line">c = np.hstack((a,b))</span><br><span class="line"><span class="keyword">print</span> (c)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'\n'</span>)</span><br><span class="line"><span class="comment">#输出结果如下：</span></span><br><span class="line">第一个数组：</span><br><span class="line">[[<span class="number">1</span> <span class="number">2</span>]</span><br><span class="line"> [<span class="number">3</span> <span class="number">4</span>]]</span><br><span class="line">第二个数组：</span><br><span class="line">[[<span class="number">5</span> <span class="number">6</span>]</span><br><span class="line"> [<span class="number">7</span> <span class="number">8</span>]]</span><br><span class="line">水平堆叠：</span><br><span class="line">[[<span class="number">1</span> <span class="number">2</span> <span class="number">5</span> <span class="number">6</span>]</span><br><span class="line"> [<span class="number">3</span> <span class="number">4</span> <span class="number">7</span> <span class="number">8</span>]]</span><br></pre></td></tr></table></figure><h3 id="（四），numpy-vstack"><a href="#（四），numpy-vstack" class="headerlink" title="（四），numpy.vstack"></a>（四），numpy.vstack</h3><blockquote><ul><li><code>numpy.vstack</code>是<code>numpy.stack</code>函数的变体，它通过垂直堆叠来生成数组。</li></ul></blockquote><h4 id="实例-6"><a href="#实例-6" class="headerlink" title="实例"></a>实例</h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a = np.array([[<span class="number">1</span>,<span class="number">2</span>],[<span class="number">3</span>,<span class="number">4</span>]])</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'第一个数组：'</span>)</span><br><span class="line"><span class="keyword">print</span> (a)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'\n'</span>)</span><br><span class="line">b = np.array([[<span class="number">5</span>,<span class="number">6</span>],[<span class="number">7</span>,<span class="number">8</span>]])</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'第二个数组：'</span>)</span><br><span class="line"><span class="keyword">print</span> (b)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'\n'</span>)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'竖直堆叠：'</span>)</span><br><span class="line">c = np.vstack((a,b))</span><br><span class="line"><span class="keyword">print</span> (c)</span><br><span class="line"><span class="comment">#输出结果为：</span></span><br><span class="line">第一个数组：</span><br><span class="line">[[<span class="number">1</span> <span class="number">2</span>]</span><br><span class="line"> [<span class="number">3</span> <span class="number">4</span>]]</span><br><span class="line">第二个数组：</span><br><span class="line">[[<span class="number">5</span> <span class="number">6</span>]</span><br><span class="line"> [<span class="number">7</span> <span class="number">8</span>]]</span><br><span class="line">竖直堆叠：</span><br><span class="line">[[<span class="number">1</span> <span class="number">2</span>]</span><br><span class="line"> [<span class="number">3</span> <span class="number">4</span>]</span><br><span class="line"> [<span class="number">5</span> <span class="number">6</span>]</span><br><span class="line"> [<span class="number">7</span> <span class="number">8</span>]]</span><br></pre></td></tr></table></figure><h2 id="四，分割数组"><a href="#四，分割数组" class="headerlink" title="四，分割数组"></a>四，分割数组</h2><table><thead><tr><th align="center">函数</th><th align="center">数组及操作</th></tr></thead><tbody><tr><td align="center">split</td><td align="center">将一个数组分割为多个子数组</td></tr><tr><td align="center">hsplit</td><td align="center">将一个数组水平分割为多个子数组（按列）</td></tr><tr><td align="center">vsplit</td><td align="center">将一个数组垂直分割为多个子数组（按行）</td></tr></tbody></table><h3 id="（一），numpy-split"><a href="#（一），numpy-split" class="headerlink" title="（一），numpy.split"></a>（一），numpy.split</h3><blockquote><ul><li><code>numpy.split(ary, indices_or_sections, axis)</code></li><li>ary：被分割的数组</li><li>indices_or_sections：若是一个整数，就用该数平均切分，若是一个数组，为沿轴切分的位置（左开右闭）</li><li>axis：沿着哪个维度进行切向，默认为0，横向切分。为1时，纵向切分</li></ul></blockquote><h4 id="实例-7"><a href="#实例-7" class="headerlink" title="实例"></a>实例</h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a = np.arange(<span class="number">9</span>)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'第一个数组：'</span>)</span><br><span class="line"><span class="keyword">print</span> (a)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'\n'</span>)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'将数组分为三个大小相等的子数组：'</span>)</span><br><span class="line">b = np.split(a,<span class="number">3</span>)</span><br><span class="line"><span class="keyword">print</span> (b)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'\n'</span>)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'将数组在一维数组中表明的位置分割：'</span>)</span><br><span class="line">b = np.split(a,[<span class="number">4</span>,<span class="number">7</span>])</span><br><span class="line"><span class="keyword">print</span> (b)</span><br><span class="line"><span class="comment">#输出结果为：</span></span><br><span class="line">第一个数组：</span><br><span class="line">[<span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span>]</span><br><span class="line">将数组分为三个大小相等的子数组：</span><br><span class="line">[array([<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>]), array([<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]), array([<span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>])]</span><br><span class="line">将数组在一维数组中表明的位置分割：</span><br><span class="line">[array([<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]), array([<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]), array([<span class="number">7</span>, <span class="number">8</span>])]</span><br></pre></td></tr></table></figure><h3 id="（二），numpy-hsplit"><a href="#（二），numpy-hsplit" class="headerlink" title="（二），numpy.hsplit"></a>（二），numpy.hsplit</h3><blockquote><ul><li><code>numpy.hsplit</code>函数用于水平分割数组，通过指定要返回的相同形状的数组数量来拆分原数组。</li></ul></blockquote><h4 id="实例-8"><a href="#实例-8" class="headerlink" title="实例"></a>实例</h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">harr = np.floor(<span class="number">10</span> * np.random.random((<span class="number">2</span>, <span class="number">6</span>)))</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'原array：'</span>)</span><br><span class="line">print(harr)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'拆分后：'</span>)</span><br><span class="line">print(np.hsplit(harr, <span class="number">3</span>))</span><br><span class="line"><span class="comment">#输出结果为：</span></span><br><span class="line">原array：</span><br><span class="line">[[<span class="number">4.</span> <span class="number">7.</span> <span class="number">6.</span> <span class="number">3.</span> <span class="number">2.</span> <span class="number">6.</span>]</span><br><span class="line"> [<span class="number">6.</span> <span class="number">3.</span> <span class="number">6.</span> <span class="number">7.</span> <span class="number">9.</span> <span class="number">7.</span>]]</span><br><span class="line">拆分后：</span><br><span class="line">[array([[<span class="number">4.</span>, <span class="number">7.</span>],</span><br><span class="line">       [<span class="number">6.</span>, <span class="number">3.</span>]]), array([[<span class="number">6.</span>, <span class="number">3.</span>],</span><br><span class="line">       [<span class="number">6.</span>, <span class="number">7.</span>]]), array([[<span class="number">2.</span>, <span class="number">6.</span>],</span><br><span class="line">       [<span class="number">9.</span>, <span class="number">7.</span>]])]</span><br></pre></td></tr></table></figure><h3 id="（三），numpy-vsplit"><a href="#（三），numpy-vsplit" class="headerlink" title="（三），numpy.vsplit"></a>（三），numpy.vsplit</h3><blockquote><ul><li><code>numpy.vsplit</code>沿着垂直轴分割，其分割方式与hsplit用法相同。</li></ul></blockquote><h4 id="实例-9"><a href="#实例-9" class="headerlink" title="实例"></a>实例</h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a = np.arange(<span class="number">16</span>).reshape(<span class="number">4</span>,<span class="number">4</span>)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'第一个数组：'</span>)</span><br><span class="line"><span class="keyword">print</span> (a)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'\n'</span>)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'竖直分割：'</span>)</span><br><span class="line">b = np.vsplit(a,<span class="number">2</span>)</span><br><span class="line"><span class="keyword">print</span> (b)</span><br><span class="line"><span class="comment">#输出结果为：</span></span><br><span class="line">第一个数组：</span><br><span class="line">[[ <span class="number">0</span>  <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span>]</span><br><span class="line"> [ <span class="number">4</span>  <span class="number">5</span>  <span class="number">6</span>  <span class="number">7</span>]</span><br><span class="line"> [ <span class="number">8</span>  <span class="number">9</span> <span class="number">10</span> <span class="number">11</span>]</span><br><span class="line"> [<span class="number">12</span> <span class="number">13</span> <span class="number">14</span> <span class="number">15</span>]]</span><br><span class="line">竖直分割：</span><br><span class="line">[array([[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">       [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>]]), array([[ <span class="number">8</span>,  <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>],</span><br><span class="line">       [<span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>]])]</span><br></pre></td></tr></table></figure><h2 id="五，数组元素的添加与删除"><a href="#五，数组元素的添加与删除" class="headerlink" title="五，数组元素的添加与删除"></a>五，数组元素的添加与删除</h2><table><thead><tr><th align="center">函数</th><th align="center">元素及描述</th></tr></thead><tbody><tr><td align="center">resize</td><td align="center">返回指定形状的新数组</td></tr><tr><td align="center">append</td><td align="center">将值添加到数组末尾</td></tr><tr><td align="center">insert</td><td align="center">沿指定轴将值插入到指定下标之前</td></tr><tr><td align="center">delete</td><td align="center">删掉某个轴的子数组，并返回删除后的新数组</td></tr><tr><td align="center">unique</td><td align="center">查找数组内的唯一元素</td></tr></tbody></table><h3 id="（一），numpy-resize"><a href="#（一），numpy-resize" class="headerlink" title="（一），numpy.resize"></a>（一），numpy.resize</h3><blockquote><ul><li><code>numpy.resize</code>函数返回指定大小的新数组。</li><li>如果新数组大小大于原始大小，则包含原始数组中的元素的副本。</li><li><code>numpy.resize(arr, shape)</code></li><li>arr：要修改大小的数组</li><li>shape：返回数组的新形状</li></ul></blockquote><h4 id="实例-10"><a href="#实例-10" class="headerlink" title="实例"></a>实例</h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a = np.array([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]])</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'第一个数组：'</span>)</span><br><span class="line"><span class="keyword">print</span> (a)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'\n'</span>)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'第一个数组的形状：'</span>)</span><br><span class="line"><span class="keyword">print</span> (a.shape)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'\n'</span>)</span><br><span class="line">b = np.resize(a, (<span class="number">3</span>,<span class="number">2</span>))</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'第二个数组：'</span>)</span><br><span class="line"><span class="keyword">print</span> (b)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'\n'</span>)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'第二个数组的形状：'</span>)</span><br><span class="line"><span class="keyword">print</span> (b.shape)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'\n'</span>)</span><br><span class="line"><span class="comment"># 要注意 a 的第一行在 b 中重复出现，因为尺寸变大了</span></span><br><span class="line"><span class="keyword">print</span> (<span class="string">'修改第二个数组的大小：'</span>)</span><br><span class="line">b = np.resize(a,(<span class="number">3</span>,<span class="number">3</span>))</span><br><span class="line"><span class="keyword">print</span> (b)</span><br><span class="line"><span class="comment">#输出结果为：</span></span><br><span class="line">第一个数组：</span><br><span class="line">[[<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>]</span><br><span class="line"> [<span class="number">4</span> <span class="number">5</span> <span class="number">6</span>]]</span><br><span class="line">第一个数组的形状：</span><br><span class="line">(<span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">第二个数组：</span><br><span class="line">[[<span class="number">1</span> <span class="number">2</span>]</span><br><span class="line"> [<span class="number">3</span> <span class="number">4</span>]</span><br><span class="line"> [<span class="number">5</span> <span class="number">6</span>]]</span><br><span class="line">第二个数组的形状：</span><br><span class="line">(<span class="number">3</span>, <span class="number">2</span>)</span><br><span class="line">修改第二个数组的大小：</span><br><span class="line">[[<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>]</span><br><span class="line"> [<span class="number">4</span> <span class="number">5</span> <span class="number">6</span>]</span><br><span class="line"> [<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>]]</span><br></pre></td></tr></table></figure><h3 id="（二），numpy-append"><a href="#（二），numpy-append" class="headerlink" title="（二），numpy.append"></a>（二），numpy.append</h3><blockquote><ul><li><code>numpy.append</code> 函数在数组的末尾添加值。 </li><li>追加操作会分配整个数组，并把原来的数组复制到新数组中。 </li><li>输入数组的维度必须匹配否则将生成ValueError。</li><li><code>numpy.append(arr, values, axis=None)</code></li><li>arr：输入数组</li><li>values：要向arr添加的值，需要和arr形状相同（除了要添加的轴）</li><li>axis：默认为 None。当axis无定义时，是横向加成，返回总是为一维数组！</li><li>当axis有定义的时候，分别为0和1的时候（列数要相同）。当axis为1时，数组是加在右边（行数要相同）。</li></ul></blockquote><h4 id="实例-11"><a href="#实例-11" class="headerlink" title="实例"></a>实例</h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a = np.array([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]])</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'第一个数组：'</span>)</span><br><span class="line"><span class="keyword">print</span> (a)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'\n'</span>)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'向数组添加元素：'</span>)</span><br><span class="line"><span class="keyword">print</span> (np.append(a, [<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]))</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'\n'</span>)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'沿轴 0 添加元素：'</span>)</span><br><span class="line"><span class="keyword">print</span> (np.append(a, [[<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]],axis = <span class="number">0</span>))</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'\n'</span>)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'沿轴 1 添加元素：'</span>)</span><br><span class="line"><span class="keyword">print</span> (np.append(a, [[<span class="number">5</span>,<span class="number">5</span>,<span class="number">5</span>],[<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]],axis = <span class="number">1</span>))</span><br><span class="line"><span class="comment">#输出结果为：</span></span><br><span class="line">第一个数组：</span><br><span class="line">[[<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>]</span><br><span class="line"> [<span class="number">4</span> <span class="number">5</span> <span class="number">6</span>]]</span><br><span class="line">向数组添加元素：</span><br><span class="line">[<span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span>]</span><br><span class="line">沿轴 <span class="number">0</span> 添加元素：</span><br><span class="line">[[<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>]</span><br><span class="line"> [<span class="number">4</span> <span class="number">5</span> <span class="number">6</span>]</span><br><span class="line"> [<span class="number">7</span> <span class="number">8</span> <span class="number">9</span>]]</span><br><span class="line">沿轴 <span class="number">1</span> 添加元素：</span><br><span class="line">[[<span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">5</span> <span class="number">5</span> <span class="number">5</span>]</span><br><span class="line"> [<span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span>]]</span><br></pre></td></tr></table></figure><h3 id="（三），numpy-insert"><a href="#（三），numpy-insert" class="headerlink" title="（三），numpy.insert"></a>（三），numpy.insert</h3><blockquote><ul><li><code>numpy.insert</code> 函数在给定索引之前，沿给定轴在输入数组中插入值。</li><li>如果值的类型转换为要插入，则它与输入数组不同。 插入没有原地的，函数会返回一个新数组。此外，如果未提供轴，则输入数组会被展开。</li><li><code>numpy.insert(arr, obj, values, axis)</code></li><li>arr：输入数组</li><li>obj：在其之前插入值的索引</li><li>values：要插入的值</li><li>axis：沿着它插入的轴，如果未提供，则输入数组会被展开</li></ul></blockquote><h4 id="实例-12"><a href="#实例-12" class="headerlink" title="实例"></a>实例</h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a = np.array([[<span class="number">1</span>,<span class="number">2</span>],[<span class="number">3</span>,<span class="number">4</span>],[<span class="number">5</span>,<span class="number">6</span>]])</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'第一个数组：'</span>)</span><br><span class="line"><span class="keyword">print</span> (a)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'\n'</span>)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'未传递 Axis 参数。 在插入之前输入数组会被展开。'</span>)</span><br><span class="line"><span class="keyword">print</span> (np.insert(a,<span class="number">3</span>,[<span class="number">11</span>,<span class="number">12</span>]))</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'\n'</span>)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'传递了 Axis 参数。 会广播值数组来配输入数组。'</span>)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'沿轴 0 广播：'</span>)</span><br><span class="line"><span class="keyword">print</span> (np.insert(a,<span class="number">1</span>,[<span class="number">11</span>],axis = <span class="number">0</span>))</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'\n'</span>)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'沿轴 1 广播：'</span>)</span><br><span class="line"><span class="keyword">print</span> (np.insert(a,<span class="number">1</span>,<span class="number">11</span>,axis = <span class="number">1</span>))</span><br><span class="line"><span class="comment">#输出结果如下：</span></span><br><span class="line">第一个数组：</span><br><span class="line">[[<span class="number">1</span> <span class="number">2</span>]</span><br><span class="line"> [<span class="number">3</span> <span class="number">4</span>]</span><br><span class="line"> [<span class="number">5</span> <span class="number">6</span>]]</span><br><span class="line">未传递 Axis 参数。 在插入之前输入数组会被展开。</span><br><span class="line">[ <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span> <span class="number">11</span> <span class="number">12</span>  <span class="number">4</span>  <span class="number">5</span>  <span class="number">6</span>]</span><br><span class="line">传递了 Axis 参数。 会广播值数组来配输入数组。</span><br><span class="line">沿轴 <span class="number">0</span> 广播：</span><br><span class="line">[[ <span class="number">1</span>  <span class="number">2</span>]</span><br><span class="line"> [<span class="number">11</span> <span class="number">11</span>]</span><br><span class="line"> [ <span class="number">3</span>  <span class="number">4</span>]</span><br><span class="line"> [ <span class="number">5</span>  <span class="number">6</span>]]</span><br><span class="line">沿轴 <span class="number">1</span> 广播：</span><br><span class="line">[[ <span class="number">1</span> <span class="number">11</span>  <span class="number">2</span>]</span><br><span class="line"> [ <span class="number">3</span> <span class="number">11</span>  <span class="number">4</span>]</span><br><span class="line"> [ <span class="number">5</span> <span class="number">11</span>  <span class="number">6</span>]]</span><br></pre></td></tr></table></figure><h3 id="（四），numpy-delete"><a href="#（四），numpy-delete" class="headerlink" title="（四），numpy.delete"></a>（四），numpy.delete</h3><blockquote><ul><li><code>numpy.delete</code>函数返回从输入数组中删除指定子数组的新数组。 </li><li>与<code>insert()</code>函数的情况一样，如果未提供轴参数，则输入数组将展开。</li><li><code>Numpy.delete(arr, obj, axis)</code></li><li>arr：输入数组</li><li>obj：可以被切片，整数或者整数数组，表明要从输入数组删除的子数组</li><li>axis：沿着它删除给定子数组的轴，如果未提供，则输入数组会被展开</li></ul></blockquote><h4 id="实例-13"><a href="#实例-13" class="headerlink" title="实例"></a>实例</h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a = np.arange(<span class="number">12</span>).reshape(<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'第一个数组：'</span>)</span><br><span class="line"><span class="keyword">print</span> (a)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'\n'</span>)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'未传递 Axis 参数。 在插入之前输入数组会被展开。'</span>)</span><br><span class="line"><span class="keyword">print</span> (np.delete(a,<span class="number">5</span>))</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'\n'</span>)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'删除第二列：'</span>)</span><br><span class="line"><span class="keyword">print</span> (np.delete(a,<span class="number">1</span>,axis = <span class="number">1</span>))</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'\n'</span>)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'包含从数组中删除的替代值的切片：'</span>)</span><br><span class="line">a = np.array([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>])</span><br><span class="line"><span class="keyword">print</span> (np.delete(a, np.s_[::<span class="number">2</span>]))</span><br><span class="line"><span class="comment">#输出结果为：</span></span><br><span class="line">第一个数组：</span><br><span class="line">[[ <span class="number">0</span>  <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span>]</span><br><span class="line"> [ <span class="number">4</span>  <span class="number">5</span>  <span class="number">6</span>  <span class="number">7</span>]</span><br><span class="line"> [ <span class="number">8</span>  <span class="number">9</span> <span class="number">10</span> <span class="number">11</span>]]</span><br><span class="line">未传递 Axis 参数。 在插入之前输入数组会被展开。</span><br><span class="line">[ <span class="number">0</span>  <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span>  <span class="number">4</span>  <span class="number">6</span>  <span class="number">7</span>  <span class="number">8</span>  <span class="number">9</span> <span class="number">10</span> <span class="number">11</span>]</span><br><span class="line">删除第二列：</span><br><span class="line">[[ <span class="number">0</span>  <span class="number">2</span>  <span class="number">3</span>]</span><br><span class="line"> [ <span class="number">4</span>  <span class="number">6</span>  <span class="number">7</span>]</span><br><span class="line"> [ <span class="number">8</span> <span class="number">10</span> <span class="number">11</span>]]</span><br><span class="line">包含从数组中删除的替代值的切片：</span><br><span class="line">[ <span class="number">2</span>  <span class="number">4</span>  <span class="number">6</span>  <span class="number">8</span>  <span class="number">10</span>]</span><br></pre></td></tr></table></figure><h3 id="（五），numpy-unique"><a href="#（五），numpy-unique" class="headerlink" title="（五），numpy.unique"></a>（五），numpy.unique</h3><blockquote><ul><li><code>numpy.unique(arr, return_index, return_inverse, return_counts)</code></li><li>arr：输入数组，如果不是一维数组则会展开</li><li>return_index：如果为true，返回新列表元素在旧列表中的位置（下标），并以列表形式储</li><li>return_inverse：如果为true，返回旧列表元素在新列表中的位置（下标），并以列表形式储</li><li>return_counts：如果为true，返回去重数组中的元素在原数组中的出现次数</li></ul></blockquote><h4 id="实例-14"><a href="#实例-14" class="headerlink" title="实例"></a>实例</h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a = np.array([<span class="number">5</span>,<span class="number">2</span>,<span class="number">6</span>,<span class="number">2</span>,<span class="number">7</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">2</span>,<span class="number">9</span>])</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'第一个数组：'</span>)</span><br><span class="line"><span class="keyword">print</span> (a)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'\n'</span>)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'第一个数组的去重值：'</span>)</span><br><span class="line">u = np.unique(a)</span><br><span class="line"><span class="keyword">print</span> (u)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'\n'</span>)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'去重数组的索引数组：'</span>)</span><br><span class="line">u,indices = np.unique(a, return_index = <span class="literal">True</span>)</span><br><span class="line"><span class="keyword">print</span> (indices)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'\n'</span>)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'我们可以看到每个和原数组下标对应的数值：'</span>)</span><br><span class="line"><span class="keyword">print</span> (a)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'\n'</span>)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'去重数组的下标：'</span>)</span><br><span class="line">u,indices = np.unique(a,return_inverse = <span class="literal">True</span>)</span><br><span class="line"><span class="keyword">print</span> (u)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'\n'</span>)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'下标为：'</span>)</span><br><span class="line"><span class="keyword">print</span> (indices)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'\n'</span>)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'使用下标重构原数组：'</span>)</span><br><span class="line"><span class="keyword">print</span> (u[indices])</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'\n'</span>)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'返回去重元素的重复数量：'</span>)</span><br><span class="line">u,indices = np.unique(a,return_counts = <span class="literal">True</span>)</span><br><span class="line"><span class="keyword">print</span> (u)</span><br><span class="line"><span class="keyword">print</span> (indices)</span><br><span class="line"><span class="comment">#输出结果为：</span></span><br><span class="line">第一个数组：</span><br><span class="line">[<span class="number">5</span> <span class="number">2</span> <span class="number">6</span> <span class="number">2</span> <span class="number">7</span> <span class="number">5</span> <span class="number">6</span> <span class="number">8</span> <span class="number">2</span> <span class="number">9</span>]</span><br><span class="line">第一个数组的去重值：</span><br><span class="line">[<span class="number">2</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span>]</span><br><span class="line">去重数组的索引数组：</span><br><span class="line">[<span class="number">1</span> <span class="number">0</span> <span class="number">2</span> <span class="number">4</span> <span class="number">7</span> <span class="number">9</span>]</span><br><span class="line">我们可以看到每个和原数组下标对应的数值：</span><br><span class="line">[<span class="number">5</span> <span class="number">2</span> <span class="number">6</span> <span class="number">2</span> <span class="number">7</span> <span class="number">5</span> <span class="number">6</span> <span class="number">8</span> <span class="number">2</span> <span class="number">9</span>]</span><br><span class="line">去重数组的下标：</span><br><span class="line">[<span class="number">2</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span>]</span><br><span class="line">下标为：</span><br><span class="line">[<span class="number">1</span> <span class="number">0</span> <span class="number">2</span> <span class="number">0</span> <span class="number">3</span> <span class="number">1</span> <span class="number">2</span> <span class="number">4</span> <span class="number">0</span> <span class="number">5</span>]</span><br><span class="line">使用下标重构原数组：</span><br><span class="line">[<span class="number">5</span> <span class="number">2</span> <span class="number">6</span> <span class="number">2</span> <span class="number">7</span> <span class="number">5</span> <span class="number">6</span> <span class="number">8</span> <span class="number">2</span> <span class="number">9</span>]</span><br><span class="line">返回去重元素的重复数量：</span><br><span class="line">[<span class="number">2</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span>]</span><br><span class="line">[<span class="number">3</span> <span class="number">2</span> <span class="number">2</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span>]</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;&amp;emsp;Numpy中的数组是多维数组，Numpy除了有很强的数组元素访问能力，还有很强的数组操作能力，以下是常用的Numpy数组操作函数：&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Python" scheme="https://keviness.github.io/tags/Python/"/>
    
      <category term="Numpy" scheme="https://keviness.github.io/tags/Numpy/"/>
    
      <category term="operations" scheme="https://keviness.github.io/tags/operations/"/>
    
  </entry>
  
</feed>

<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Keviness&#39;s Blog</title>
  
  <subtitle>for man is man and master of his fate</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://keviness.github.io/"/>
  <updated>2020-09-07T16:00:00.000Z</updated>
  <id>https://keviness.github.io/</id>
  
  <author>
    <name>keviness</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>栈的链式存储实现</title>
    <link href="https://keviness.github.io/post/add41033.html"/>
    <id>https://keviness.github.io/post/add41033.html</id>
    <published>2020-09-07T16:00:00.000Z</published>
    <updated>2020-09-07T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>&emsp;栈是一种先进后出的数据结构（First In Last Out）。它在实际编程中起到了非常重要的作用。比如，我们程序在运行中对函数的调用，就有着明显的压栈和出栈的操作，栈按存储结构分类分为链式栈和顺序栈。那么栈的链式存储如何实现呢？以下是一些实现思路，完整代码请用<a href="https://github.com/keviness/Algorithms/blob/master/Algorithms_C/DataStruct/stack_link.c" target="_blank" rel="noopener">随意门</a>~</p><h2 id="栈的链式存储实现"><a href="#栈的链式存储实现" class="headerlink" title="栈的链式存储实现"></a>栈的链式存储实现</h2><h3 id="一，概念及示意图"><a href="#一，概念及示意图" class="headerlink" title="一，概念及示意图"></a>一，概念及示意图</h3><ul><li>栈的链式存储示意图<img src="/post/undefined/stackLink.png" class title="StackLink"><h3 id="二，实现代码"><a href="#二，实现代码" class="headerlink" title="二，实现代码"></a>二，实现代码</h3><h4 id="（一）数据形式"><a href="#（一）数据形式" class="headerlink" title="（一）数据形式"></a>（一）数据形式</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">pnext</span>;</span></span><br><span class="line">&#125;NODE, * Pnode;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">stack</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    Pnode top;</span><br><span class="line">    Pnode buttom;</span><br><span class="line">&#125;STACK, * Pstack;</span><br></pre></td></tr></table></figure><h4 id="（二）初始化"><a href="#（二）初始化" class="headerlink" title="（二）初始化"></a>（二）初始化</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InitStack</span><span class="params">(Pstack <span class="built_in">stack</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">stack</span>-&gt;top = (Pnode)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(NODE));</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">stack</span>-&gt;top == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"Error in locate the memory!"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">stack</span>-&gt;buttom = <span class="built_in">stack</span>-&gt;top;</span><br><span class="line">    <span class="built_in">stack</span>-&gt;top-&gt;pnext = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="（三）检测为空"><a href="#（三）检测为空" class="headerlink" title="（三）检测为空"></a>（三）检测为空</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">StackIsEmpty</span><span class="params">(Pstack <span class="built_in">stack</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">stack</span>-&gt;top == <span class="built_in">stack</span>-&gt;buttom)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//return (stack-&gt;top)==(stack-&gt;buttom) ? true:false;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="（四）压栈操作"><a href="#（四）压栈操作" class="headerlink" title="（四）压栈操作"></a>（四）压栈操作</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">PushStack</span><span class="params">(Pstack <span class="built_in">stack</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> value;</span><br><span class="line">    Pnode pnew = (Pnode)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(NODE));</span><br><span class="line">    <span class="keyword">if</span> (pnew == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"Error in locating memory!"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Enter the data you want to save:"</span>);</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;value) != <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        EATLINE;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"Error value you input, try again:"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    EATLINE;</span><br><span class="line">    pnew-&gt;data = value;</span><br><span class="line">    pnew-&gt;pnext = <span class="built_in">stack</span>-&gt;top;</span><br><span class="line">    <span class="built_in">stack</span>-&gt;top = pnew;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"push %d into the stack successfully!\n"</span>, value);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="（五）出栈操作"><a href="#（五）出栈操作" class="headerlink" title="（五）出栈操作"></a>（五）出栈操作</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">PopStack</span><span class="params">(Pstack <span class="built_in">stack</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (StackIsEmpty(<span class="built_in">stack</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"The stack is empty!"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Pnode temp;</span><br><span class="line">    <span class="keyword">int</span> data;</span><br><span class="line">    temp = <span class="built_in">stack</span>-&gt;top;</span><br><span class="line">    data = temp-&gt;data;</span><br><span class="line">    <span class="built_in">stack</span>-&gt;top = temp-&gt;pnext;</span><br><span class="line">    <span class="built_in">free</span>(temp);</span><br><span class="line">    temp = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"pop %d from stack successfully!\n"</span>, data);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="（六）获取栈的长度"><a href="#（六）获取栈的长度" class="headerlink" title="（六）获取栈的长度"></a>（六）获取栈的长度</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">GetStackLength</span><span class="params">(Pstack <span class="built_in">stack</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (StackIsEmpty(<span class="built_in">stack</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"The stack is empty!"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    Pnode previousTop = <span class="built_in">stack</span>-&gt;top;</span><br><span class="line">    <span class="keyword">while</span> (previousTop != (<span class="built_in">stack</span>-&gt;buttom))</span><br><span class="line">    &#123;</span><br><span class="line">        count++;</span><br><span class="line">        previousTop = previousTop-&gt;pnext;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"The stack length:%d \n"</span>, count);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="（七）遍历操作"><a href="#（七）遍历操作" class="headerlink" title="（七）遍历操作"></a>（七）遍历操作</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">TraverseStack</span><span class="params">(Pstack <span class="built_in">stack</span>, <span class="keyword">void</span>(*pfun)(<span class="keyword">int</span> *data))</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (StackIsEmpty(<span class="built_in">stack</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"The stack is empty!"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Pnode previousTop = <span class="built_in">stack</span>-&gt;top;</span><br><span class="line">    <span class="keyword">while</span> (previousTop != (<span class="built_in">stack</span>-&gt;buttom))</span><br><span class="line">    &#123;</span><br><span class="line">        (*pfun)(&amp;(previousTop-&gt;data));</span><br><span class="line">        previousTop = previousTop-&gt;pnext;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;&amp;emsp;栈是一种先进后出的数据结构（First In Last Out）。它在实际编程中起到了非常重要的作用。比如，我们程序在运行中对函
      
    
    </summary>
    
    
    
      <category term="Algorithms" scheme="https://keviness.github.io/tags/Algorithms/"/>
    
      <category term="C" scheme="https://keviness.github.io/tags/C/"/>
    
      <category term="Stack" scheme="https://keviness.github.io/tags/Stack/"/>
    
      <category term="Link" scheme="https://keviness.github.io/tags/Link/"/>
    
  </entry>
  
  <entry>
    <title>常用查找算法</title>
    <link href="https://keviness.github.io/post/821c169a.html"/>
    <id>https://keviness.github.io/post/821c169a.html</id>
    <published>2020-09-06T16:00:00.000Z</published>
    <updated>2020-09-06T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>&emsp;众里寻他千百度，那人却在灯火燃珊处。怎样在一堆混乱的数据中查找到需要的数据呢？查找算法就显得很重要了，常见的查找有多种，以下是其中的一些，看实现的完整代码请用<a href="https://github.com/keviness/Algorithms/tree/master/Algorithms_C/Search" target="_blank" rel="noopener">随意门~</a></p><a id="more"></a><img src="/post/821c169a/search.png" class title="search"><h2 id="一，顺序查找"><a href="#一，顺序查找" class="headerlink" title="一，顺序查找"></a>一，顺序查找</h2><blockquote><ul><li>Sequence Search</li><li>说明：顺序查找适合于存储结构为顺序存储或链接存储的线性表。</li></ul></blockquote><h3 id="（一）基本思想"><a href="#（一）基本思想" class="headerlink" title="（一）基本思想"></a>（一）基本思想</h3><blockquote><ul><li>顺序查找也称为线形查找，属于无序查找算法。</li><li>从数据结构线形表的一端开始，顺序扫描，依次将扫描到的结点关键字与给定值k相比较，若相等则表示查找成功；若扫描结束仍没有找到关键字等于k的结点，表示查找失败。</li></ul></blockquote><h3 id="（二）复杂度分析"><a href="#（二）复杂度分析" class="headerlink" title="（二）复杂度分析　"></a>（二）复杂度分析　</h3><blockquote><ul><li>查找成功时的平均查找长度为：（假设每个数据元素的概率相等） ASL = 1/n(1+2+3+…+n) = (n+1)/2 ;</li><li>当查找不成功时，需要n+1次比较，时间复杂度为O(n);</li><li>所以，顺序查找的时间复杂度为O(n)。</li></ul></blockquote><h3 id="（三）代码实现"><a href="#（三）代码实现" class="headerlink" title="（三）代码实现"></a>（三）代码实现</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">SequenceSort</span><span class="params">(<span class="keyword">int</span> *arr, <span class="keyword">int</span> value)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;SIZE; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr[i] == value)</span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二，折半查找"><a href="#二，折半查找" class="headerlink" title="二，折半查找"></a>二，折半查找</h2><blockquote><ul><li>Binary Search</li><li>说明：元素必须是有序的，如果是无序的则要先进行排序操作。</li></ul></blockquote><h3 id="（一）基本思想-1"><a href="#（一）基本思想-1" class="headerlink" title="（一）基本思想"></a>（一）基本思想</h3><blockquote><ul><li>也称为是折半查找，属于有序查找算法。</li><li>用给定值k先与中间结点的关键字比较，中间结点把线形表分成两个子表，若相等则查找成功；若不相等，再根据k与该中间结点关键字的比较结果确定下一步查找哪个子表，这样递归进行，直到查找到或查找结束发现表中没有这样的结点。</li></ul></blockquote><h3 id="（二）复杂度分析-1"><a href="#（二）复杂度分析-1" class="headerlink" title="（二）复杂度分析"></a>（二）复杂度分析</h3><blockquote><ul><li>最坏情况下，关键词比较次数为log2(n+1)，且期望时间复杂度为O(log2n)。</li></ul></blockquote><h3 id="（三）代码实现-1"><a href="#（三）代码实现-1" class="headerlink" title="（三）代码实现"></a>（三）代码实现</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*** 非递归版本 ***/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">BinarySearch</span><span class="params">(<span class="keyword">int</span> *a, <span class="keyword">int</span> value, <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> low, high;</span><br><span class="line">    low = <span class="number">0</span>;</span><br><span class="line">    high = n<span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(low &lt;= high)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = (low+high)/<span class="number">2</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"low:%d\n"</span>, low);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"high:%d\n"</span>, high);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"middle:%d\n"</span>, mid);</span><br><span class="line">        <span class="keyword">if</span>(a[mid] == value)</span><br><span class="line">            <span class="keyword">return</span> mid;</span><br><span class="line">        <span class="keyword">if</span>(a[mid] &gt; value)</span><br><span class="line">            high = mid<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">if</span>(a[mid] &lt; value)</span><br><span class="line">            low = mid+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*** 递归实现 ***/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">BinarySort</span><span class="params">(<span class="keyword">int</span> *arr, <span class="keyword">int</span> value, <span class="keyword">int</span> low, <span class="keyword">int</span> high)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (low &gt; high)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">int</span> middle = (low+high)/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span> (arr[middle] == value)</span><br><span class="line">        <span class="keyword">return</span> middle;</span><br><span class="line">    <span class="keyword">if</span> (arr[middle] &gt; value)</span><br><span class="line">        <span class="keyword">return</span> BinarySort(arr, value, low, high<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">if</span> (arr[middle] &lt; value)</span><br><span class="line">        <span class="keyword">return</span> BinarySort(arr, value, middle+<span class="number">1</span>, high);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三，插值查找"><a href="#三，插值查找" class="headerlink" title="三，插值查找"></a>三，插值查找</h2><h3 id="（一）基本思想-2"><a href="#（一）基本思想-2" class="headerlink" title="（一）基本思想"></a>（一）基本思想</h3><blockquote><ul><li>基于二分查找算法，将查找点的选择改进为自适应选择，可以提高查找效率。当然，差值查找也属于有序查找。</li><li>mid=low+(key-a[low])/(a[high]-a[low])*(high-low)</li><li>将上述的比例参数1/2改进为自适应的，根据关键字在整个有序表中所处的位置，让mid值的变化更靠近关键字key，这样也就间接地减少了比较次数。</li></ul></blockquote><h3 id="（二）复杂度分析-2"><a href="#（二）复杂度分析-2" class="headerlink" title="（二）复杂度分析"></a>（二）复杂度分析</h3><blockquote><ul><li>查找成功或者失败的时间复杂度均为：O(log2(log2n))。</li></ul></blockquote><h3 id="（三）代码实现-2"><a href="#（三）代码实现-2" class="headerlink" title="（三）代码实现"></a>（三）代码实现</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*** 非递归版本 ***/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">InsertSearch</span><span class="params">(<span class="keyword">int</span> *arr, <span class="keyword">int</span> value, <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> low, high, mid;</span><br><span class="line">    low = <span class="number">0</span>;</span><br><span class="line">    high = n<span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(low &lt;= high)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//自适应获取应该取得的索引</span></span><br><span class="line">        mid = low + ((value-arr[low])/(arr[high]-arr[low]))*(high-low);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"low:%d\n"</span>, low);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"high:%d\n"</span>, high);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"middle:%d\n"</span>, mid);</span><br><span class="line">        <span class="keyword">if</span>(arr[mid] == value)</span><br><span class="line">            <span class="keyword">return</span> mid;</span><br><span class="line">        <span class="keyword">if</span>(arr[mid] &gt; value)</span><br><span class="line">            high = mid<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">if</span>(arr[mid] &lt; value)</span><br><span class="line">            low = mid+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*** 递归实现 ***/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">InsertSort</span><span class="params">(<span class="keyword">int</span> *arr, <span class="keyword">int</span> value, <span class="keyword">int</span> low, <span class="keyword">int</span> high)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (low &gt; high)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">int</span> middle = low + (value-arr[low])/(arr[high]-arr[low])*(high-low);</span><br><span class="line">    <span class="keyword">if</span> (arr[middle] == value)</span><br><span class="line">        <span class="keyword">return</span> middle;</span><br><span class="line">    <span class="keyword">if</span> (arr[middle] &gt; value)</span><br><span class="line">        <span class="keyword">return</span> InsertSort(arr, value, low, high<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">if</span> (arr[middle] &lt; value)</span><br><span class="line">        <span class="keyword">return</span> InsertSort(arr, value, middle+<span class="number">1</span>, high);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="四，分块查找"><a href="#四，分块查找" class="headerlink" title="四，分块查找"></a>四，分块查找</h2><h3 id="（一）基本思想-3"><a href="#（一）基本思想-3" class="headerlink" title="（一）基本思想"></a>（一）基本思想</h3><blockquote><ul><li>也叫索引顺序查找，算法实现除了需要查找表本身之外，还需要根据查找表建立一个索引表。</li><li>建立的索引表要求按照关键字进行升序排序，查找表要么整体有序，要么分块有序。 分块有序指的是第二个子表中所有关键字都要大于第一个子表中的最大关键字，第三个子表的所有关键字都要大于第二个子表中 的最大关键字，依次类推。</li></ul></blockquote><h3 id="（二）复杂度分析-3"><a href="#（二）复杂度分析-3" class="headerlink" title="（二）复杂度分析"></a>（二）复杂度分析</h3><blockquote><ul><li>分块查找算法的运行效率受两部分影响：查找块的操作和块内查找的操作。</li><li>查找块的操作可以采用顺序查找，也可以采用折半查 找（更优）；块内查找的操作采用顺序查找的方式。</li><li>相比于折半查找，分块查找时间效率上更低一些；相比于顺序查找，由于在子表中进行，比较的子表个数会不同程度的减少，所有分块查找算法会更优</li><li>总体来说，分块查找算法的效率介于顺序查找和折半查找之间。</li></ul></blockquote><h3 id="（三）代码实现-3"><a href="#（三）代码实现-3" class="headerlink" title="（三）代码实现"></a>（三）代码实现</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">search</span><span class="params">(<span class="keyword">int</span> key, <span class="keyword">int</span> a[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, startValue;</span><br><span class="line">    i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (i&lt;<span class="number">3</span> &amp;&amp; key&gt;newIndex[i].key) </span><br><span class="line">    &#123; </span><br><span class="line">        <span class="comment">//确定在哪个块中，遍历每个块，确定 key 在哪个块中</span></span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (i&gt;=<span class="number">3</span>) </span><br><span class="line">    &#123; </span><br><span class="line">        <span class="comment">//大于分得的块数，则返回 0</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    startValue = newIndex[i].start; <span class="comment">//startValue 等于块范围的起始值</span></span><br><span class="line">    <span class="keyword">while</span> (startValue &lt;= startValue+<span class="number">5</span> &amp;&amp; a[startValue]!=key)</span><br><span class="line">    &#123;</span><br><span class="line">        startValue++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (startValue&gt;startValue+<span class="number">5</span>) </span><br><span class="line">    &#123; </span><br><span class="line">        <span class="comment">//如果大于块范围的结束值，则说明没有要查找的数</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> startValue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="五，斐波那契查找"><a href="#五，斐波那契查找" class="headerlink" title="五，斐波那契查找"></a>五，斐波那契查找</h2><h3 id="（一）基本思想-4"><a href="#（一）基本思想-4" class="headerlink" title="（一）基本思想"></a>（一）基本思想</h3><blockquote><ul><li>也是二分查找的一种提升算法，通过运用黄金比例的概念在数列中选择查找点进行查找，提高查找效率。同样地，斐波那契查找也属于一种有序查找算法。<br>斐波那契查找与折半查找很相似，他是根据斐波那契序列的特点对有序表进行分割的。他要求开始表中记录的个数为某个斐波那契数小1，及n=F(k)-1;</li></ul></blockquote><blockquote><ul><li>开始将k值与第F(k-1)位置的记录进行比较(及mid=low+F(k-1)-1),比较结果也分为三种：</li><li>1）相等，mid位置的元素即为所求</li><li>2）&gt;，low=mid+1,k-=2;</li><li>说明：low=mid+1说明待查找的元素在[mid+1,high]范围内，k-=2 说明范围[mid+1,high]内的元素个数为n-(F(k-1))= Fk-1-F(k-1)=Fk-F(k-1)-1=F(k-2)-1个，所以可以递归的应用斐波那契查找。</li><li>3）&lt;，high=mid-1,k-=1。</li><li>说明：low=mid+1说明待查找的元素在[low,mid-1]范围内，k-=1 说明范围[low,mid-1]内的元素个数为F(k-1)-1个，所以可以递归 的应用斐波那契查找。</li></ul></blockquote><h3 id="（二）复杂度分析-4"><a href="#（二）复杂度分析-4" class="headerlink" title="（二）复杂度分析"></a>（二）复杂度分析</h3><blockquote><ul><li>最坏情况下，时间复杂度为O(log 2 n)，且其期望复杂度也为O(log 2 n)。</li></ul></blockquote><h3 id="（三）代码实现-4"><a href="#（三）代码实现-4" class="headerlink" title="（三）代码实现"></a>（三）代码实现</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*构造一个斐波那契数组*/</span> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Fibonacci</span><span class="params">(<span class="keyword">int</span> * F)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    F[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    F[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>; i&lt;max_size; ++i)</span><br><span class="line">        F[i] = F[i<span class="number">-1</span>] + F[i<span class="number">-2</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*定义斐波那契查找法*/</span>  </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">FibonacciSearch</span><span class="params">(<span class="keyword">int</span> *a, <span class="keyword">int</span> n, <span class="keyword">int</span> key)</span>  </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> low = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> high = n<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">int</span> F[max_size];</span><br><span class="line">    Fibonacci(F);   <span class="comment">//构造一个斐波那契数组F </span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> k = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(n &gt; F[k]<span class="number">-1</span>) <span class="comment">//计算n位于斐波那契数列的位置</span></span><br><span class="line">        ++k;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">int</span> temp[F[k]<span class="number">-1</span>];<span class="comment">//将数组a扩展到F[k]-1的长度</span></span><br><span class="line">    <span class="built_in">memcpy</span>(temp, a, n*<span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=n; i&lt;F[k]<span class="number">-1</span>; ++i)</span><br><span class="line">        temp[i] = a[n<span class="number">-1</span>];</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">while</span>(low &lt;= high)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = low + F[k<span class="number">-1</span>] - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(key &lt; temp[mid])</span><br><span class="line">        &#123;</span><br><span class="line">            high = mid - <span class="number">1</span>;</span><br><span class="line">            k-=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(key &gt; temp[mid])</span><br><span class="line">        &#123;</span><br><span class="line">            low = mid + <span class="number">1</span>;</span><br><span class="line">            k-=<span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(mid &lt; n)</span><br><span class="line">                <span class="keyword">return</span> mid; <span class="comment">//若相等则说明mid即为查找到的位置</span></span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">return</span> n<span class="number">-1</span>; <span class="comment">//若mid&gt;=n则说明是扩展的数值,返回n-1</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;&amp;emsp;众里寻他千百度，那人却在灯火燃珊处。怎样在一堆混乱的数据中查找到需要的数据呢？查找算法就显得很重要了，常见的查找有多种，以下是其中的一些，看实现的完整代码请用&lt;a href=&quot;https://github.com/keviness/Algorithms/tree/master/Algorithms_C/Search&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;随意门~&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Algorithms" scheme="https://keviness.github.io/tags/Algorithms/"/>
    
      <category term="C" scheme="https://keviness.github.io/tags/C/"/>
    
      <category term="Search" scheme="https://keviness.github.io/tags/Search/"/>
    
  </entry>
  
  <entry>
    <title>常见排序算法</title>
    <link href="https://keviness.github.io/post/c90bdf37.html"/>
    <id>https://keviness.github.io/post/c90bdf37.html</id>
    <published>2020-09-04T16:00:00.000Z</published>
    <updated>2020-09-04T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>&emsp;人类社会需要秩序，顺序从某个角度而言是秩序的一种。在算法的世界里，顺序具有重要地位。那该将一些混乱无序的数据变成有序的呢？以下是一些经典算法实现，完整代码请用<a href="https://github.com/keviness/Algorithms/tree/master/Algorithms_C/Sorts" target="_blank" rel="noopener">神奇的传送门~</a>。</p><a id="more"></a><h2 id="常见排序"><a href="#常见排序" class="headerlink" title="常见排序"></a>常见排序</h2><h4 id="1，排序总结图"><a href="#1，排序总结图" class="headerlink" title="1，排序总结图"></a>1，排序总结图</h4><img src="/post/c90bdf37/sortPict.png" class title="sortPict"><h4 id="2，排序算法分析图"><a href="#2，排序算法分析图" class="headerlink" title="2，排序算法分析图"></a>2，排序算法分析图</h4><img src="/post/c90bdf37/sortAnalysis.png" class title="sortAnalysis"><h3 id="一，插入排序"><a href="#一，插入排序" class="headerlink" title="一，插入排序"></a>一，插入排序</h3><blockquote><p>Insertion Sort</p></blockquote><h4 id="（一）直接插入排序"><a href="#（一）直接插入排序" class="headerlink" title="（一）直接插入排序"></a>（一）直接插入排序</h4><blockquote><p>Straight Insertion Sort</p></blockquote><h5 id="基本思想"><a href="#基本思想" class="headerlink" title="基本思想"></a>基本思想</h5><blockquote><ul><li>将一个记录插入到已排序好的有序表中，从而得到一个新，记录数增1的有序表。即：先将序列的第1个记录看成是一个有序的子序列，然后从第2个记录逐个进行插入，直至整个序列有序为止。</li></ul></blockquote><h5 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">StraightInsertionSort</span><span class="params">(<span class="keyword">int</span> *arr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    for (i=2; i&lt;SIZE; i++)</span></span><br><span class="line"><span class="comment">    &#123;</span></span><br><span class="line"><span class="comment">        if (arr[i] &lt; arr[i-1])</span></span><br><span class="line"><span class="comment">        &#123;</span></span><br><span class="line"><span class="comment">            arr[0] = arr[i];  //设置数组首元素为哨兵</span></span><br><span class="line"><span class="comment">            for (j=i-1; arr[j]&gt;arr[0]; j--)</span></span><br><span class="line"><span class="comment">            &#123;</span></span><br><span class="line"><span class="comment">                arr[j+1] = arr[j];</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">            arr[j+1] = arr[0];</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">for</span> (i=<span class="number">1</span>; i&lt;SIZE; i++) <span class="comment">//首元素从第二个开始</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr[i] &lt; arr[i<span class="number">-1</span>])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> value = arr[i];  <span class="comment">//没有设置数组首元素为哨兵</span></span><br><span class="line">            <span class="keyword">for</span> (j=i<span class="number">-1</span>; j&gt;=<span class="number">0</span> &amp;&amp; arr[j]&gt;value; j--)</span><br><span class="line">            &#123;</span><br><span class="line">                arr[j+<span class="number">1</span>] = arr[j];</span><br><span class="line">            &#125;</span><br><span class="line">            arr[j+<span class="number">1</span>] = value;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="（二）折半排序"><a href="#（二）折半排序" class="headerlink" title="（二）折半排序"></a>（二）折半排序</h4><h5 id="基本思想-1"><a href="#基本思想-1" class="headerlink" title="基本思想"></a>基本思想</h5><blockquote><ul><li>在直接插入排序的基础上，在有序的子序列中运用折半查找确定插入位置。</li></ul></blockquote><h5 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BInsertSort</span><span class="params">(<span class="keyword">int</span> *arr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j, m, value, low, high;</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">1</span>; i&lt;SIZE; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        low = <span class="number">0</span>;</span><br><span class="line">        high = i<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">if</span> (arr[i] &lt; arr[i<span class="number">-1</span>])</span><br><span class="line">        &#123;</span><br><span class="line">            value = arr[i];</span><br><span class="line">            <span class="keyword">while</span> (low &lt;= high)</span><br><span class="line">            &#123;</span><br><span class="line">                m = (low+high)/<span class="number">2</span>;</span><br><span class="line">                <span class="keyword">if</span> (arr[m]&gt;value) </span><br><span class="line">                    high = m<span class="number">-1</span>;</span><br><span class="line">                <span class="keyword">else</span> </span><br><span class="line">                    low = m+<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (j=i<span class="number">-1</span>; j&gt;=high+<span class="number">1</span>; j--)</span><br><span class="line">            &#123;</span><br><span class="line">                arr[j+<span class="number">1</span>] = arr[j];</span><br><span class="line">            &#125;</span><br><span class="line">            arr[j+<span class="number">1</span>] = value; <span class="comment">//arr[high+1] = value;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="（三）希尔排序"><a href="#（三）希尔排序" class="headerlink" title="（三）希尔排序"></a>（三）希尔排序</h4><h5 id="基本思想-2"><a href="#基本思想-2" class="headerlink" title="基本思想"></a>基本思想</h5><blockquote><ul><li>先将整个待排序的记录序列分割成为若干子序列分别进行直接插入排序，待整个序列中的记录“基本有序”时，再对全体记录进行依次直接插入排序。</li></ul></blockquote><h5 id="代码实现-2"><a href="#代码实现-2" class="headerlink" title="代码实现"></a>代码实现</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">shellSort</span><span class="params">(<span class="keyword">int</span> *arr, <span class="keyword">int</span> incresement)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i=incresement; i&lt;SIZE; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr[i] &lt; arr[i-incresement])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> value = arr[i];</span><br><span class="line">            <span class="keyword">for</span> (j=i-incresement; j&gt;=<span class="number">0</span>&amp;&amp;arr[j]&gt;value; j=j-incresement)</span><br><span class="line">            &#123;</span><br><span class="line">                arr[j+incresement] = arr[j];</span><br><span class="line">            &#125;</span><br><span class="line">            arr[j+incresement] = value;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二，选择排序"><a href="#二，选择排序" class="headerlink" title="二，选择排序"></a>二，选择排序</h3><blockquote><p>Selection Sort</p></blockquote><h4 id="（一）简单选择排序"><a href="#（一）简单选择排序" class="headerlink" title="（一）简单选择排序"></a>（一）简单选择排序</h4><blockquote><p>Simple Selection Sort</p></blockquote><h5 id="基本思想-3"><a href="#基本思想-3" class="headerlink" title="基本思想"></a>基本思想</h5><blockquote><ul><li>在要排序的一组数中，选出最小（或者最大）的一个数与第1个位置的数交换；然后在剩下的数当中再找最小（或者最大）的与第2个位置的数交换，依次类推，直到第n-1个元素（倒数第二个数）和第n个元素（最后一个数）比较为止。</li></ul></blockquote><h5 id="代码实现-3"><a href="#代码实现-3" class="headerlink" title="代码实现"></a>代码实现</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SimpleSelectSort</span><span class="params">(<span class="keyword">int</span> *arr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j, <span class="built_in">min</span>, temp;</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;SIZE<span class="number">-1</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">min</span> = i;</span><br><span class="line">        <span class="keyword">for</span> (j=i+<span class="number">1</span>; j&lt;SIZE; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[<span class="built_in">min</span>]&gt;arr[j])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">min</span> = j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">min</span> != i)</span><br><span class="line">        &#123;</span><br><span class="line">            temp = arr[<span class="built_in">min</span>];</span><br><span class="line">            arr[<span class="built_in">min</span>] = arr[i];</span><br><span class="line">            arr[i] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="（二）堆排序"><a href="#（二）堆排序" class="headerlink" title="（二）堆排序"></a>（二）堆排序</h4><blockquote><p>Heap Sort</p></blockquote><h5 id="基本思想-4"><a href="#基本思想-4" class="headerlink" title="基本思想"></a>基本思想</h5><blockquote><ul><li>堆的定义如下：具有n个元素的序列（k1,k2,…,kn),当且仅当满足ai&gt;=a2i+1,ai&gt;=a2i或者ai&lt;=a2i+1,ai&lt;=a2i时称之为堆。</li><li>可以将堆看做是一个完全二叉树。并且，每个结点的值都大于等于其左右孩子结点的值，称为大顶堆；或者每个结点的值都小于等于其左右孩子结点的值，称为小顶堆。</li><li>将待排序列表构造成一个最大堆，作为初始无序堆（即初始无序列表）</li><li>将堆顶元素（最大值）与堆尾元素互换</li><li>将该堆（无序区）尺寸缩小1，并对缩小后的堆重新调整为最大堆形式</li><li>重复上述步骤，直至堆（无序区）的尺寸变为1，此时排序完成</li></ul></blockquote><h5 id="代码实现-4"><a href="#代码实现-4" class="headerlink" title="代码实现"></a>代码实现</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">heapify</span><span class="params">(<span class="keyword">int</span> *tree, <span class="keyword">int</span> n, <span class="keyword">int</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (i &gt;= n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> c1 = i*<span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> c2 = i*<span class="number">2</span> + <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">int</span> <span class="built_in">max</span> = i;</span><br><span class="line">    <span class="keyword">if</span> (c1&lt;n &amp;&amp; tree[c1]&gt;tree[<span class="built_in">max</span>])</span><br><span class="line">        <span class="built_in">max</span> = c1;</span><br><span class="line">    <span class="keyword">if</span> (c2&lt;n &amp;&amp; tree[c2]&gt;tree[<span class="built_in">max</span>])</span><br><span class="line">        <span class="built_in">max</span> = c2;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">max</span> != i)</span><br><span class="line">    &#123;</span><br><span class="line">        swap(tree, i, <span class="built_in">max</span>);</span><br><span class="line">        heapify(tree, n, <span class="built_in">max</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">buildHeap</span><span class="params">(<span class="keyword">int</span> *tree, <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> last_node = n<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">int</span> last_node_parent = (last_node<span class="number">-1</span>)/<span class="number">2</span>; </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=last_node_parent; i&gt;=<span class="number">0</span>; i--)</span><br><span class="line">    &#123;</span><br><span class="line">        heapify(tree, n, i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">heapSort</span><span class="params">(<span class="keyword">int</span> *tree, <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    buildHeap(tree, n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=n<span class="number">-1</span>; i&gt;=<span class="number">0</span>; i--)</span><br><span class="line">    &#123;</span><br><span class="line">        swap(tree, i, <span class="number">0</span>);</span><br><span class="line">        heapify(tree, i, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> *tree, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> temp = tree[i];</span><br><span class="line">    tree[i] = tree[j];</span><br><span class="line">    tree[j] = temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="三，交换排序"><a href="#三，交换排序" class="headerlink" title="三，交换排序"></a>三，交换排序</h3><blockquote><p>Swap Sort</p></blockquote><h4 id="（一）冒泡排序"><a href="#（一）冒泡排序" class="headerlink" title="（一）冒泡排序"></a>（一）冒泡排序</h4><blockquote><p>Bubble Sort</p></blockquote><h5 id="基本思想-5"><a href="#基本思想-5" class="headerlink" title="基本思想"></a>基本思想</h5><blockquote><ul><li>重复的遍历（走过）待排序的一组数字（通常是列表形式），依次比较两个相邻的元素（数字），若它们的顺序错误则将它们调换一下位置，直至没有元素再需要交换为止。</li><li>每遍历一次列表，最大（或最小）的元素会经过交换一点点”浮“到列表的一端（顶端），所以形象的称这个算法为冒泡算法。</li></ul></blockquote><h5 id="代码实现-5"><a href="#代码实现-5" class="headerlink" title="代码实现"></a>代码实现</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BubbleSort</span><span class="params">(<span class="keyword">int</span> *arr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j, temp, flag;</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;SIZE<span class="number">-1</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        flag = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (j=<span class="number">0</span>; j&lt;SIZE-i<span class="number">-1</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[j] &gt; arr[j+<span class="number">1</span>])</span><br><span class="line">            &#123;</span><br><span class="line">                temp = arr[j];</span><br><span class="line">                arr[j] = arr[j+<span class="number">1</span>];</span><br><span class="line">                arr[j+<span class="number">1</span>] = temp;</span><br><span class="line">                flag = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (flag == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="（二）快速排序"><a href="#（二）快速排序" class="headerlink" title="（二）快速排序"></a>（二）快速排序</h4><blockquote><p>Quick Sort</p></blockquote><h5 id="基本思想-6"><a href="#基本思想-6" class="headerlink" title="基本思想"></a>基本思想</h5><blockquote><ul><li>通过一趟排序将待排序列表分割成独立的两部分，其中一部分的所有元素都比另一部分小，然后再按此方法将独立的两部分分别继续重复进行此操作，这个过程我们可以通过递归实现，从而达到最终将整个列表排序的目的。</li></ul></blockquote><h5 id="代码实现-6"><a href="#代码实现-6" class="headerlink" title="代码实现"></a>代码实现</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">quicksort</span><span class="params">(<span class="keyword">int</span> *arr, <span class="keyword">int</span> low, <span class="keyword">int</span> high)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> pos;</span><br><span class="line">    <span class="keyword">if</span> (low &lt; high)</span><br><span class="line">    &#123;</span><br><span class="line">        pos = findpos(arr, low, high);</span><br><span class="line">        quicksort(arr, low, pos<span class="number">-1</span>);</span><br><span class="line">        quicksort(arr, pos+<span class="number">1</span>, high);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">findpos</span><span class="params">(<span class="keyword">int</span> *arr, <span class="keyword">int</span> low, <span class="keyword">int</span> high)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> value = arr[low];</span><br><span class="line">    <span class="keyword">while</span> (low &lt; high)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span> (low&lt;high &amp;&amp; arr[high]&gt;=value)</span><br><span class="line">        &#123;</span><br><span class="line">            high--;</span><br><span class="line">        &#125;</span><br><span class="line">        arr[low] = arr[high];</span><br><span class="line">        <span class="keyword">while</span> (low&lt;high &amp;&amp; arr[low]&lt;=value)</span><br><span class="line">        &#123;</span><br><span class="line">            low++;</span><br><span class="line">        &#125;</span><br><span class="line">        arr[high] = arr[low];</span><br><span class="line">    &#125;</span><br><span class="line">    arr[low] = value;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> low;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="四，归并排序"><a href="#四，归并排序" class="headerlink" title="四，归并排序"></a>四，归并排序</h3><blockquote><p>Merge Sort</p></blockquote><h5 id="基本思想-7"><a href="#基本思想-7" class="headerlink" title="基本思想"></a>基本思想</h5><blockquote><ul><li>是将两个（或两个以上）有序表合并成一个新的有序表，即把待排序序列分为若干个子序列，每个子序列是有序的。然后再把有序子序列合并为整体有序序列。</li></ul></blockquote><h5 id="代码实现-7"><a href="#代码实现-7" class="headerlink" title="代码实现"></a>代码实现</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Merge</span><span class="params">(<span class="keyword">int</span> *arr, <span class="keyword">int</span> left, <span class="keyword">int</span> middle, <span class="keyword">int</span> right)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> left_size = middle-left;</span><br><span class="line">    <span class="keyword">int</span> right_size = right-middle+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> left_arr[left_size];</span><br><span class="line">    <span class="keyword">int</span> right_arr[right_size];</span><br><span class="line">    <span class="keyword">int</span> i, j, k;</span><br><span class="line">    <span class="keyword">for</span> (i=left; i&lt;middle; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        left_arr[i-left] = arr[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (j=middle; j&lt;=right; j++)</span><br><span class="line">    &#123;</span><br><span class="line">        right_arr[j-middle] = arr[j];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//对两个子数组元素进行合并</span></span><br><span class="line">    i=<span class="number">0</span>; j=<span class="number">0</span>; k=left;</span><br><span class="line">    <span class="keyword">while</span> (i&lt;left_size &amp;&amp; j&lt;right_size)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (left_arr[i] &lt; right_arr[j])</span><br><span class="line">        &#123;</span><br><span class="line">            arr[k] = left_arr[i];</span><br><span class="line">            i++;</span><br><span class="line">            k++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            arr[k] = right_arr[j];</span><br><span class="line">            j++;</span><br><span class="line">            k++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//将剩余数据填入源数组中</span></span><br><span class="line">    <span class="keyword">while</span> (i &lt; left_size)</span><br><span class="line">    &#123;</span><br><span class="line">        arr[k] = left_arr[i];</span><br><span class="line">        i++;</span><br><span class="line">        k++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (j &lt; right_size)</span><br><span class="line">    &#123;</span><br><span class="line">        arr[k] = right_arr[j];</span><br><span class="line">        j++;</span><br><span class="line">        k++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MergeSort</span><span class="params">(<span class="keyword">int</span> *arr, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (left &gt;= right)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> middle = (left+right)/<span class="number">2</span>;</span><br><span class="line">        MergeSort(arr, left, middle);</span><br><span class="line">        MergeSort(arr, middle+<span class="number">1</span>, right);</span><br><span class="line">        Merge(arr, left, middle+<span class="number">1</span>, right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;&amp;emsp;人类社会需要秩序，顺序从某个角度而言是秩序的一种。在算法的世界里，顺序具有重要地位。那该将一些混乱无序的数据变成有序的呢？以下是一些经典算法实现，完整代码请用&lt;a href=&quot;https://github.com/keviness/Algorithms/tree/master/Algorithms_C/Sorts&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;神奇的传送门~&lt;/a&gt;。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Algorithms" scheme="https://keviness.github.io/tags/Algorithms/"/>
    
      <category term="C" scheme="https://keviness.github.io/tags/C/"/>
    
      <category term="Sort" scheme="https://keviness.github.io/tags/Sort/"/>
    
  </entry>
  
  <entry>
    <title>线性表：数组的实现</title>
    <link href="https://keviness.github.io/post/ab15e1cb.html"/>
    <id>https://keviness.github.io/post/ab15e1cb.html</id>
    <published>2020-09-02T16:00:00.000Z</published>
    <updated>2020-09-02T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>&emsp;数组在C语言中已经存在了，那么如何实现一个自定义的数组呢？以下是一些实现思路，完整代码请走<a href="https://github.com/keviness/Algorithms/blob/master/Algorithms_C/DataStruct/array.c" target="_blank" rel="noopener">神奇的传送门~</a></p><a id="more"></a><h2 id="线性表：数组的实现"><a href="#线性表：数组的实现" class="headerlink" title="线性表：数组的实现"></a>线性表：数组的实现</h2><h3 id="一，概念及示意图"><a href="#一，概念及示意图" class="headerlink" title="一，概念及示意图"></a>一，概念及示意图</h3><ul><li>数组的链式存储示意图<br><img src="/post/queue1.png" alt="数组链表存储示意图"></li></ul><h3 id="二，实现代码"><a href="#二，实现代码" class="headerlink" title="二，实现代码"></a>二，实现代码</h3><h4 id="（一）数据形式"><a href="#（一）数据形式" class="headerlink" title="（一）数据形式"></a>（一）数据形式</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">array</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> count;</span><br><span class="line">    <span class="keyword">int</span> length;</span><br><span class="line">    <span class="keyword">int</span> *pint;</span><br><span class="line">&#125;Array;</span><br></pre></td></tr></table></figure><h4 id="（二）初始化"><a href="#（二）初始化" class="headerlink" title="（二）初始化"></a>（二）初始化</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InitializeArray</span><span class="params">(Array *parr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    parr-&gt;pint = (<span class="keyword">int</span> *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span>)*(parr-&gt;length));</span><br><span class="line">    <span class="keyword">if</span> ((parr-&gt;pint) == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"Can\'t locate the memory!"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">    &#125;</span><br><span class="line">    parr-&gt;count = <span class="number">0</span>;</span><br><span class="line">    parr-&gt;length = MAXSIZE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="（三）检测为空或已满"><a href="#（三）检测为空或已满" class="headerlink" title="（三）检测为空或已满"></a>（三）检测为空或已满</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">ArrayIsFull</span><span class="params">(<span class="keyword">const</span> Array *parr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (parr-&gt;count)==(parr-&gt;length)? <span class="literal">true</span>:<span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">ArrayIsEmpty</span><span class="params">(<span class="keyword">const</span> Array *parr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (parr-&gt;count) == <span class="number">0</span>? <span class="literal">true</span>:<span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="（四）追加操作"><a href="#（四）追加操作" class="headerlink" title="（四）追加操作"></a>（四）追加操作</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">AppendItem</span><span class="params">(Array *parr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> item;</span><br><span class="line">    <span class="keyword">if</span> (ArrayIsFull(parr))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"The array is full!"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Enter the item you want to append:"</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;item);</span><br><span class="line">    EATLINE;</span><br><span class="line">    (parr-&gt;pint)[parr-&gt;count] = item;</span><br><span class="line">    (parr-&gt;count)++;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="（五）插入操作"><a href="#（五）插入操作" class="headerlink" title="（五）插入操作"></a>（五）插入操作</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">InsertItem</span><span class="params">(Array *parr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> pos;</span><br><span class="line">    <span class="keyword">int</span> item;</span><br><span class="line">    <span class="keyword">if</span> (ArrayIsFull(parr))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"The array is full!"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Enter the index you want to insert:"</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;pos);</span><br><span class="line">    EATLINE;</span><br><span class="line">    <span class="keyword">if</span> (pos&lt;<span class="number">1</span> || pos&gt;(parr-&gt;count)+<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"Error pos!"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Enter the item you want to insert:"</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;item);</span><br><span class="line">    EATLINE;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=(parr-&gt;count<span class="number">-1</span>); i&gt;=(pos<span class="number">-1</span>); i--)</span><br><span class="line">    &#123;</span><br><span class="line">        (parr-&gt;pint)[i+<span class="number">1</span>] = (parr-&gt;pint)[i];</span><br><span class="line">    &#125;</span><br><span class="line">    (parr-&gt;pint)[pos<span class="number">-1</span>] = item;</span><br><span class="line">    (parr-&gt;count)++;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="（六）删除操作"><a href="#（六）删除操作" class="headerlink" title="（六）删除操作"></a>（六）删除操作</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">DeleteItem</span><span class="params">(Array *parr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> pos;</span><br><span class="line">    <span class="keyword">int</span> item;</span><br><span class="line">    <span class="keyword">if</span> (ArrayIsEmpty(parr))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"The array is empty!"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Enter the index of the item you want to delete:"</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;pos);</span><br><span class="line">    EATLINE;</span><br><span class="line">    <span class="keyword">if</span> (pos&lt;<span class="number">1</span> || pos&gt;(parr-&gt;count))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"The index out of range!"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    item = (parr-&gt;pint)[pos<span class="number">-1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=pos; i&lt;(parr-&gt;count); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        (parr-&gt;pint)[i<span class="number">-1</span>] = (parr-&gt;pint)[i];</span><br><span class="line">    &#125;</span><br><span class="line">    parr-&gt;count--;</span><br><span class="line">    <span class="keyword">return</span> item;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="（七）获取元素"><a href="#（七）获取元素" class="headerlink" title="（七）获取元素"></a>（七）获取元素</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">GetItem</span><span class="params">(<span class="keyword">const</span> Array *parr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> pos;</span><br><span class="line">    <span class="keyword">int</span> result;</span><br><span class="line">    <span class="keyword">if</span> (ArrayIsEmpty(parr))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"The Array is empty!"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Enter the index of element you want to get:"</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;pos);</span><br><span class="line">    EATLINE;</span><br><span class="line">    result = (parr-&gt;pint)[pos];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;&amp;emsp;数组在C语言中已经存在了，那么如何实现一个自定义的数组呢？以下是一些实现思路，完整代码请走&lt;a href=&quot;https://github.com/keviness/Algorithms/blob/master/Algorithms_C/DataStruct/array.c&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;神奇的传送门~&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Algorithms" scheme="https://keviness.github.io/tags/Algorithms/"/>
    
      <category term="C" scheme="https://keviness.github.io/tags/C/"/>
    
      <category term="Array" scheme="https://keviness.github.io/tags/Array/"/>
    
      <category term="List" scheme="https://keviness.github.io/tags/List/"/>
    
  </entry>
  
  <entry>
    <title>线性表：链表的实现</title>
    <link href="https://keviness.github.io/post/c206fe66.html"/>
    <id>https://keviness.github.io/post/c206fe66.html</id>
    <published>2020-08-31T16:00:00.000Z</published>
    <updated>2020-08-31T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>&emsp;转眼就到九月份了，数据结构的工作还未结束，任重而道远啊，加油~<br>&emsp;线性表是比较常见的数据结构，按存储方式分，有链表（链式存储）和数组（顺序存储）两种，那么链表如何实现呢？以下是一些个实现思路，完整代码请用<a href="https://github.com/keviness/Algorithms/blob/master/Algorithms_C/DataStruct/list.c" target="_blank" rel="noopener">神奇的传送门</a>~</p><a id="more"></a><h3 id="一，概念及示意图"><a href="#一，概念及示意图" class="headerlink" title="一，概念及示意图"></a>一，概念及示意图</h3><h4 id="（一）数据结构分类图"><a href="#（一）数据结构分类图" class="headerlink" title="（一）数据结构分类图"></a>（一）数据结构分类图</h4><img src="/post/c206fe66/struct.png" class title="struct"><h4 id="（二）线性表示意图"><a href="#（二）线性表示意图" class="headerlink" title="（二）线性表示意图"></a>（二）线性表示意图</h4><img src="/post/c206fe66/xianxing.png" class title="SequenceList"><h3 id="二，实现代码"><a href="#二，实现代码" class="headerlink" title="二，实现代码"></a>二，实现代码</h3><h4 id="（一）数据形式"><a href="#（一）数据形式" class="headerlink" title="（一）数据形式"></a>（一）数据形式</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">pnext</span>;</span></span><br><span class="line">&#125;List, *Plist;</span><br></pre></td></tr></table></figure><h4 id="（二）初始化"><a href="#（二）初始化" class="headerlink" title="（二）初始化"></a>（二）初始化</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InitList</span><span class="params">(PQUEUE <span class="built_in">queue</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;count; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        pnew = (Plist)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(List));</span><br><span class="line">        <span class="keyword">if</span> (pnew == <span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">"Locate mmemory error!"</span>);</span><br><span class="line">            <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Enter the %d data:"</span>, i+<span class="number">1</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;item);</span><br><span class="line">        EATLINE;</span><br><span class="line">        pnew-&gt;data = item;</span><br><span class="line">        pnew-&gt;pnext = <span class="literal">NULL</span>;</span><br><span class="line">        pprevious-&gt;pnext = pnew;</span><br><span class="line">        pprevious = pnew;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> phead;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="（三）检测为空或已满"><a href="#（三）检测为空或已满" class="headerlink" title="（三）检测为空或已满"></a>（三）检测为空或已满</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">ListIsEmpty</span><span class="params">(Plist phead)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (phead-&gt;pnext == <span class="literal">NULL</span>) ? <span class="literal">true</span>:<span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="（四）追加操作"><a href="#（四）追加操作" class="headerlink" title="（四）追加操作"></a>（四）追加操作</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">AppendItem</span><span class="params">(Plist phead)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Plist pnew;</span><br><span class="line">    Plist p = phead;</span><br><span class="line">    <span class="keyword">int</span> item;</span><br><span class="line">    <span class="keyword">while</span> (p-&gt;pnext != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        p = p-&gt;pnext;</span><br><span class="line">    &#125;</span><br><span class="line">    pnew = (Plist)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(List));</span><br><span class="line">    <span class="keyword">if</span> (pnew == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"Locate memory error!"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Enter the data you want to append:"</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;item);</span><br><span class="line">    EATLINE;</span><br><span class="line">    pnew-&gt;data = item;</span><br><span class="line">    pnew-&gt;pnext = <span class="literal">NULL</span>;</span><br><span class="line">    p-&gt;pnext = pnew;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Enter the %d successfully!\n"</span>, item);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="（五）插入操作"><a href="#（五）插入操作" class="headerlink" title="（五）插入操作"></a>（五）插入操作</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">InsertItem</span><span class="params">(Plist phead)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> pos, data;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    Plist p = phead;</span><br><span class="line">    Plist pnew;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Enter the index you want to insert:"</span>);</span><br><span class="line">    <span class="keyword">while</span> ((<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;pos) != <span class="number">1</span>) &amp;&amp; pos&lt;<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        EATLINE;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"The error pos value, try again:"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    EATLINE;</span><br><span class="line">    <span class="keyword">while</span> (i&lt;pos<span class="number">-1</span> &amp;&amp; p!=<span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        p = p-&gt;pnext;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (i&gt;pos<span class="number">-1</span> &amp;&amp; p==<span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"The pos input error!"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    pnew = (Plist)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(List));</span><br><span class="line">    <span class="keyword">if</span> (pnew == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"Can\'t locate the memory!"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Enter the data you want to save:"</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;data);</span><br><span class="line">    EATLINE;</span><br><span class="line">    pnew-&gt;data = data;</span><br><span class="line">    </span><br><span class="line">    pnew-&gt;pnext = p-&gt;pnext;</span><br><span class="line">    p-&gt;pnext = pnew;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"successfully insert %d \n"</span>, data);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="（六）删除操作"><a href="#（六）删除操作" class="headerlink" title="（六）删除操作"></a>（六）删除操作</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">DeleteItem</span><span class="params">(Plist phead)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> pos, data, i, value;</span><br><span class="line">    Plist pnew, p, q;</span><br><span class="line">    p = phead;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Enter the pos you want to delete:"</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> ((<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;pos) != <span class="number">1</span>) &amp;&amp; pos&lt;<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        EATLINE;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"The error pos value, try again:"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    EATLINE;</span><br><span class="line">    i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (i&lt;pos<span class="number">-1</span> &amp;&amp; p-&gt;pnext!=<span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        p = p-&gt;pnext;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (i&gt;pos<span class="number">-1</span> || p-&gt;pnext==<span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"The pos input error!"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">    &#125;</span><br><span class="line">    q = p-&gt;pnext;</span><br><span class="line">    value = q-&gt;data;</span><br><span class="line">    p-&gt;pnext = q-&gt;pnext;</span><br><span class="line">    <span class="built_in">free</span>(q);</span><br><span class="line">    q = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="（七）遍历操作"><a href="#（七）遍历操作" class="headerlink" title="（七）遍历操作"></a>（七）遍历操作</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">TraverseList</span><span class="params">(Plist phead, <span class="keyword">void</span>(*pfun)(Plist plst))</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Plist p = phead-&gt;pnext;</span><br><span class="line">    <span class="keyword">if</span> (ListIsEmpty(phead))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"The List is empty！"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (p != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        (*pfun)(p);</span><br><span class="line">        p = p-&gt;pnext;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="（八）获取长度"><a href="#（八）获取长度" class="headerlink" title="（八）获取长度"></a>（八）获取长度</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ListLength</span><span class="params">(Plist phead)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    Plist p = phead-&gt;pnext;</span><br><span class="line">    <span class="keyword">while</span> (p != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        p = p-&gt;pnext;</span><br><span class="line">        count++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;&amp;emsp;转眼就到九月份了，数据结构的工作还未结束，任重而道远啊，加油~&lt;br&gt;&amp;emsp;线性表是比较常见的数据结构，按存储方式分，有链表（链式存储）和数组（顺序存储）两种，那么链表如何实现呢？以下是一些个实现思路，完整代码请用&lt;a href=&quot;https://github.com/keviness/Algorithms/blob/master/Algorithms_C/DataStruct/list.c&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;神奇的传送门&lt;/a&gt;~&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Algorithms" scheme="https://keviness.github.io/tags/Algorithms/"/>
    
      <category term="C" scheme="https://keviness.github.io/tags/C/"/>
    
      <category term="List" scheme="https://keviness.github.io/tags/List/"/>
    
  </entry>
  
  <entry>
    <title>队列：顺序存储实现</title>
    <link href="https://keviness.github.io/post/75b41c5c.html"/>
    <id>https://keviness.github.io/post/75b41c5c.html</id>
    <published>2020-08-10T16:00:00.000Z</published>
    <updated>2020-08-10T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>&emsp;队列在生活中可是经常见的。比如，食堂，商场等地方经常需要排队。它的主要性质是先进先出（first in first out），在算法中队列有顺序存储（连续存储）和链式存储（离散存储）两种方式。其中顺序存储必须要用循环队列的形式实现，具体如下：</p><a id="more"></a><h2 id="队列：顺序存储实现"><a href="#队列：顺序存储实现" class="headerlink" title="队列：顺序存储实现"></a>队列：顺序存储实现</h2><h3 id="一，顺序存储实现"><a href="#一，顺序存储实现" class="headerlink" title="一，顺序存储实现"></a>一，顺序存储实现</h3><blockquote><ul><li>顺序存储实现队列必须用循环队列方式实现。</li><li>如此，对内存的使用友好，不会使程序奔溃。</li></ul></blockquote><h4 id="（一）概念及示意图"><a href="#（一）概念及示意图" class="headerlink" title="（一）概念及示意图"></a>（一）概念及示意图</h4><h5 id="1-队列示意图"><a href="#1-队列示意图" class="headerlink" title="1,队列示意图"></a>1,队列示意图</h5><img src="/post/75b41c5c/queue1.png" class title="queue1"><h5 id="2-入队出队示意图"><a href="#2-入队出队示意图" class="headerlink" title="2,入队出队示意图"></a>2,入队出队示意图</h5><img src="/post/75b41c5c/queue2.png" class title="queue2"><h5 id="3-判断队列满或空示意图"><a href="#3-判断队列满或空示意图" class="headerlink" title="3,判断队列满或空示意图"></a>3,判断队列满或空示意图</h5><img src="/post/75b41c5c/queue3.png" class title="queue3"><h3 id="二，实现代码"><a href="#二，实现代码" class="headerlink" title="二，实现代码"></a>二，实现代码</h3><h4 id="（一）队列数据形式"><a href="#（一）队列数据形式" class="headerlink" title="（一）队列数据形式"></a>（一）队列数据形式</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Queue</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> *pbase;</span><br><span class="line">    <span class="keyword">int</span> front;</span><br><span class="line">    <span class="keyword">int</span> rear;</span><br><span class="line">&#125;QUEUE, * PQUEUE;</span><br></pre></td></tr></table></figure><h4 id="（二）初始化队列"><a href="#（二）初始化队列" class="headerlink" title="（二）初始化队列"></a>（二）初始化队列</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InitQueue</span><span class="params">(PQUEUE <span class="built_in">queue</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">queue</span>-&gt;pbase = (<span class="keyword">int</span> *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span>) * SIZE);</span><br><span class="line">    <span class="keyword">if</span> ((<span class="built_in">queue</span>-&gt;pbase) == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"Error in locating the memory!"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">queue</span>-&gt;front = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">queue</span>-&gt;rear = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="（三）检测队列为空或已满"><a href="#（三）检测队列为空或已满" class="headerlink" title="（三）检测队列为空或已满"></a>（三）检测队列为空或已满</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">QueueIsEmpty</span><span class="params">(PQUEUE <span class="built_in">queue</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ((<span class="built_in">queue</span>-&gt;front) == (<span class="built_in">queue</span>-&gt;rear))? <span class="literal">true</span>:<span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">QueueIsFull</span><span class="params">(PQUEUE <span class="built_in">queue</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (((<span class="built_in">queue</span>-&gt;rear)+<span class="number">1</span> % SIZE) == (<span class="built_in">queue</span>-&gt;front)) ? <span class="literal">true</span>:<span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="（四）入队出队操作"><a href="#（四）入队出队操作" class="headerlink" title="（四）入队出队操作"></a>（四）入队出队操作</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">EnterQueue</span><span class="params">(PQUEUE <span class="built_in">queue</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (QueueIsFull(<span class="built_in">queue</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"The queue is full!"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> data;</span><br><span class="line">    (<span class="built_in">queue</span>-&gt;pbase)[<span class="built_in">queue</span>-&gt;rear] = data;</span><br><span class="line">    <span class="built_in">queue</span>-&gt;rear = (<span class="built_in">queue</span>-&gt;rear+<span class="number">1</span>)%SIZE;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">OutQueue</span><span class="params">(PQUEUE <span class="built_in">queue</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (QueueIsEmpty(<span class="built_in">queue</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"The queue is empty!"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> data;</span><br><span class="line">    data = (<span class="built_in">queue</span>-&gt;pbase)[<span class="built_in">queue</span>-&gt;front];</span><br><span class="line">    <span class="built_in">queue</span>-&gt;front = (<span class="built_in">queue</span>-&gt;front+<span class="number">1</span>)%SIZE;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"The out queue data:%d \n"</span>, data);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="（五）遍历队列"><a href="#（五）遍历队列" class="headerlink" title="（五）遍历队列"></a>（五）遍历队列</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">TraverseQueue</span><span class="params">(PQUEUE <span class="built_in">queue</span>, <span class="keyword">void</span>(*pfunc)(<span class="keyword">int</span> *data))</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (QueueIsEmpty(<span class="built_in">queue</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"The queue is empty!"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="built_in">queue</span>-&gt;front;</span><br><span class="line">    <span class="keyword">while</span> (i != <span class="built_in">queue</span>-&gt;rear)</span><br><span class="line">    &#123;</span><br><span class="line">        (*pfunc)(&amp;(<span class="built_in">queue</span>-&gt;pbase[i]));</span><br><span class="line">        i = (i+<span class="number">1</span>)%SIZE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="（六）打印队列"><a href="#（六）打印队列" class="headerlink" title="（六）打印队列"></a>（六）打印队列</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ShowQueue</span><span class="params">(PQUEUE <span class="built_in">queue</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (QueueIsEmpty(<span class="built_in">queue</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"The queue is empty!"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="built_in">queue</span>-&gt;front;</span><br><span class="line">    <span class="keyword">while</span> (i != <span class="built_in">queue</span>-&gt;rear)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>, (<span class="built_in">queue</span>-&gt;pbase)[i]);</span><br><span class="line">        i = (i+<span class="number">1</span>)%SIZE;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">'\n'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="（七）队列长度"><a href="#（七）队列长度" class="headerlink" title="（七）队列长度"></a>（七）队列长度</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">QueueLength</span><span class="params">(PQUEUE <span class="built_in">queue</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="built_in">queue</span>-&gt;front;</span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (i != <span class="built_in">queue</span>-&gt;rear)</span><br><span class="line">    &#123;</span><br><span class="line">        count++;</span><br><span class="line">        i = (i+<span class="number">1</span>)%SIZE;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"The queue length:%d \n"</span>, count);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="（八）清空队列"><a href="#（八）清空队列" class="headerlink" title="（八）清空队列"></a>（八）清空队列</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ClearQueue</span><span class="params">(PQUEUE <span class="built_in">queue</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (QueueIsEmpty(<span class="built_in">queue</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"The queue is empty!"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">free</span>(<span class="built_in">queue</span>-&gt;pbase);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Clear queue successfully!"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;&amp;emsp;队列在生活中可是经常见的。比如，食堂，商场等地方经常需要排队。它的主要性质是先进先出（first in first out），在算法中队列有顺序存储（连续存储）和链式存储（离散存储）两种方式。其中顺序存储必须要用循环队列的形式实现，具体如下：&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Algorithms" scheme="https://keviness.github.io/tags/Algorithms/"/>
    
      <category term="C" scheme="https://keviness.github.io/tags/C/"/>
    
      <category term="Queue" scheme="https://keviness.github.io/tags/Queue/"/>
    
  </entry>
  
  <entry>
    <title>递归概述</title>
    <link href="https://keviness.github.io/post/631fd3f2.html"/>
    <id>https://keviness.github.io/post/631fd3f2.html</id>
    <published>2020-08-08T16:00:00.000Z</published>
    <updated>2020-08-08T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>&emsp;什么是递归呢？别急，让我给你讲一个故事：<br>&emsp;从前，有一座山，山里有座庙，庙里有一个老和尚和一个小和尚，有一天老和尚给小和尚讲了一个故事。故事是：从前，有一座山，山里有座庙，庙里有一个老和尚和一个小和尚，有一天老和尚给小和尚讲了一个故事。故事是：从前，有一座山……<br>&emsp;怎么样，体会到什么是递归了吗？递归是算法里面重要的角色，可以帮助我们解决一些难题。</p><a id="more"></a><h2 id="递归（recursion）"><a href="#递归（recursion）" class="headerlink" title="递归（recursion）"></a>递归（recursion）</h2><h3 id="一，定义"><a href="#一，定义" class="headerlink" title="一，定义"></a>一，定义</h3><blockquote><p>递归：一个函数自己直接或间接调用自己</p></blockquote><h3 id="二，函数调用另一个函数时发生了什么？"><a href="#二，函数调用另一个函数时发生了什么？" class="headerlink" title="二，函数调用另一个函数时发生了什么？"></a>二，函数调用另一个函数时发生了什么？</h3><ul><li>主调函数运行被调函数之前：<blockquote><ul><li>1.将实际参数，返回地址等信息传递给被调函数。</li><li>2.为被调函数的局部变量（包括形参）分配存储空间。</li><li>3.将控制权转移到被调函数的入口。</li></ul></blockquote></li><li>被调函数返回主调函数之前：<blockquote><ul><li>1.保存被调函数的返回结果（若有返回值）。</li><li>2.释放被调函数的存储空间。</li><li>3.依照被调用函数返回的地址将控制权转移回主调函数。</li></ul></blockquote></li><li>注意：<blockquote><ul><li>1.多个函数相互调用时，函数之间的信息传递和控制转移由栈来实现:</li><li>2.在整个程序运行过程中，系统将程序运行所需要的数据空间安排在一个栈中。</li><li>3.每调用一个函数，就在栈顶分配一个存储空间，对该调用的函数进行压栈操作。</li><li>4.当函数执行结束返回时，就释放它的存储空间，进行出栈操作。</li><li>5.因此，当前运行的函数永远在栈顶位置。</li></ul></blockquote><h3 id="三，递归满足三个条件"><a href="#三，递归满足三个条件" class="headerlink" title="三，递归满足三个条件"></a>三，递归满足三个条件</h3><blockquote><ul><li>1.递归必须得有一个明确的终止条件</li><li>2.该函数所处理的数据规模必须在递减</li><li>3.这个转化必须是可解的</li></ul></blockquote></li></ul><h3 id="四，循环和递归的关系："><a href="#四，循环和递归的关系：" class="headerlink" title="四，循环和递归的关系："></a>四，循环和递归的关系：</h3><blockquote><ul><li>理论上，所有的循环都可以转化成递归，但是用递归能解决的问题不一定能用循环解决。</li></ul></blockquote><h3 id="五，循环和递归的比较"><a href="#五，循环和递归的比较" class="headerlink" title="五，循环和递归的比较"></a>五，循环和递归的比较</h3><blockquote><ul><li>递归：易于理解，速度慢，存储空间大</li><li>循环：不易理解，速度快，存储空间小</li></ul></blockquote><h3 id="六，常用递归示例"><a href="#六，常用递归示例" class="headerlink" title="六，常用递归示例"></a>六，常用递归示例</h3><h4 id="（一）计算1-2-3-…-n-1-n的和"><a href="#（一）计算1-2-3-…-n-1-n的和" class="headerlink" title="（一）计算1+2+3+…+n-1+n的和"></a>（一）计算1+2+3+…+n-1+n的和</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">long</span> <span class="title">sum_numbers</span><span class="params">(<span class="keyword">int</span> num)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (num == <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> sum_numbers(num<span class="number">-1</span>) + num;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="（二）计算n的阶乘-N"><a href="#（二）计算n的阶乘-N" class="headerlink" title="（二）计算n的阶乘(N!)"></a>（二）计算n的阶乘(N!)</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">long</span> <span class="title">multiply_numbers</span><span class="params">(<span class="keyword">int</span> num)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (num == <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> multiply_numbers(num<span class="number">-1</span>) * num;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="（三）汉诺塔"><a href="#（三）汉诺塔" class="headerlink" title="（三）汉诺塔"></a>（三）汉诺塔</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">hannuo_tower</span><span class="params">(<span class="keyword">int</span> num, <span class="keyword">char</span> A, <span class="keyword">char</span> B, <span class="keyword">char</span> C)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">如果是一个盘子</span></span><br><span class="line"><span class="comment">直接将A柱子上的盘子从A移到C</span></span><br><span class="line"><span class="comment">否则</span></span><br><span class="line"><span class="comment">先将A柱子上的n-1个盘子借助C移到B</span></span><br><span class="line"><span class="comment">直接将A柱子上的盘子从A移到C</span></span><br><span class="line"><span class="comment">最后将B柱子上的n-1个盘子借助A移到C</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (num == <span class="number">1</span>)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"move the %d pan from %c to %c \n"</span>, num, A, C);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        hannuo_tower(num<span class="number">-1</span>, A, C, B);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"move the %d pan from %c to %c \n"</span>, num, A, C);</span><br><span class="line">        hannuo_tower(num<span class="number">-1</span>, B, A, C);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="（四）斐波那契数列"><a href="#（四）斐波那契数列" class="headerlink" title="（四）斐波那契数列"></a>（四）斐波那契数列</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">long</span> <span class="title">fabo</span><span class="params">(<span class="keyword">int</span> num)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (num == <span class="number">2</span> || num==<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> fabo(num<span class="number">-2</span>) + fabo(num<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;&amp;emsp;什么是递归呢？别急，让我给你讲一个故事：&lt;br&gt;&amp;emsp;从前，有一座山，山里有座庙，庙里有一个老和尚和一个小和尚，有一天老和尚给小和尚讲了一个故事。故事是：从前，有一座山，山里有座庙，庙里有一个老和尚和一个小和尚，有一天老和尚给小和尚讲了一个故事。故事是：从前，有一座山……&lt;br&gt;&amp;emsp;怎么样，体会到什么是递归了吗？递归是算法里面重要的角色，可以帮助我们解决一些难题。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Algorithms" scheme="https://keviness.github.io/tags/Algorithms/"/>
    
      <category term="C" scheme="https://keviness.github.io/tags/C/"/>
    
      <category term="recursion" scheme="https://keviness.github.io/tags/recursion/"/>
    
  </entry>
  
  <entry>
    <title>Numpy（二）：numpy数组常用操作</title>
    <link href="https://keviness.github.io/post/9ae22f4b.html"/>
    <id>https://keviness.github.io/post/9ae22f4b.html</id>
    <published>2020-07-26T16:00:00.000Z</published>
    <updated>2020-07-26T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>&emsp;Numpy中的数组是多维数组，Numpy除了有很强的数组元素访问能力，还有很强的数组操作能力，以下是常用的Numpy数组操作函数：</p><a id="more"></a><h2 id="一，修改数组形状"><a href="#一，修改数组形状" class="headerlink" title="一，修改数组形状"></a>一，修改数组形状</h2><h3 id="（一），numpy-reshape"><a href="#（一），numpy-reshape" class="headerlink" title="（一），numpy.reshape"></a>（一），numpy.reshape</h3><blockquote><ul><li><code>numpy.reshape</code> 函数可以在不改变数据的条件下修改形状，格式如下</li><li><code>numpy.reshape(arr, newshape, order=&#39;C&#39;)</code></li><li>arr：要修改形状的数组</li><li>newshape：整数或者整数数组，新的形状应当兼容原有形状</li><li>order：’C’ – 按行，’F’ – 按列，’A’ – 原顺序，’k’ – 元素在内存中的出现顺序。</li></ul></blockquote><h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a = np.arange(<span class="number">8</span>)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'原始数组：'</span>)</span><br><span class="line"><span class="keyword">print</span> (a)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'\n'</span>)</span><br><span class="line">b = a.reshape(<span class="number">4</span>,<span class="number">2</span>)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'修改后的数组：'</span>)</span><br><span class="line"><span class="keyword">print</span> (b)</span><br><span class="line"><span class="comment">#输出结果如下：</span></span><br><span class="line">原始数组：</span><br><span class="line">[<span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span>]</span><br><span class="line">修改后的数组：</span><br><span class="line">[[<span class="number">0</span> <span class="number">1</span>]</span><br><span class="line"> [<span class="number">2</span> <span class="number">3</span>]</span><br><span class="line"> [<span class="number">4</span> <span class="number">5</span>]</span><br><span class="line"> [<span class="number">6</span> <span class="number">7</span>]]</span><br></pre></td></tr></table></figure><h2 id="二，翻转数组"><a href="#二，翻转数组" class="headerlink" title="二，翻转数组"></a>二，翻转数组</h2><h3 id="（一），numpy-transpose"><a href="#（一），numpy-transpose" class="headerlink" title="（一），numpy.transpose"></a>（一），numpy.transpose</h3><blockquote><ul><li><code>numpy.transpose(arr, axes)</code></li><li>arr：要操作的数组</li><li>axes：整数列表，对应维度，通常所有维度都会对换。</li></ul></blockquote><h4 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a = np.arange(<span class="number">12</span>).reshape(<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'原数组：'</span>)</span><br><span class="line"><span class="keyword">print</span> (a )</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'\n'</span>)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'对换数组：'</span>)</span><br><span class="line"><span class="keyword">print</span> (np.transpose(a))</span><br><span class="line"><span class="comment">#输出结果如下：</span></span><br><span class="line">原数组：</span><br><span class="line">[[ <span class="number">0</span>  <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span>]</span><br><span class="line"> [ <span class="number">4</span>  <span class="number">5</span>  <span class="number">6</span>  <span class="number">7</span>]</span><br><span class="line"> [ <span class="number">8</span>  <span class="number">9</span> <span class="number">10</span> <span class="number">11</span>]]</span><br><span class="line">对换数组：</span><br><span class="line">[[ <span class="number">0</span>  <span class="number">4</span>  <span class="number">8</span>]</span><br><span class="line"> [ <span class="number">1</span>  <span class="number">5</span>  <span class="number">9</span>]</span><br><span class="line"> [ <span class="number">2</span>  <span class="number">6</span> <span class="number">10</span>]</span><br><span class="line"> [ <span class="number">3</span>  <span class="number">7</span> <span class="number">11</span>]]</span><br></pre></td></tr></table></figure><h3 id="（二），numpy-ndarray-T"><a href="#（二），numpy-ndarray-T" class="headerlink" title="（二），numpy.ndarray.T"></a>（二），numpy.ndarray.T</h3><blockquote><ul><li>类似 <code>numpy.transpose</code>：</li></ul></blockquote><h4 id="实例-2"><a href="#实例-2" class="headerlink" title="实例"></a>实例</h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a = np.arange(<span class="number">12</span>).reshape(<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'原数组：'</span>)</span><br><span class="line"><span class="keyword">print</span> (a)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'\n'</span>)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'转置数组：'</span>)</span><br><span class="line"><span class="keyword">print</span> (a.T)</span><br><span class="line"><span class="comment">#输出结果如下：</span></span><br><span class="line">原数组：</span><br><span class="line">[[ <span class="number">0</span>  <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span>]</span><br><span class="line"> [ <span class="number">4</span>  <span class="number">5</span>  <span class="number">6</span>  <span class="number">7</span>]</span><br><span class="line"> [ <span class="number">8</span>  <span class="number">9</span> <span class="number">10</span> <span class="number">11</span>]]</span><br><span class="line">转置数组：</span><br><span class="line">[[ <span class="number">0</span>  <span class="number">4</span>  <span class="number">8</span>]</span><br><span class="line"> [ <span class="number">1</span>  <span class="number">5</span>  <span class="number">9</span>]</span><br><span class="line"> [ <span class="number">2</span>  <span class="number">6</span> <span class="number">10</span>]</span><br><span class="line"> [ <span class="number">3</span>  <span class="number">7</span> <span class="number">11</span>]]</span><br></pre></td></tr></table></figure><h2 id="三，连接数组"><a href="#三，连接数组" class="headerlink" title="三，连接数组"></a>三，连接数组</h2><table><thead><tr><th align="center">函数</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">concatenate</td><td align="center">连接沿现有轴的数组序列</td></tr><tr><td align="center">stack</td><td align="center">沿着新的轴加入一系列数组。</td></tr><tr><td align="center">hstack</td><td align="center">水平堆叠序列中的数组（列方向）</td></tr><tr><td align="center">vstack</td><td align="center">竖直堆叠序列中的数组（行方向）</td></tr></tbody></table><h3 id="（一），numpy-concatenate"><a href="#（一），numpy-concatenate" class="headerlink" title="（一），numpy.concatenate"></a>（一），numpy.concatenate</h3><blockquote><ul><li><code>numpy.concatenate((a1, a2, ...), axis)</code></li><li>a1, a2, …：相同类型的数组</li><li>axis：沿着它连接数组的轴，默认为 0</li></ul></blockquote><h4 id="实例-3"><a href="#实例-3" class="headerlink" title="实例"></a>实例</h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a = np.array([[<span class="number">1</span>,<span class="number">2</span>],[<span class="number">3</span>,<span class="number">4</span>]])</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'第一个数组：'</span>)</span><br><span class="line"><span class="keyword">print</span> (a)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'\n'</span>)</span><br><span class="line">b = np.array([[<span class="number">5</span>,<span class="number">6</span>],[<span class="number">7</span>,<span class="number">8</span>]])</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'第二个数组：'</span>)</span><br><span class="line"><span class="keyword">print</span> (b)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'\n'</span>)</span><br><span class="line"><span class="comment"># 两个数组的维度相同</span></span><br><span class="line"><span class="keyword">print</span> (<span class="string">'沿轴 0 连接两个数组：'</span>)</span><br><span class="line"><span class="keyword">print</span> (np.concatenate((a,b)))</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'\n'</span>)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'沿轴 1 连接两个数组：'</span>)</span><br><span class="line"><span class="keyword">print</span> (np.concatenate((a,b),axis = <span class="number">1</span>))</span><br><span class="line"><span class="comment">#输出结果为：</span></span><br><span class="line">第一个数组：</span><br><span class="line">[[<span class="number">1</span> <span class="number">2</span>]</span><br><span class="line"> [<span class="number">3</span> <span class="number">4</span>]]</span><br><span class="line">第二个数组：</span><br><span class="line">[[<span class="number">5</span> <span class="number">6</span>]</span><br><span class="line"> [<span class="number">7</span> <span class="number">8</span>]]</span><br><span class="line">沿轴 <span class="number">0</span> 连接两个数组：</span><br><span class="line">[[<span class="number">1</span> <span class="number">2</span>]</span><br><span class="line"> [<span class="number">3</span> <span class="number">4</span>]</span><br><span class="line"> [<span class="number">5</span> <span class="number">6</span>]</span><br><span class="line"> [<span class="number">7</span> <span class="number">8</span>]]</span><br><span class="line">沿轴 <span class="number">1</span> 连接两个数组：</span><br><span class="line">[[<span class="number">1</span> <span class="number">2</span> <span class="number">5</span> <span class="number">6</span>]</span><br><span class="line"> [<span class="number">3</span> <span class="number">4</span> <span class="number">7</span> <span class="number">8</span>]]</span><br></pre></td></tr></table></figure><h3 id="（二），numpy-stack"><a href="#（二），numpy-stack" class="headerlink" title="（二），numpy.stack"></a>（二），numpy.stack</h3><blockquote><ul><li><code>numpy.stack(arrays, axis)</code></li><li>arrays相同形状的数组序列</li><li>axis：返回数组中的轴，输入数组沿着它来堆叠</li></ul></blockquote><h4 id="实例-4"><a href="#实例-4" class="headerlink" title="实例"></a>实例</h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a = np.array([[<span class="number">1</span>,<span class="number">2</span>],[<span class="number">3</span>,<span class="number">4</span>]])</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'第一个数组：'</span>)</span><br><span class="line"><span class="keyword">print</span> (a)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'\n'</span>)</span><br><span class="line">b = np.array([[<span class="number">5</span>,<span class="number">6</span>],[<span class="number">7</span>,<span class="number">8</span>]])</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'第二个数组：'</span>)</span><br><span class="line"><span class="keyword">print</span> (b)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'\n'</span>)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'沿轴 0 堆叠两个数组：'</span>)</span><br><span class="line"><span class="keyword">print</span> (np.stack((a,b),<span class="number">0</span>))</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'\n'</span>)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'沿轴 1 堆叠两个数组：'</span>)</span><br><span class="line"><span class="keyword">print</span> (np.stack((a,b),<span class="number">1</span>))</span><br><span class="line"><span class="comment">#输出结果如下：</span></span><br><span class="line">第一个数组：</span><br><span class="line">[[<span class="number">1</span> <span class="number">2</span>]</span><br><span class="line"> [<span class="number">3</span> <span class="number">4</span>]]</span><br><span class="line">第二个数组：</span><br><span class="line">[[<span class="number">5</span> <span class="number">6</span>]</span><br><span class="line"> [<span class="number">7</span> <span class="number">8</span>]]</span><br><span class="line">沿轴 <span class="number">0</span> 堆叠两个数组：</span><br><span class="line">[[[<span class="number">1</span> <span class="number">2</span>]</span><br><span class="line">  [<span class="number">3</span> <span class="number">4</span>]]</span><br><span class="line"> [[<span class="number">5</span> <span class="number">6</span>]</span><br><span class="line">  [<span class="number">7</span> <span class="number">8</span>]]]</span><br><span class="line">沿轴 <span class="number">1</span> 堆叠两个数组：</span><br><span class="line">[[[<span class="number">1</span> <span class="number">2</span>]</span><br><span class="line">  [<span class="number">5</span> <span class="number">6</span>]]</span><br><span class="line"> [[<span class="number">3</span> <span class="number">4</span>]</span><br><span class="line">  [<span class="number">7</span> <span class="number">8</span>]]]</span><br></pre></td></tr></table></figure><h3 id="（三），numpy-hstack"><a href="#（三），numpy-hstack" class="headerlink" title="（三），numpy.hstack"></a>（三），numpy.hstack</h3><blockquote><ul><li><code>numpy.hstack</code>是<code>numpy.stack</code>函数的变体，它通过水平堆叠来生成数组。</li></ul></blockquote><h4 id="实例-5"><a href="#实例-5" class="headerlink" title="实例"></a>实例</h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a = np.array([[<span class="number">1</span>,<span class="number">2</span>],[<span class="number">3</span>,<span class="number">4</span>]])</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'第一个数组：'</span>)</span><br><span class="line"><span class="keyword">print</span> (a)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'\n'</span>)</span><br><span class="line">b = np.array([[<span class="number">5</span>,<span class="number">6</span>],[<span class="number">7</span>,<span class="number">8</span>]])</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'第二个数组：'</span>)</span><br><span class="line"><span class="keyword">print</span> (b)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'\n'</span>)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'水平堆叠：'</span>)</span><br><span class="line">c = np.hstack((a,b))</span><br><span class="line"><span class="keyword">print</span> (c)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'\n'</span>)</span><br><span class="line"><span class="comment">#输出结果如下：</span></span><br><span class="line">第一个数组：</span><br><span class="line">[[<span class="number">1</span> <span class="number">2</span>]</span><br><span class="line"> [<span class="number">3</span> <span class="number">4</span>]]</span><br><span class="line">第二个数组：</span><br><span class="line">[[<span class="number">5</span> <span class="number">6</span>]</span><br><span class="line"> [<span class="number">7</span> <span class="number">8</span>]]</span><br><span class="line">水平堆叠：</span><br><span class="line">[[<span class="number">1</span> <span class="number">2</span> <span class="number">5</span> <span class="number">6</span>]</span><br><span class="line"> [<span class="number">3</span> <span class="number">4</span> <span class="number">7</span> <span class="number">8</span>]]</span><br></pre></td></tr></table></figure><h3 id="（四），numpy-vstack"><a href="#（四），numpy-vstack" class="headerlink" title="（四），numpy.vstack"></a>（四），numpy.vstack</h3><blockquote><ul><li><code>numpy.vstack</code>是<code>numpy.stack</code>函数的变体，它通过垂直堆叠来生成数组。</li></ul></blockquote><h4 id="实例-6"><a href="#实例-6" class="headerlink" title="实例"></a>实例</h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a = np.array([[<span class="number">1</span>,<span class="number">2</span>],[<span class="number">3</span>,<span class="number">4</span>]])</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'第一个数组：'</span>)</span><br><span class="line"><span class="keyword">print</span> (a)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'\n'</span>)</span><br><span class="line">b = np.array([[<span class="number">5</span>,<span class="number">6</span>],[<span class="number">7</span>,<span class="number">8</span>]])</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'第二个数组：'</span>)</span><br><span class="line"><span class="keyword">print</span> (b)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'\n'</span>)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'竖直堆叠：'</span>)</span><br><span class="line">c = np.vstack((a,b))</span><br><span class="line"><span class="keyword">print</span> (c)</span><br><span class="line"><span class="comment">#输出结果为：</span></span><br><span class="line">第一个数组：</span><br><span class="line">[[<span class="number">1</span> <span class="number">2</span>]</span><br><span class="line"> [<span class="number">3</span> <span class="number">4</span>]]</span><br><span class="line">第二个数组：</span><br><span class="line">[[<span class="number">5</span> <span class="number">6</span>]</span><br><span class="line"> [<span class="number">7</span> <span class="number">8</span>]]</span><br><span class="line">竖直堆叠：</span><br><span class="line">[[<span class="number">1</span> <span class="number">2</span>]</span><br><span class="line"> [<span class="number">3</span> <span class="number">4</span>]</span><br><span class="line"> [<span class="number">5</span> <span class="number">6</span>]</span><br><span class="line"> [<span class="number">7</span> <span class="number">8</span>]]</span><br></pre></td></tr></table></figure><h2 id="四，分割数组"><a href="#四，分割数组" class="headerlink" title="四，分割数组"></a>四，分割数组</h2><table><thead><tr><th align="center">函数</th><th align="center">数组及操作</th></tr></thead><tbody><tr><td align="center">split</td><td align="center">将一个数组分割为多个子数组</td></tr><tr><td align="center">hsplit</td><td align="center">将一个数组水平分割为多个子数组（按列）</td></tr><tr><td align="center">vsplit</td><td align="center">将一个数组垂直分割为多个子数组（按行）</td></tr></tbody></table><h3 id="（一），numpy-split"><a href="#（一），numpy-split" class="headerlink" title="（一），numpy.split"></a>（一），numpy.split</h3><blockquote><ul><li><code>numpy.split(ary, indices_or_sections, axis)</code></li><li>ary：被分割的数组</li><li>indices_or_sections：若是一个整数，就用该数平均切分，若是一个数组，为沿轴切分的位置（左开右闭）</li><li>axis：沿着哪个维度进行切向，默认为0，横向切分。为1时，纵向切分</li></ul></blockquote><h4 id="实例-7"><a href="#实例-7" class="headerlink" title="实例"></a>实例</h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a = np.arange(<span class="number">9</span>)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'第一个数组：'</span>)</span><br><span class="line"><span class="keyword">print</span> (a)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'\n'</span>)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'将数组分为三个大小相等的子数组：'</span>)</span><br><span class="line">b = np.split(a,<span class="number">3</span>)</span><br><span class="line"><span class="keyword">print</span> (b)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'\n'</span>)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'将数组在一维数组中表明的位置分割：'</span>)</span><br><span class="line">b = np.split(a,[<span class="number">4</span>,<span class="number">7</span>])</span><br><span class="line"><span class="keyword">print</span> (b)</span><br><span class="line"><span class="comment">#输出结果为：</span></span><br><span class="line">第一个数组：</span><br><span class="line">[<span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span>]</span><br><span class="line">将数组分为三个大小相等的子数组：</span><br><span class="line">[array([<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>]), array([<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]), array([<span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>])]</span><br><span class="line">将数组在一维数组中表明的位置分割：</span><br><span class="line">[array([<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]), array([<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]), array([<span class="number">7</span>, <span class="number">8</span>])]</span><br></pre></td></tr></table></figure><h3 id="（二），numpy-hsplit"><a href="#（二），numpy-hsplit" class="headerlink" title="（二），numpy.hsplit"></a>（二），numpy.hsplit</h3><blockquote><ul><li><code>numpy.hsplit</code>函数用于水平分割数组，通过指定要返回的相同形状的数组数量来拆分原数组。</li></ul></blockquote><h4 id="实例-8"><a href="#实例-8" class="headerlink" title="实例"></a>实例</h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">harr = np.floor(<span class="number">10</span> * np.random.random((<span class="number">2</span>, <span class="number">6</span>)))</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'原array：'</span>)</span><br><span class="line">print(harr)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'拆分后：'</span>)</span><br><span class="line">print(np.hsplit(harr, <span class="number">3</span>))</span><br><span class="line"><span class="comment">#输出结果为：</span></span><br><span class="line">原array：</span><br><span class="line">[[<span class="number">4.</span> <span class="number">7.</span> <span class="number">6.</span> <span class="number">3.</span> <span class="number">2.</span> <span class="number">6.</span>]</span><br><span class="line"> [<span class="number">6.</span> <span class="number">3.</span> <span class="number">6.</span> <span class="number">7.</span> <span class="number">9.</span> <span class="number">7.</span>]]</span><br><span class="line">拆分后：</span><br><span class="line">[array([[<span class="number">4.</span>, <span class="number">7.</span>],</span><br><span class="line">       [<span class="number">6.</span>, <span class="number">3.</span>]]), array([[<span class="number">6.</span>, <span class="number">3.</span>],</span><br><span class="line">       [<span class="number">6.</span>, <span class="number">7.</span>]]), array([[<span class="number">2.</span>, <span class="number">6.</span>],</span><br><span class="line">       [<span class="number">9.</span>, <span class="number">7.</span>]])]</span><br></pre></td></tr></table></figure><h3 id="（三），numpy-vsplit"><a href="#（三），numpy-vsplit" class="headerlink" title="（三），numpy.vsplit"></a>（三），numpy.vsplit</h3><blockquote><ul><li><code>numpy.vsplit</code>沿着垂直轴分割，其分割方式与hsplit用法相同。</li></ul></blockquote><h4 id="实例-9"><a href="#实例-9" class="headerlink" title="实例"></a>实例</h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a = np.arange(<span class="number">16</span>).reshape(<span class="number">4</span>,<span class="number">4</span>)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'第一个数组：'</span>)</span><br><span class="line"><span class="keyword">print</span> (a)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'\n'</span>)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'竖直分割：'</span>)</span><br><span class="line">b = np.vsplit(a,<span class="number">2</span>)</span><br><span class="line"><span class="keyword">print</span> (b)</span><br><span class="line"><span class="comment">#输出结果为：</span></span><br><span class="line">第一个数组：</span><br><span class="line">[[ <span class="number">0</span>  <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span>]</span><br><span class="line"> [ <span class="number">4</span>  <span class="number">5</span>  <span class="number">6</span>  <span class="number">7</span>]</span><br><span class="line"> [ <span class="number">8</span>  <span class="number">9</span> <span class="number">10</span> <span class="number">11</span>]</span><br><span class="line"> [<span class="number">12</span> <span class="number">13</span> <span class="number">14</span> <span class="number">15</span>]]</span><br><span class="line">竖直分割：</span><br><span class="line">[array([[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">       [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>]]), array([[ <span class="number">8</span>,  <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>],</span><br><span class="line">       [<span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>]])]</span><br></pre></td></tr></table></figure><h2 id="五，数组元素的添加与删除"><a href="#五，数组元素的添加与删除" class="headerlink" title="五，数组元素的添加与删除"></a>五，数组元素的添加与删除</h2><table><thead><tr><th align="center">函数</th><th align="center">元素及描述</th></tr></thead><tbody><tr><td align="center">resize</td><td align="center">返回指定形状的新数组</td></tr><tr><td align="center">append</td><td align="center">将值添加到数组末尾</td></tr><tr><td align="center">insert</td><td align="center">沿指定轴将值插入到指定下标之前</td></tr><tr><td align="center">delete</td><td align="center">删掉某个轴的子数组，并返回删除后的新数组</td></tr><tr><td align="center">unique</td><td align="center">查找数组内的唯一元素</td></tr></tbody></table><h3 id="（一），numpy-resize"><a href="#（一），numpy-resize" class="headerlink" title="（一），numpy.resize"></a>（一），numpy.resize</h3><blockquote><ul><li><code>numpy.resize</code>函数返回指定大小的新数组。</li><li>如果新数组大小大于原始大小，则包含原始数组中的元素的副本。</li><li><code>numpy.resize(arr, shape)</code></li><li>arr：要修改大小的数组</li><li>shape：返回数组的新形状</li></ul></blockquote><h4 id="实例-10"><a href="#实例-10" class="headerlink" title="实例"></a>实例</h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a = np.array([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]])</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'第一个数组：'</span>)</span><br><span class="line"><span class="keyword">print</span> (a)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'\n'</span>)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'第一个数组的形状：'</span>)</span><br><span class="line"><span class="keyword">print</span> (a.shape)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'\n'</span>)</span><br><span class="line">b = np.resize(a, (<span class="number">3</span>,<span class="number">2</span>))</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'第二个数组：'</span>)</span><br><span class="line"><span class="keyword">print</span> (b)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'\n'</span>)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'第二个数组的形状：'</span>)</span><br><span class="line"><span class="keyword">print</span> (b.shape)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'\n'</span>)</span><br><span class="line"><span class="comment"># 要注意 a 的第一行在 b 中重复出现，因为尺寸变大了</span></span><br><span class="line"><span class="keyword">print</span> (<span class="string">'修改第二个数组的大小：'</span>)</span><br><span class="line">b = np.resize(a,(<span class="number">3</span>,<span class="number">3</span>))</span><br><span class="line"><span class="keyword">print</span> (b)</span><br><span class="line"><span class="comment">#输出结果为：</span></span><br><span class="line">第一个数组：</span><br><span class="line">[[<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>]</span><br><span class="line"> [<span class="number">4</span> <span class="number">5</span> <span class="number">6</span>]]</span><br><span class="line">第一个数组的形状：</span><br><span class="line">(<span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">第二个数组：</span><br><span class="line">[[<span class="number">1</span> <span class="number">2</span>]</span><br><span class="line"> [<span class="number">3</span> <span class="number">4</span>]</span><br><span class="line"> [<span class="number">5</span> <span class="number">6</span>]]</span><br><span class="line">第二个数组的形状：</span><br><span class="line">(<span class="number">3</span>, <span class="number">2</span>)</span><br><span class="line">修改第二个数组的大小：</span><br><span class="line">[[<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>]</span><br><span class="line"> [<span class="number">4</span> <span class="number">5</span> <span class="number">6</span>]</span><br><span class="line"> [<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>]]</span><br></pre></td></tr></table></figure><h3 id="（二），numpy-append"><a href="#（二），numpy-append" class="headerlink" title="（二），numpy.append"></a>（二），numpy.append</h3><blockquote><ul><li><code>numpy.append</code> 函数在数组的末尾添加值。 </li><li>追加操作会分配整个数组，并把原来的数组复制到新数组中。 </li><li>输入数组的维度必须匹配否则将生成ValueError。</li><li><code>numpy.append(arr, values, axis=None)</code></li><li>arr：输入数组</li><li>values：要向arr添加的值，需要和arr形状相同（除了要添加的轴）</li><li>axis：默认为 None。当axis无定义时，是横向加成，返回总是为一维数组！</li><li>当axis有定义的时候，分别为0和1的时候（列数要相同）。当axis为1时，数组是加在右边（行数要相同）。</li></ul></blockquote><h4 id="实例-11"><a href="#实例-11" class="headerlink" title="实例"></a>实例</h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a = np.array([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]])</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'第一个数组：'</span>)</span><br><span class="line"><span class="keyword">print</span> (a)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'\n'</span>)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'向数组添加元素：'</span>)</span><br><span class="line"><span class="keyword">print</span> (np.append(a, [<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]))</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'\n'</span>)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'沿轴 0 添加元素：'</span>)</span><br><span class="line"><span class="keyword">print</span> (np.append(a, [[<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]],axis = <span class="number">0</span>))</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'\n'</span>)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'沿轴 1 添加元素：'</span>)</span><br><span class="line"><span class="keyword">print</span> (np.append(a, [[<span class="number">5</span>,<span class="number">5</span>,<span class="number">5</span>],[<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]],axis = <span class="number">1</span>))</span><br><span class="line"><span class="comment">#输出结果为：</span></span><br><span class="line">第一个数组：</span><br><span class="line">[[<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>]</span><br><span class="line"> [<span class="number">4</span> <span class="number">5</span> <span class="number">6</span>]]</span><br><span class="line">向数组添加元素：</span><br><span class="line">[<span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span>]</span><br><span class="line">沿轴 <span class="number">0</span> 添加元素：</span><br><span class="line">[[<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>]</span><br><span class="line"> [<span class="number">4</span> <span class="number">5</span> <span class="number">6</span>]</span><br><span class="line"> [<span class="number">7</span> <span class="number">8</span> <span class="number">9</span>]]</span><br><span class="line">沿轴 <span class="number">1</span> 添加元素：</span><br><span class="line">[[<span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">5</span> <span class="number">5</span> <span class="number">5</span>]</span><br><span class="line"> [<span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span>]]</span><br></pre></td></tr></table></figure><h3 id="（三），numpy-insert"><a href="#（三），numpy-insert" class="headerlink" title="（三），numpy.insert"></a>（三），numpy.insert</h3><blockquote><ul><li><code>numpy.insert</code> 函数在给定索引之前，沿给定轴在输入数组中插入值。</li><li>如果值的类型转换为要插入，则它与输入数组不同。 插入没有原地的，函数会返回一个新数组。此外，如果未提供轴，则输入数组会被展开。</li><li><code>numpy.insert(arr, obj, values, axis)</code></li><li>arr：输入数组</li><li>obj：在其之前插入值的索引</li><li>values：要插入的值</li><li>axis：沿着它插入的轴，如果未提供，则输入数组会被展开</li></ul></blockquote><h4 id="实例-12"><a href="#实例-12" class="headerlink" title="实例"></a>实例</h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a = np.array([[<span class="number">1</span>,<span class="number">2</span>],[<span class="number">3</span>,<span class="number">4</span>],[<span class="number">5</span>,<span class="number">6</span>]])</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'第一个数组：'</span>)</span><br><span class="line"><span class="keyword">print</span> (a)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'\n'</span>)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'未传递 Axis 参数。 在插入之前输入数组会被展开。'</span>)</span><br><span class="line"><span class="keyword">print</span> (np.insert(a,<span class="number">3</span>,[<span class="number">11</span>,<span class="number">12</span>]))</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'\n'</span>)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'传递了 Axis 参数。 会广播值数组来配输入数组。'</span>)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'沿轴 0 广播：'</span>)</span><br><span class="line"><span class="keyword">print</span> (np.insert(a,<span class="number">1</span>,[<span class="number">11</span>],axis = <span class="number">0</span>))</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'\n'</span>)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'沿轴 1 广播：'</span>)</span><br><span class="line"><span class="keyword">print</span> (np.insert(a,<span class="number">1</span>,<span class="number">11</span>,axis = <span class="number">1</span>))</span><br><span class="line"><span class="comment">#输出结果如下：</span></span><br><span class="line">第一个数组：</span><br><span class="line">[[<span class="number">1</span> <span class="number">2</span>]</span><br><span class="line"> [<span class="number">3</span> <span class="number">4</span>]</span><br><span class="line"> [<span class="number">5</span> <span class="number">6</span>]]</span><br><span class="line">未传递 Axis 参数。 在插入之前输入数组会被展开。</span><br><span class="line">[ <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span> <span class="number">11</span> <span class="number">12</span>  <span class="number">4</span>  <span class="number">5</span>  <span class="number">6</span>]</span><br><span class="line">传递了 Axis 参数。 会广播值数组来配输入数组。</span><br><span class="line">沿轴 <span class="number">0</span> 广播：</span><br><span class="line">[[ <span class="number">1</span>  <span class="number">2</span>]</span><br><span class="line"> [<span class="number">11</span> <span class="number">11</span>]</span><br><span class="line"> [ <span class="number">3</span>  <span class="number">4</span>]</span><br><span class="line"> [ <span class="number">5</span>  <span class="number">6</span>]]</span><br><span class="line">沿轴 <span class="number">1</span> 广播：</span><br><span class="line">[[ <span class="number">1</span> <span class="number">11</span>  <span class="number">2</span>]</span><br><span class="line"> [ <span class="number">3</span> <span class="number">11</span>  <span class="number">4</span>]</span><br><span class="line"> [ <span class="number">5</span> <span class="number">11</span>  <span class="number">6</span>]]</span><br></pre></td></tr></table></figure><h3 id="（四），numpy-delete"><a href="#（四），numpy-delete" class="headerlink" title="（四），numpy.delete"></a>（四），numpy.delete</h3><blockquote><ul><li><code>numpy.delete</code>函数返回从输入数组中删除指定子数组的新数组。 </li><li>与<code>insert()</code>函数的情况一样，如果未提供轴参数，则输入数组将展开。</li><li><code>Numpy.delete(arr, obj, axis)</code></li><li>arr：输入数组</li><li>obj：可以被切片，整数或者整数数组，表明要从输入数组删除的子数组</li><li>axis：沿着它删除给定子数组的轴，如果未提供，则输入数组会被展开</li></ul></blockquote><h4 id="实例-13"><a href="#实例-13" class="headerlink" title="实例"></a>实例</h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a = np.arange(<span class="number">12</span>).reshape(<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'第一个数组：'</span>)</span><br><span class="line"><span class="keyword">print</span> (a)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'\n'</span>)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'未传递 Axis 参数。 在插入之前输入数组会被展开。'</span>)</span><br><span class="line"><span class="keyword">print</span> (np.delete(a,<span class="number">5</span>))</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'\n'</span>)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'删除第二列：'</span>)</span><br><span class="line"><span class="keyword">print</span> (np.delete(a,<span class="number">1</span>,axis = <span class="number">1</span>))</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'\n'</span>)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'包含从数组中删除的替代值的切片：'</span>)</span><br><span class="line">a = np.array([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>])</span><br><span class="line"><span class="keyword">print</span> (np.delete(a, np.s_[::<span class="number">2</span>]))</span><br><span class="line"><span class="comment">#输出结果为：</span></span><br><span class="line">第一个数组：</span><br><span class="line">[[ <span class="number">0</span>  <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span>]</span><br><span class="line"> [ <span class="number">4</span>  <span class="number">5</span>  <span class="number">6</span>  <span class="number">7</span>]</span><br><span class="line"> [ <span class="number">8</span>  <span class="number">9</span> <span class="number">10</span> <span class="number">11</span>]]</span><br><span class="line">未传递 Axis 参数。 在插入之前输入数组会被展开。</span><br><span class="line">[ <span class="number">0</span>  <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span>  <span class="number">4</span>  <span class="number">6</span>  <span class="number">7</span>  <span class="number">8</span>  <span class="number">9</span> <span class="number">10</span> <span class="number">11</span>]</span><br><span class="line">删除第二列：</span><br><span class="line">[[ <span class="number">0</span>  <span class="number">2</span>  <span class="number">3</span>]</span><br><span class="line"> [ <span class="number">4</span>  <span class="number">6</span>  <span class="number">7</span>]</span><br><span class="line"> [ <span class="number">8</span> <span class="number">10</span> <span class="number">11</span>]]</span><br><span class="line">包含从数组中删除的替代值的切片：</span><br><span class="line">[ <span class="number">2</span>  <span class="number">4</span>  <span class="number">6</span>  <span class="number">8</span>  <span class="number">10</span>]</span><br></pre></td></tr></table></figure><h3 id="（五），numpy-unique"><a href="#（五），numpy-unique" class="headerlink" title="（五），numpy.unique"></a>（五），numpy.unique</h3><blockquote><ul><li><code>numpy.unique(arr, return_index, return_inverse, return_counts)</code></li><li>arr：输入数组，如果不是一维数组则会展开</li><li>return_index：如果为true，返回新列表元素在旧列表中的位置（下标），并以列表形式储</li><li>return_inverse：如果为true，返回旧列表元素在新列表中的位置（下标），并以列表形式储</li><li>return_counts：如果为true，返回去重数组中的元素在原数组中的出现次数</li></ul></blockquote><h4 id="实例-14"><a href="#实例-14" class="headerlink" title="实例"></a>实例</h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a = np.array([<span class="number">5</span>,<span class="number">2</span>,<span class="number">6</span>,<span class="number">2</span>,<span class="number">7</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">2</span>,<span class="number">9</span>])</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'第一个数组：'</span>)</span><br><span class="line"><span class="keyword">print</span> (a)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'\n'</span>)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'第一个数组的去重值：'</span>)</span><br><span class="line">u = np.unique(a)</span><br><span class="line"><span class="keyword">print</span> (u)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'\n'</span>)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'去重数组的索引数组：'</span>)</span><br><span class="line">u,indices = np.unique(a, return_index = <span class="literal">True</span>)</span><br><span class="line"><span class="keyword">print</span> (indices)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'\n'</span>)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'我们可以看到每个和原数组下标对应的数值：'</span>)</span><br><span class="line"><span class="keyword">print</span> (a)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'\n'</span>)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'去重数组的下标：'</span>)</span><br><span class="line">u,indices = np.unique(a,return_inverse = <span class="literal">True</span>)</span><br><span class="line"><span class="keyword">print</span> (u)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'\n'</span>)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'下标为：'</span>)</span><br><span class="line"><span class="keyword">print</span> (indices)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'\n'</span>)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'使用下标重构原数组：'</span>)</span><br><span class="line"><span class="keyword">print</span> (u[indices])</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'\n'</span>)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'返回去重元素的重复数量：'</span>)</span><br><span class="line">u,indices = np.unique(a,return_counts = <span class="literal">True</span>)</span><br><span class="line"><span class="keyword">print</span> (u)</span><br><span class="line"><span class="keyword">print</span> (indices)</span><br><span class="line"><span class="comment">#输出结果为：</span></span><br><span class="line">第一个数组：</span><br><span class="line">[<span class="number">5</span> <span class="number">2</span> <span class="number">6</span> <span class="number">2</span> <span class="number">7</span> <span class="number">5</span> <span class="number">6</span> <span class="number">8</span> <span class="number">2</span> <span class="number">9</span>]</span><br><span class="line">第一个数组的去重值：</span><br><span class="line">[<span class="number">2</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span>]</span><br><span class="line">去重数组的索引数组：</span><br><span class="line">[<span class="number">1</span> <span class="number">0</span> <span class="number">2</span> <span class="number">4</span> <span class="number">7</span> <span class="number">9</span>]</span><br><span class="line">我们可以看到每个和原数组下标对应的数值：</span><br><span class="line">[<span class="number">5</span> <span class="number">2</span> <span class="number">6</span> <span class="number">2</span> <span class="number">7</span> <span class="number">5</span> <span class="number">6</span> <span class="number">8</span> <span class="number">2</span> <span class="number">9</span>]</span><br><span class="line">去重数组的下标：</span><br><span class="line">[<span class="number">2</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span>]</span><br><span class="line">下标为：</span><br><span class="line">[<span class="number">1</span> <span class="number">0</span> <span class="number">2</span> <span class="number">0</span> <span class="number">3</span> <span class="number">1</span> <span class="number">2</span> <span class="number">4</span> <span class="number">0</span> <span class="number">5</span>]</span><br><span class="line">使用下标重构原数组：</span><br><span class="line">[<span class="number">5</span> <span class="number">2</span> <span class="number">6</span> <span class="number">2</span> <span class="number">7</span> <span class="number">5</span> <span class="number">6</span> <span class="number">8</span> <span class="number">2</span> <span class="number">9</span>]</span><br><span class="line">返回去重元素的重复数量：</span><br><span class="line">[<span class="number">2</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span>]</span><br><span class="line">[<span class="number">3</span> <span class="number">2</span> <span class="number">2</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span>]</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;&amp;emsp;Numpy中的数组是多维数组，Numpy除了有很强的数组元素访问能力，还有很强的数组操作能力，以下是常用的Numpy数组操作函数：&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Python" scheme="https://keviness.github.io/tags/Python/"/>
    
      <category term="Numpy" scheme="https://keviness.github.io/tags/Numpy/"/>
    
      <category term="operations" scheme="https://keviness.github.io/tags/operations/"/>
    
  </entry>
  
  <entry>
    <title>Numpy（一）：numpy切片和索引</title>
    <link href="https://keviness.github.io/post/760d2243.html"/>
    <id>https://keviness.github.io/post/760d2243.html</id>
    <published>2020-07-22T16:00:00.000Z</published>
    <updated>2020-07-22T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>&emsp;NumPy(Numerical Python)是Python语言的一个扩展程序库，支持大量的维度数组与矩阵运算，此外也针对数组运算提供大量的数学函数库。NumPy 是一个运行速度非常快的数学库，主要用于数组计算。以下是numpy对多维数组进行切片和索引操作的总结。</p><a id="more"></a><h2 id="NumPy-切片和索引"><a href="#NumPy-切片和索引" class="headerlink" title="NumPy 切片和索引"></a>NumPy 切片和索引</h2><blockquote><ul><li>ndarray对象的内容可以通过索引或切片来访问和修改，与Python中list的切片操作一样。</li></ul></blockquote><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a = np.arange(<span class="number">10</span>)</span><br><span class="line">s = slice(<span class="number">2</span>,<span class="number">7</span>,<span class="number">2</span>)   <span class="comment">#从索引2开始到索引7停止，间隔为2</span></span><br><span class="line"><span class="keyword">print</span> (a[s])</span><br><span class="line"><span class="comment">#-&gt;[2  4  6]</span></span><br><span class="line"><span class="comment">#-----------------</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a = np.arange(<span class="number">10</span>)  </span><br><span class="line">b = a[<span class="number">2</span>:<span class="number">7</span>:<span class="number">2</span>]   <span class="comment"># 从索引 2 开始到索引 7 停止，间隔为 2</span></span><br><span class="line">print(b)</span><br><span class="line"><span class="comment">#-&gt;[2  4  6]</span></span><br><span class="line"><span class="comment">#-----------------</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a = np.arange(<span class="number">10</span>)  <span class="comment"># [0 1 2 3 4 5 6 7 8 9]</span></span><br><span class="line">b = a[<span class="number">5</span>] </span><br><span class="line">print(b)</span><br><span class="line"><span class="comment">#-&gt;5</span></span><br><span class="line"><span class="comment">#-----------------</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a = np.arange(<span class="number">10</span>)</span><br><span class="line">print(a[<span class="number">2</span>:])</span><br><span class="line"><span class="comment">#-&gt;[2  3  4  5  6  7  8  9]</span></span><br><span class="line"><span class="comment">#-----------------</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a = np.arange(<span class="number">10</span>)  <span class="comment"># [0 1 2 3 4 5 6 7 8 9]</span></span><br><span class="line">print(a[<span class="number">2</span>:<span class="number">5</span>])</span><br><span class="line"><span class="comment">#-&gt;[2  3  4]</span></span><br><span class="line"><span class="comment">#-----------------</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a = np.array([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>],[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]])</span><br><span class="line">print(a)</span><br><span class="line"><span class="comment"># 从某个索引处开始切割</span></span><br><span class="line">print(<span class="string">'从数组索引 a[1:] 处开始切割'</span>)</span><br><span class="line">print(a[<span class="number">1</span>:])</span><br><span class="line"><span class="comment">#-&gt;</span></span><br><span class="line">[[<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>]</span><br><span class="line"> [<span class="number">3</span> <span class="number">4</span> <span class="number">5</span>]</span><br><span class="line"> [<span class="number">4</span> <span class="number">5</span> <span class="number">6</span>]]</span><br><span class="line"><span class="comment">#从数组索引 a[1:] 处开始切割</span></span><br><span class="line">[[<span class="number">3</span> <span class="number">4</span> <span class="number">5</span>]</span><br><span class="line"> [<span class="number">4</span> <span class="number">5</span> <span class="number">6</span>]]</span><br><span class="line"><span class="comment">#-------------------&gt;</span></span><br><span class="line"><span class="comment">#切片还可以包括省略号 …，来使选择元组的长度与数组的维度相同。 如果在行位置使用省略号，它将返回包含行中元素的 ndarray。</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a = np.array([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>],[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]])  </span><br><span class="line"><span class="keyword">print</span> (a[...,<span class="number">1</span>])   <span class="comment"># 第2列元素</span></span><br><span class="line"><span class="keyword">print</span> (a[<span class="number">1</span>,...])   <span class="comment"># 第2行元素</span></span><br><span class="line"><span class="keyword">print</span> (a[...,<span class="number">1</span>:])  <span class="comment"># 第2列及剩下的所有元素</span></span><br><span class="line"><span class="comment">#-&gt;</span></span><br><span class="line">[<span class="number">2</span> <span class="number">4</span> <span class="number">5</span>]</span><br><span class="line">[<span class="number">3</span> <span class="number">4</span> <span class="number">5</span>]</span><br><span class="line">[[<span class="number">2</span> <span class="number">3</span>]</span><br><span class="line"> [<span class="number">4</span> <span class="number">5</span>]</span><br><span class="line"> [<span class="number">5</span> <span class="number">6</span>]]</span><br></pre></td></tr></table></figure><h2 id="Numpy高级索引"><a href="#Numpy高级索引" class="headerlink" title="Numpy高级索引"></a>Numpy高级索引</h2><blockquote><ul><li>NumPy比一般的Python序列提供更多的索引方式。除了之前看到的用整数和切片的索引外，数组可以由整数数组索引、布尔索引及花式索引。</li></ul></blockquote><h3 id="整数数组索引"><a href="#整数数组索引" class="headerlink" title="整数数组索引"></a>整数数组索引</h3><h4 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np </span><br><span class="line">x = np.array([[<span class="number">1</span>,  <span class="number">2</span>],  [<span class="number">3</span>,  <span class="number">4</span>],  [<span class="number">5</span>,  <span class="number">6</span>]]) </span><br><span class="line">y = x[[<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>],  [<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>]]  </span><br><span class="line"><span class="keyword">print</span> (y)</span><br><span class="line"><span class="comment">#输出结果为：[1  4  5]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#以下实例获取了 4X3 数组中的四个角的元素。 行索引是 [0,0] 和 [3,3]，而列索引是 [0,2] 和 [0,2]。</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np </span><br><span class="line">x = np.array([[  <span class="number">0</span>,  <span class="number">1</span>,  <span class="number">2</span>],[  <span class="number">3</span>,  <span class="number">4</span>,  <span class="number">5</span>],[  <span class="number">6</span>,  <span class="number">7</span>,  <span class="number">8</span>],[  <span class="number">9</span>,  <span class="number">10</span>,  <span class="number">11</span>]])  </span><br><span class="line"><span class="keyword">print</span> (<span class="string">'我们的数组是：'</span> )</span><br><span class="line"><span class="keyword">print</span> (x)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'\n'</span>)</span><br><span class="line">rows = np.array([[<span class="number">0</span>,<span class="number">0</span>],[<span class="number">3</span>,<span class="number">3</span>]]) </span><br><span class="line">cols = np.array([[<span class="number">0</span>,<span class="number">2</span>],[<span class="number">0</span>,<span class="number">2</span>]]) </span><br><span class="line">y = x[rows,cols]  </span><br><span class="line"><span class="keyword">print</span>  (<span class="string">'这个数组的四个角元素是：'</span>)</span><br><span class="line"><span class="keyword">print</span> (y)</span><br><span class="line"><span class="comment">#输出结果为：</span></span><br><span class="line">我们的数组是：</span><br><span class="line">[[ <span class="number">0</span>  <span class="number">1</span>  <span class="number">2</span>]</span><br><span class="line"> [ <span class="number">3</span>  <span class="number">4</span>  <span class="number">5</span>]</span><br><span class="line"> [ <span class="number">6</span>  <span class="number">7</span>  <span class="number">8</span>]</span><br><span class="line"> [ <span class="number">9</span> <span class="number">10</span> <span class="number">11</span>]]</span><br><span class="line">这个数组的四个角元素是：</span><br><span class="line">[[ <span class="number">0</span>  <span class="number">2</span>]</span><br><span class="line"> [ <span class="number">9</span> <span class="number">11</span>]]</span><br><span class="line"></span><br><span class="line"><span class="comment">#可以借助切片 : 或 … 与索引数组组合。如下面例子：</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a = np.array([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>], [<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>],[<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]])</span><br><span class="line">b = a[<span class="number">1</span>:<span class="number">3</span>, <span class="number">1</span>:<span class="number">3</span>]</span><br><span class="line">c = a[<span class="number">1</span>:<span class="number">3</span>,[<span class="number">1</span>,<span class="number">2</span>]]</span><br><span class="line">d = a[...,<span class="number">1</span>:]</span><br><span class="line">print(b)</span><br><span class="line">print(c)</span><br><span class="line">print(d)</span><br><span class="line"><span class="comment">#输出结果为：</span></span><br><span class="line">[[<span class="number">5</span> <span class="number">6</span>]</span><br><span class="line"> [<span class="number">8</span> <span class="number">9</span>]]</span><br><span class="line">[[<span class="number">5</span> <span class="number">6</span>]</span><br><span class="line"> [<span class="number">8</span> <span class="number">9</span>]]</span><br><span class="line">[[<span class="number">2</span> <span class="number">3</span>]</span><br><span class="line"> [<span class="number">5</span> <span class="number">6</span>]</span><br><span class="line"> [<span class="number">8</span> <span class="number">9</span>]]</span><br></pre></td></tr></table></figure><h3 id="布尔索引"><a href="#布尔索引" class="headerlink" title="布尔索引"></a>布尔索引</h3><blockquote><ul><li>布尔索引通过布尔运算（如：比较运算符）来获取符合指定条件的元素的数组。</li></ul></blockquote><h4 id="实例-2"><a href="#实例-2" class="headerlink" title="实例"></a>实例</h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np  </span><br><span class="line">x = np.array([[  <span class="number">0</span>,  <span class="number">1</span>,  <span class="number">2</span>],[  <span class="number">3</span>,  <span class="number">4</span>,  <span class="number">5</span>],[  <span class="number">6</span>,  <span class="number">7</span>,  <span class="number">8</span>],[  <span class="number">9</span>,  <span class="number">10</span>,  <span class="number">11</span>]])  </span><br><span class="line"><span class="keyword">print</span> (<span class="string">'我们的数组是：'</span>)</span><br><span class="line"><span class="keyword">print</span> (x)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'\n'</span>)</span><br><span class="line"><span class="comment"># 现在我们会打印出大于 5 的元素  </span></span><br><span class="line"><span class="keyword">print</span>  (<span class="string">'大于 5 的元素是：'</span>)</span><br><span class="line"><span class="keyword">print</span> (x[x &gt;  <span class="number">5</span>])</span><br><span class="line"><span class="comment">#输出结果为：</span></span><br><span class="line">我们的数组是：</span><br><span class="line">[[ <span class="number">0</span>  <span class="number">1</span>  <span class="number">2</span>]</span><br><span class="line"> [ <span class="number">3</span>  <span class="number">4</span>  <span class="number">5</span>]</span><br><span class="line"> [ <span class="number">6</span>  <span class="number">7</span>  <span class="number">8</span>]</span><br><span class="line"> [ <span class="number">9</span> <span class="number">10</span> <span class="number">11</span>]]</span><br><span class="line">大于 <span class="number">5</span> 的元素是：</span><br><span class="line">[ <span class="number">6</span>  <span class="number">7</span>  <span class="number">8</span>  <span class="number">9</span> <span class="number">10</span> <span class="number">11</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#以下实例使用了 ~（取补运算符）来过滤 NaN。</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np </span><br><span class="line">a = np.array([np.nan,  <span class="number">1</span>,<span class="number">2</span>,np.nan,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>])  </span><br><span class="line"><span class="keyword">print</span> (a[~np.isnan(a)])</span><br><span class="line"><span class="comment">#输出结果为：</span></span><br><span class="line">[ <span class="number">1.</span>   <span class="number">2.</span>   <span class="number">3.</span>   <span class="number">4.</span>   <span class="number">5.</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#以下实例演示如何从数组中过滤掉非复数元素。</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np </span><br><span class="line">a = np.array([<span class="number">1</span>,  <span class="number">2</span>+<span class="number">6j</span>,  <span class="number">5</span>,  <span class="number">3.5</span>+<span class="number">5j</span>])  </span><br><span class="line"><span class="keyword">print</span> (a[np.iscomplex(a)])</span><br><span class="line"><span class="comment">#输出如下：</span></span><br><span class="line">[<span class="number">2.0</span>+<span class="number">6.j</span>  <span class="number">3.5</span>+<span class="number">5.j</span>]</span><br></pre></td></tr></table></figure><h3 id="花式索引"><a href="#花式索引" class="headerlink" title="花式索引"></a>花式索引</h3><blockquote><ul><li>花式索引指的是利用整数数组进行索引。</li><li>花式索引根据索引数组的值作为目标数组的某个轴的下标来取值。对于使用一维整型数组作为索引，如果目标是一维数组，那么索引的结果就是对应位置的元素；如果目标是二维数组，那么就是对应下标的行。</li><li>花式索引跟切片不一样，它总是将数据复制到新数组中。</li></ul></blockquote><h4 id="1、传入顺序索引数组"><a href="#1、传入顺序索引数组" class="headerlink" title="1、传入顺序索引数组"></a>1、传入顺序索引数组</h4><h5 id="实例-3"><a href="#实例-3" class="headerlink" title="实例"></a>实例</h5><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np </span><br><span class="line">x=np.arange(<span class="number">32</span>).reshape((<span class="number">8</span>,<span class="number">4</span>))</span><br><span class="line"><span class="keyword">print</span> (x[[<span class="number">4</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">7</span>]])</span><br><span class="line"><span class="comment">#输出结果为：</span></span><br><span class="line">[[<span class="number">16</span> <span class="number">17</span> <span class="number">18</span> <span class="number">19</span>]</span><br><span class="line"> [ <span class="number">8</span>  <span class="number">9</span> <span class="number">10</span> <span class="number">11</span>]</span><br><span class="line"> [ <span class="number">4</span>  <span class="number">5</span>  <span class="number">6</span>  <span class="number">7</span>]</span><br><span class="line"> [<span class="number">28</span> <span class="number">29</span> <span class="number">30</span> <span class="number">31</span>]]</span><br></pre></td></tr></table></figure><h4 id="2、传入倒序索引数组"><a href="#2、传入倒序索引数组" class="headerlink" title="2、传入倒序索引数组"></a>2、传入倒序索引数组</h4><h5 id="实例-4"><a href="#实例-4" class="headerlink" title="实例"></a>实例</h5><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np </span><br><span class="line">x=np.arange(<span class="number">32</span>).reshape((<span class="number">8</span>,<span class="number">4</span>))</span><br><span class="line"><span class="keyword">print</span> (x[[<span class="number">-4</span>,<span class="number">-2</span>,<span class="number">-1</span>,<span class="number">-7</span>]])</span><br><span class="line"><span class="comment">#输出结果为：</span></span><br><span class="line">[[<span class="number">16</span> <span class="number">17</span> <span class="number">18</span> <span class="number">19</span>]</span><br><span class="line"> [<span class="number">24</span> <span class="number">25</span> <span class="number">26</span> <span class="number">27</span>]</span><br><span class="line"> [<span class="number">28</span> <span class="number">29</span> <span class="number">30</span> <span class="number">31</span>]</span><br><span class="line"> [ <span class="number">4</span>  <span class="number">5</span>  <span class="number">6</span>  <span class="number">7</span>]]</span><br></pre></td></tr></table></figure><h4 id="3、传入多个索引数组（要使用np-ix-）"><a href="#3、传入多个索引数组（要使用np-ix-）" class="headerlink" title="3、传入多个索引数组（要使用np.ix_）"></a>3、传入多个索引数组（要使用np.ix_）</h4><h5 id="实例-5"><a href="#实例-5" class="headerlink" title="实例"></a>实例</h5><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np </span><br><span class="line">x=np.arange(<span class="number">32</span>).reshape((<span class="number">8</span>,<span class="number">4</span>))</span><br><span class="line"><span class="keyword">print</span> (x[np.ix_([<span class="number">1</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">2</span>],[<span class="number">0</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">2</span>])])</span><br><span class="line"><span class="comment">#输出结果为：</span></span><br><span class="line">[[ <span class="number">4</span>  <span class="number">7</span>  <span class="number">5</span>  <span class="number">6</span>]</span><br><span class="line"> [<span class="number">20</span> <span class="number">23</span> <span class="number">21</span> <span class="number">22</span>]</span><br><span class="line"> [<span class="number">28</span> <span class="number">31</span> <span class="number">29</span> <span class="number">30</span>]</span><br><span class="line"> [ <span class="number">8</span> <span class="number">11</span>  <span class="number">9</span> <span class="number">10</span>]]</span><br><span class="line"><span class="comment">#---------------------</span></span><br><span class="line"><span class="comment">#x[np.ix_([1,5,7,2],[0,3,1,2])]这句话会输出一个4*4的矩阵，其中的元素分别是：</span></span><br><span class="line">x[<span class="number">1</span>,<span class="number">0</span>] x[<span class="number">1</span>,<span class="number">3</span>] x[<span class="number">1</span>,<span class="number">1</span>] x[<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line">x[<span class="number">5</span>,<span class="number">0</span>] x[<span class="number">5</span>,<span class="number">3</span>] x[<span class="number">5</span>,<span class="number">1</span>] x[<span class="number">5</span>,<span class="number">2</span>]</span><br><span class="line">x[<span class="number">7</span>,<span class="number">0</span>] x[<span class="number">7</span>,<span class="number">3</span>] x[<span class="number">7</span>,<span class="number">1</span>] x[<span class="number">7</span>,<span class="number">2</span>]</span><br><span class="line">x[<span class="number">2</span>,<span class="number">0</span>] x[<span class="number">2</span>,<span class="number">3</span>] x[<span class="number">2</span>,<span class="number">1</span>] x[<span class="number">2</span>,<span class="number">2</span>]</span><br><span class="line"><span class="comment">#相当于：</span></span><br><span class="line">y=np.array([[x[<span class="number">1</span>,<span class="number">0</span>], x[<span class="number">1</span>,<span class="number">3</span>], x[<span class="number">1</span>,<span class="number">1</span>], x[<span class="number">1</span>,<span class="number">2</span>]],\</span><br><span class="line">            [x[<span class="number">5</span>,<span class="number">0</span>], x[<span class="number">5</span>,<span class="number">3</span>], x[<span class="number">5</span>,<span class="number">1</span>],x[<span class="number">5</span>,<span class="number">2</span>]],\</span><br><span class="line">            [x[<span class="number">7</span>,<span class="number">0</span>] ,x[<span class="number">7</span>,<span class="number">3</span>], x[<span class="number">7</span>,<span class="number">1</span>], x[<span class="number">7</span>,<span class="number">2</span>]],\</span><br><span class="line">            [x[<span class="number">2</span>,<span class="number">0</span>], x[<span class="number">2</span>,<span class="number">3</span>], x[<span class="number">2</span>,<span class="number">1</span>], x[<span class="number">2</span>,<span class="number">2</span>]]])</span><br><span class="line"><span class="comment">#如果 np.xi_ 中输入两个列表，则第一个列表存的是待提取元素的行标，第二个列表存的是待提取元素的列标.</span></span><br><span class="line"><span class="comment">#第一个列表中的每个元素都会遍历第二个列表中的每个值，构成新矩阵的一行元素。</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;&amp;emsp;NumPy(Numerical Python)是Python语言的一个扩展程序库，支持大量的维度数组与矩阵运算，此外也针对数组运算提供大量的数学函数库。NumPy 是一个运行速度非常快的数学库，主要用于数组计算。以下是numpy对多维数组进行切片和索引操作的总结。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Python" scheme="https://keviness.github.io/tags/Python/"/>
    
      <category term="Numpy" scheme="https://keviness.github.io/tags/Numpy/"/>
    
      <category term="slice" scheme="https://keviness.github.io/tags/slice/"/>
    
      <category term="index" scheme="https://keviness.github.io/tags/index/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript Timing Event</title>
    <link href="https://keviness.github.io/post/c9819eef.html"/>
    <id>https://keviness.github.io/post/c9819eef.html</id>
    <published>2020-07-10T16:00:00.000Z</published>
    <updated>2020-07-10T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>&emsp;在web编程中，我们经常需要重复一件事，或者让一个操作多次重复执行。JavaSript为我们提供了两个相关函数，这两个函数有共同也有不同之处，以下是一些个总结:</p><a id="more"></a><h2 id="一，总述"><a href="#一，总述" class="headerlink" title="一，总述"></a>一，总述</h2><blockquote><ul><li>window 对象允许以指定的时间间隔执行代码，这些时间间隔称为定时事件。</li><li><code>setTimeout(function, milliseconds)</code></li><li><code>setInterval(function, milliseconds)</code></li><li><code>setTimeout()</code>只可执行一次该函数，可以通过放在函数中（递归）持续执行该函数。</li><li><code>setInterval()</code>等同于 <code>setTimeout()</code>，但可以持续重复执行该函数。</li><li><code>setTimeout()</code> 和 <code>setInterval()</code>都属于 HTML DOM Window对象的方法。</li></ul></blockquote><h2 id="二，setTimeout"><a href="#二，setTimeout" class="headerlink" title="二，setTimeout()"></a>二，setTimeout()</h2><blockquote><ul><li><code>window.setTimeout(function, milliseconds);</code></li><li><code>window.setTimeout()</code>可不带window前缀来编写。</li><li>第一个参数是要执行的函数，第二个参数指示执行之前的毫秒数。</li></ul></blockquote><h3 id="停止执行clearTimeout"><a href="#停止执行clearTimeout" class="headerlink" title="停止执行clearTimeout()"></a>停止执行clearTimeout()</h3><blockquote><ul><li>停止执行<code>setTimeout()</code>中规定的函数。</li><li><code>clearTimeout()</code>使用从<code>setTimeout()</code>返回的变量：</li><li><code>window.clearTimeout(timeoutVariable)</code></li></ul></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">myVar = setTimeout(<span class="function"><span class="keyword">function</span>, <span class="title">milliseconds</span>);</span></span><br><span class="line"><span class="function"><span class="title">clearTimeout</span>(<span class="params">myVar</span>);</span></span><br></pre></td></tr></table></figure><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//example1: setTimeout()在函数外</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">timedText</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  setTimeout(myTimeout1, <span class="number">2000</span>) </span><br><span class="line">  setTimeout(myTimeout2, <span class="number">4000</span>) </span><br><span class="line">  setTimeout(myTimeout3, <span class="number">6000</span>) </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myTimeout1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">"demo"</span>).innerHTML = <span class="string">"2 秒"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myTimeout2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">"demo"</span>).innerHTML = <span class="string">"4 秒"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myTimeout3</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">"demo"</span>).innerHTML = <span class="string">"6 秒"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//example2: setTimeout()在函数之内（递归）</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">startTime</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> today = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">  <span class="keyword">var</span> h = today.getHours();</span><br><span class="line">  <span class="keyword">var</span> m = today.getMinutes();</span><br><span class="line">  <span class="keyword">var</span> s = today.getSeconds();</span><br><span class="line">  m = checkTime(m);</span><br><span class="line">  s = checkTime(s);</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">'txt'</span>).innerHTML =</span><br><span class="line">  h + <span class="string">":"</span> + m + <span class="string">":"</span> + s;</span><br><span class="line">  <span class="keyword">var</span> t = setTimeout(startTime, <span class="number">500</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkTime</span>(<span class="params">i</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (i &lt; <span class="number">10</span>) &#123;i = <span class="string">"0"</span> + i&#125;;  <span class="comment">// 在数字 &lt; 10 之前加零</span></span><br><span class="line">  <span class="keyword">return</span> i;</span><br></pre></td></tr></table></figure><h2 id="三，setInterval"><a href="#三，setInterval" class="headerlink" title="三，setInterval()"></a>三，setInterval()</h2><blockquote><ul><li>在每个给定的时间间隔重复给定的函数。</li><li><code>window.setInterval(function, milliseconds);</code></li><li>第一个参数是要执行的函数。</li><li>第二个参数每个执行之间的时间间隔的长度。</li><li><code>window.setInterval()</code>方法可以不带window前缀。</li></ul></blockquote><h3 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//显示当前时间：</span></span><br><span class="line"><span class="comment">//1s=1000ms</span></span><br><span class="line"><span class="keyword">var</span> myVar = setInterval(myTimer, <span class="number">1000</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myTimer</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> d = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">"demo"</span>).innerHTML = d.toLocaleTimeString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="停止执行clearInterval"><a href="#停止执行clearInterval" class="headerlink" title="停止执行clearInterval()"></a>停止执行clearInterval()</h3><blockquote><ul><li>停止<code>setInterval()</code>方法中指定的函数的执行。</li><li><code>window.clearInterval(timerVariable)</code></li><li><code>clearInterval()</code>方法使用从<code>setInterval()</code>返回的变量：</li></ul></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">myVar = setInterval(<span class="function"><span class="keyword">function</span>, <span class="title">milliseconds</span>);</span></span><br><span class="line"><span class="function"><span class="title">clearInterval</span>(<span class="params">myVar</span>);</span></span><br></pre></td></tr></table></figure><h3 id="示例-2"><a href="#示例-2" class="headerlink" title="示例"></a>示例</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;p id=<span class="string">"demo"</span>&gt;&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">&lt;button onclick="clearInterval(myVar)"&gt;停止时间&lt;/</span>button&gt;</span><br><span class="line"><span class="keyword">var</span> myVar = setInterval(myTimer, <span class="number">1000</span>);</span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">myTimer</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> d = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">"demo"</span>).innerHTML = d.toLocaleTimeString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;&amp;emsp;在web编程中，我们经常需要重复一件事，或者让一个操作多次重复执行。JavaSript为我们提供了两个相关函数，这两个函数有共同也有不同之处，以下是一些个总结:&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="JavaScript" scheme="https://keviness.github.io/tags/JavaScript/"/>
    
      <category term="time" scheme="https://keviness.github.io/tags/time/"/>
    
      <category term="event" scheme="https://keviness.github.io/tags/event/"/>
    
  </entry>
  
  <entry>
    <title>Location Object概述</title>
    <link href="https://keviness.github.io/post/abe472d8.html"/>
    <id>https://keviness.github.io/post/abe472d8.html</id>
    <published>2020-07-07T14:52:21.737Z</published>
    <updated>2020-07-07T14:52:21.737Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>&emsp;以史为鉴，是人类发明的一种不错的改善当前经验的方法。每个人从过去的经历中学习到了很多，历史对我们而言十分重要。在web世界中，我们如何对待曾经发生过的历史呢？</p><a id="more"></a><h2 id="一，Location-对象属性"><a href="#一，Location-对象属性" class="headerlink" title="一，Location 对象属性"></a>一，Location 对象属性</h2><table><thead><tr><th align="center">属性</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">hash</td><td align="center">设置或返回从井号 (#) 开始的 URL（锚）。</td></tr><tr><td align="center">host</td><td align="center">设置或返回主机名和当前 URL 的端口号。</td></tr><tr><td align="center">hostname</td><td align="center">设置或返回当前 URL 的主机名。</td></tr><tr><td align="center">href</td><td align="center">设置或返回完整的 URL。</td></tr><tr><td align="center">pathname</td><td align="center">设置或返回当前 URL 的路径部分。</td></tr><tr><td align="center">port</td><td align="center">设置或返回当前 URL 的端口号。</td></tr><tr><td align="center">protocol</td><td align="center">设置或返回当前 URL 的协议。</td></tr><tr><td align="center">search</td><td align="center">设置或返回从问号 (?) 开始的 URL（查询部分）。</td></tr></tbody></table><h2 id="二，Location对象方法"><a href="#二，Location对象方法" class="headerlink" title="二，Location对象方法"></a>二，Location对象方法</h2><table><thead><tr><th align="center">属性</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">assign()</td><td align="center">加载新的文档。</td></tr><tr><td align="center">reload()</td><td align="center">重新加载当前文档。</td></tr><tr><td align="center">replace()</td><td align="center">用新的文档替换当前文档。</td></tr></tbody></table><h3 id="Location-hash示例"><a href="#Location-hash示例" class="headerlink" title="Location hash示例"></a>Location hash示例</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> bodyObj = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"body"</span>)[<span class="number">0</span>];</span><br><span class="line">bodyObj.addEventListener(<span class="string">"click"</span>, getButtonValue, <span class="literal">false</span>);</span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">"hashchange"</span>, showToCont, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getButtonValue</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> targetElement = event.target;</span><br><span class="line">    <span class="keyword">if</span> (targetElement.nodeName.toLowerCase() === <span class="string">"button"</span>) &#123;</span><br><span class="line">        value = targetElement.innerHTML;</span><br><span class="line">        location.hash = value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showToCont</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> value,</span><br><span class="line">        contObj;</span><br><span class="line"></span><br><span class="line">    contObj = <span class="built_in">document</span>.querySelector(<span class="string">"#cont"</span>);</span><br><span class="line">    value = getLocationHash();</span><br><span class="line">    <span class="keyword">if</span> (value) &#123;</span><br><span class="line">        contObj.innerHTML = value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getLocationHash</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> hashValue = location.hash;</span><br><span class="line">    <span class="keyword">return</span> hashValue? hashValue.substring(<span class="number">1</span>, hashValue.length):<span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三，pushState-和replaceState"><a href="#三，pushState-和replaceState" class="headerlink" title="三，pushState()和replaceState()"></a>三，pushState()和replaceState()</h2><blockquote><ul><li><code>history.pushState/replaceState(state, title, url)</code>;</li><li>state：存储JSON字符串，可以用在popstate事件中。</li><li>title：现在大多数浏览器不支持或者忽略这个参数，最好用null代替</li><li>url：任意有效的URL.</li><li>两个方法的主要区别：<code>pushState()</code>是在history栈中添加一个新的条目，<code>replaceState()</code>是替换当前的记录值。</li></ul></blockquote><h2 id="四，popstate"><a href="#四，popstate" class="headerlink" title="四，popstate"></a>四，popstate</h2><blockquote><ul><li>当前活动历史项(history entry)改变会触发popstate事件。</li><li>调用<code>history.pushState()</code>创建新的历史项(history entry)，或调用<code>history.replaceState()</code>替换新的历史项(history entry)，那么popstate事件的state属性会包含历史项(history entry)状态对象(state object)的拷贝。</li><li>注意,调用<code>history.pushState()</code>或<code>history.replaceState()</code>不会触发popstate事件。只有在做出浏览器动作时，才会触发该事件，如用户点击浏览器的回退按钮（或者在Javascript代码中调用<code>history.back()</code>）</li><li>不同的浏览器在加载页面时处理popstate事件的形式存在差异。页面加载时Chrome和Safari通常会触发popstate事件，但Firefox则不会。</li></ul></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onpopstate = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//浏览器触发返回和前进时触发</span></span><br><span class="line">    <span class="built_in">console</span>.log(e.state);</span><br><span class="line">   &#125;;</span><br></pre></td></tr></table></figure><h2 id="五，History对象"><a href="#五，History对象" class="headerlink" title="五，History对象"></a>五，History对象</h2><ul><li><code>history.pushState()</code>会增加历史记录的条目，但是不会触发hashchange和popstate；</li><li>hashchange也可以增加历史记录的条目，但是它却可以触发popstate。</li></ul><h2 id="六，change事件"><a href="#六，change事件" class="headerlink" title="六，change事件"></a>六，change事件</h2><ul><li>change事件在<code>&lt;input&gt;</code>, <code>&lt;select&gt;</code>, 和<code>&lt;textarea&gt;</code>元素的值更改时触发；与input事件不同，change事件不一定会对元素值的每次更改触发。</li><li><code>&lt;input type=&quot;radio&quot;&gt;</code>和<code>&lt;input type=&quot;checkbox&quot;&gt;</code>的默认选项被修改时，例如：通过点击或者键盘事件；<br>如：点击了<code>&lt;select&gt;</code>中的一个选项，从<code>&lt;input type=&quot;date&quot;&gt;</code>标签选择了一个日期，通过<code>&lt;input type=&quot;file&quot;&gt;</code>标签上传了一个文件等；</li></ul><ul><li>当标签的值被修改并且失焦后，但并未进行提交，例如：对<code>&lt;textarea&gt;</code>或者<code>&lt;input type=&quot;text&quot;&gt;</code>的值进行编辑后。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;&amp;emsp;以史为鉴，是人类发明的一种不错的改善当前经验的方法。每个人从过去的经历中学习到了很多，历史对我们而言十分重要。在web世界中，我们如何对待曾经发生过的历史呢？&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="JavaScript" scheme="https://keviness.github.io/tags/JavaScript/"/>
    
      <category term="location" scheme="https://keviness.github.io/tags/location/"/>
    
      <category term="hash" scheme="https://keviness.github.io/tags/hash/"/>
    
      <category term="history" scheme="https://keviness.github.io/tags/history/"/>
    
  </entry>
  
  <entry>
    <title>Canvas概述</title>
    <link href="https://keviness.github.io/post/53ec7d50.html"/>
    <id>https://keviness.github.io/post/53ec7d50.html</id>
    <published>2020-06-29T16:00:00.000Z</published>
    <updated>2020-06-29T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>&emsp;眨眼之间，2020年已经过去了一半。前端学习的计划还没结束，新的计划就要开始，顿时感觉压力倍增呀。暑假是一个很好的学习时间，希望在这一段时间的“闭关”中，我能够打牢基础，为以后的学习做准备。<br>&emsp;闲言少叙，除了SVG之外，HTML5新增了canvas绘图利器，在动态展现表格数据方面有着强大的功能。</p><a id="more"></a><h2 id="Canvas定义"><a href="#Canvas定义" class="headerlink" title="Canvas定义"></a>Canvas定义</h2><blockquote><ul><li>HTML5 canvas标签用于绘制图像。</li><li>getContext()方法可返回一个对象，该对象提供了用于在画布上绘图的方法和属性。</li><li>canvas元素创造了一个固定大小的画布，它公开了一个或多个渲染上下文，其可以用来绘制和处理要展示的内容。</li><li>canvas元素有一个叫做 getContext()的方法，这个方法是用来获得渲染上下文和它的绘画功能。getContext()只有一个参数，上下文的格式。</li></ul></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">'tutorial'</span>);</span><br><span class="line"><span class="keyword">var</span> ctx = canvas.getContext(<span class="string">'2d'</span>);</span><br></pre></td></tr></table></figure><h2 id="Canvas绘制常见图形"><a href="#Canvas绘制常见图形" class="headerlink" title="Canvas绘制常见图形"></a>Canvas绘制常见图形</h2><h3 id="线条"><a href="#线条" class="headerlink" title="线条"></a>线条</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">beginPath()  <span class="comment">//新建一条路径，生成之后，图形绘制命令被指向到路径上生成路径。</span></span><br><span class="line">closePath()  <span class="comment">//闭合路径之后图形绘制命令又重新指向到上下文中。</span></span><br><span class="line">stroke()  <span class="comment">//通过线条来绘制图形轮廓。</span></span><br><span class="line">fill()  <span class="comment">//通过填充路径的内容区域生成实心的图形。</span></span><br><span class="line">lineTo(x, y)  <span class="comment">//绘制一条从当前位置到指定x以及y位置的直线。</span></span><br><span class="line">moveTo(x, y)  <span class="comment">//将笔触移动到指定的坐标x以及y上。</span></span><br></pre></td></tr></table></figure><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//绘制三角形</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">draw</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">'canvas'</span>);</span><br><span class="line">  <span class="keyword">if</span> (canvas.getContext)&#123;</span><br><span class="line">  <span class="keyword">var</span> ctx = canvas.getContext(<span class="string">'2d'</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 填充三角形</span></span><br><span class="line">  ctx.beginPath();</span><br><span class="line">  ctx.moveTo(<span class="number">25</span>, <span class="number">25</span>);</span><br><span class="line">  ctx.lineTo(<span class="number">105</span>, <span class="number">25</span>);</span><br><span class="line">  ctx.lineTo(<span class="number">25</span>, <span class="number">105</span>);</span><br><span class="line">  ctx.fill();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 描边三角形</span></span><br><span class="line">  ctx.beginPath();</span><br><span class="line">  ctx.moveTo(<span class="number">125</span>, <span class="number">125</span>);</span><br><span class="line">  ctx.lineTo(<span class="number">125</span>, <span class="number">45</span>);</span><br><span class="line">  ctx.lineTo(<span class="number">45</span>, <span class="number">125</span>);</span><br><span class="line">  ctx.closePath();</span><br><span class="line">  ctx.stroke();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="矩形"><a href="#矩形" class="headerlink" title="矩形"></a>矩形</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fillRect(x, y, width, height)  <span class="comment">//绘制一个填充的矩形</span></span><br><span class="line">strokeRect(x, y, width, height)  <span class="comment">//绘制一个矩形的边框</span></span><br><span class="line">clearRect(x, y, width, height)  <span class="comment">//清除指定矩形区域，让清除部分完全透明。</span></span><br></pre></td></tr></table></figure><h4 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//绘制矩形</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">draw</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">'canvas'</span>);</span><br><span class="line">  <span class="keyword">if</span> (canvas.getContext) &#123;</span><br><span class="line">    <span class="keyword">var</span> ctx = canvas.getContext(<span class="string">'2d'</span>);</span><br><span class="line"></span><br><span class="line">    ctx.fillRect(<span class="number">25</span>, <span class="number">25</span>, <span class="number">100</span>, <span class="number">100</span>);</span><br><span class="line">    ctx.clearRect(<span class="number">45</span>, <span class="number">45</span>, <span class="number">60</span>, <span class="number">60</span>);</span><br><span class="line">    ctx.strokeRect(<span class="number">50</span>, <span class="number">50</span>, <span class="number">50</span>, <span class="number">50</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="圆弧"><a href="#圆弧" class="headerlink" title="圆弧"></a>圆弧</h3><blockquote><ul><li>画一个以（x,y）为圆心的以radius为半径的圆弧（圆），从startAngle开始到endAngle结束，按照anticlockwise给定的方向（默认为顺时针）来生成。</li><li>arc()函数中表示角的单位是弧度，不是角度。角度与弧度的js表达式:<br>弧度=(Math.PI/180)*角度。</li></ul></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arc(x, y, radius, startAngle, endAngle, anticlockwise)</span><br></pre></td></tr></table></figure><h4 id="示例-2"><a href="#示例-2" class="headerlink" title="示例"></a>示例</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//绘画一个笑脸</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">draw</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">'canvas'</span>);</span><br><span class="line">  <span class="keyword">if</span> (canvas.getContext)&#123;</span><br><span class="line">    <span class="keyword">var</span> ctx = canvas.getContext(<span class="string">'2d'</span>);</span><br><span class="line"></span><br><span class="line">    ctx.beginPath();</span><br><span class="line">    ctx.arc(<span class="number">75</span>, <span class="number">75</span>, <span class="number">50</span>, <span class="number">0</span>, <span class="built_in">Math</span>.PI * <span class="number">2</span>, <span class="literal">true</span>); <span class="comment">// 绘制</span></span><br><span class="line">    ctx.moveTo(<span class="number">110</span>, <span class="number">75</span>);</span><br><span class="line">    ctx.arc(<span class="number">75</span>, <span class="number">75</span>, <span class="number">35</span>, <span class="number">0</span>, <span class="built_in">Math</span>.PI, <span class="literal">false</span>);   <span class="comment">// 口(顺时针)</span></span><br><span class="line">    ctx.moveTo(<span class="number">65</span>, <span class="number">65</span>);</span><br><span class="line">    ctx.arc(<span class="number">60</span>, <span class="number">65</span>, <span class="number">5</span>, <span class="number">0</span>, <span class="built_in">Math</span>.PI * <span class="number">2</span>, <span class="literal">true</span>);  <span class="comment">// 左眼</span></span><br><span class="line">    ctx.moveTo(<span class="number">95</span>, <span class="number">65</span>);</span><br><span class="line">    ctx.arc(<span class="number">90</span>, <span class="number">65</span>, <span class="number">5</span>, <span class="number">0</span>, <span class="built_in">Math</span>.PI * <span class="number">2</span>, <span class="literal">true</span>);  <span class="comment">// 右眼</span></span><br><span class="line">    ctx.stroke();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="曲线"><a href="#曲线" class="headerlink" title="曲线"></a>曲线</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">quadraticCurveTo(cp1x, cp1y, x, y)  <span class="comment">//绘制二次贝塞尔曲线，cp1x,cp1y为一个控制点，x,y为结束点。</span></span><br><span class="line">bezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y)  <span class="comment">//绘制三次贝塞尔曲线，cp1x,cp1y为控制点一，cp2x,cp2y为控制点二，x,y为结束点。</span></span><br></pre></td></tr></table></figure><h4 id="示例-3"><a href="#示例-3" class="headerlink" title="示例"></a>示例</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">draw</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">'canvas'</span>);</span><br><span class="line">  <span class="keyword">if</span> (canvas.getContext) &#123;</span><br><span class="line">    <span class="keyword">var</span> ctx = canvas.getContext(<span class="string">'2d'</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 二次贝塞尔曲线</span></span><br><span class="line">    ctx.beginPath();</span><br><span class="line">    ctx.moveTo(<span class="number">75</span>, <span class="number">25</span>);</span><br><span class="line">    ctx.quadraticCurveTo(<span class="number">25</span>, <span class="number">25</span>, <span class="number">25</span>, <span class="number">62.5</span>);</span><br><span class="line">    ctx.quadraticCurveTo(<span class="number">25</span>, <span class="number">100</span>, <span class="number">50</span>, <span class="number">100</span>);</span><br><span class="line">    ctx.quadraticCurveTo(<span class="number">50</span>, <span class="number">120</span>, <span class="number">30</span>, <span class="number">125</span>);</span><br><span class="line">    ctx.quadraticCurveTo(<span class="number">60</span>, <span class="number">120</span>, <span class="number">65</span>, <span class="number">100</span>);</span><br><span class="line">    ctx.quadraticCurveTo(<span class="number">125</span>, <span class="number">100</span>, <span class="number">125</span>, <span class="number">62.5</span>);</span><br><span class="line">    ctx.quadraticCurveTo(<span class="number">125</span>, <span class="number">25</span>, <span class="number">75</span>, <span class="number">25</span>);</span><br><span class="line">    ctx.stroke();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="文本"><a href="#文本" class="headerlink" title="文本"></a>文本</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fillText(text, x, y [, maxWidth]) <span class="comment">//在指定的(x,y)位置填充指定的文本，绘制的最大宽度是可选的.</span></span><br><span class="line">strokeText(text, x, y [, maxWidth])  <span class="comment">//在指定的(x,y)位置绘制文本边框，绘制的最大宽度是可选的.</span></span><br></pre></td></tr></table></figure><h4 id="示例-4"><a href="#示例-4" class="headerlink" title="示例"></a>示例</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//填充文本</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">draw</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> ctx = <span class="built_in">document</span>.getElementById(<span class="string">'canvas'</span>).getContext(<span class="string">'2d'</span>);</span><br><span class="line">  ctx.font = <span class="string">"48px serif"</span>;</span><br><span class="line">  ctx.fillText(<span class="string">"Hello world"</span>, <span class="number">10</span>, <span class="number">50</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//文本边框</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">draw</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> ctx = <span class="built_in">document</span>.getElementById(<span class="string">'canvas'</span>).getContext(<span class="string">'2d'</span>);</span><br><span class="line">  ctx.font = <span class="string">"48px serif"</span>;</span><br><span class="line">  ctx.strokeText(<span class="string">"Hello world"</span>, <span class="number">10</span>, <span class="number">50</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;&amp;emsp;眨眼之间，2020年已经过去了一半。前端学习的计划还没结束，新的计划就要开始，顿时感觉压力倍增呀。暑假是一个很好的学习时间，希望在这一段时间的“闭关”中，我能够打牢基础，为以后的学习做准备。&lt;br&gt;&amp;emsp;闲言少叙，除了SVG之外，HTML5新增了canvas绘图利器，在动态展现表格数据方面有着强大的功能。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="JavaScript" scheme="https://keviness.github.io/tags/JavaScript/"/>
    
      <category term="canvas" scheme="https://keviness.github.io/tags/canvas/"/>
    
  </entry>
  
  <entry>
    <title>SVG概述</title>
    <link href="https://keviness.github.io/post/c8d4b451.html"/>
    <id>https://keviness.github.io/post/c8d4b451.html</id>
    <published>2020-06-28T16:00:00.000Z</published>
    <updated>2020-06-28T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>&emsp;在web中我们经常需要进行数据的可视化，让数据的呈现更为立体形象。SVG为我们提供了一个不错的选择，以下是一些总结：</p><a id="more"></a><h2 id="SVG"><a href="#SVG" class="headerlink" title="SVG"></a>SVG</h2><blockquote><ul><li>SVG意为可缩放矢量图形（Scalable Vector Graphics）。</li><li>使用XML格式定义图像。</li></ul></blockquote><h2 id="SVG常见绘图"><a href="#SVG常见绘图" class="headerlink" title="SVG常见绘图"></a>SVG常见绘图</h2><h3 id="圆形"><a href="#圆形" class="headerlink" title="圆形 "></a>圆形 <circle></circle></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;svg xmlns=<span class="string">"http://www.w3.org/2000/svg"</span> version=<span class="string">"1.1"</span>&gt;</span><br><span class="line">   &lt;circle cx=<span class="string">"100"</span> cy=<span class="string">"50"</span> r=<span class="string">"40"</span> stroke=<span class="string">"black"</span> stroke-width=<span class="string">"2"</span> fill=<span class="string">"red"</span> /&gt;</span><br><span class="line">&lt;<span class="regexp">/svg&gt;</span></span><br></pre></td></tr></table></figure><h3 id="椭圆"><a href="#椭圆" class="headerlink" title="椭圆 "></a>椭圆 <ellipse></ellipse></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;svg xmlns=<span class="string">"http://www.w3.org/2000/svg"</span> version=<span class="string">"1.1"</span>&gt;</span><br><span class="line">  &lt;ellipse cx=<span class="string">"300"</span> cy=<span class="string">"80"</span> rx=<span class="string">"100"</span> ry=<span class="string">"50"</span></span><br><span class="line">  style=<span class="string">"fill:yellow;stroke:purple;stroke-width:2"</span>/&gt;</span><br><span class="line">&lt;<span class="regexp">/svg&gt;</span></span><br></pre></td></tr></table></figure><h3 id="矩形"><a href="#矩形" class="headerlink" title="矩形 "></a>矩形 <rect></rect></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//普通矩形</span></span><br><span class="line">&lt;svg xmlns=<span class="string">"http://www.w3.org/2000/svg"</span> version=<span class="string">"1.1"</span>&gt;</span><br><span class="line">  &lt;rect width=<span class="string">"300"</span> height=<span class="string">"100"</span></span><br><span class="line">  style=<span class="string">"fill:rgb(0,0,255);stroke-width:1;stroke:rgb(0,0,0)"</span>/&gt;</span><br><span class="line">&lt;<span class="regexp">/svg&gt;</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/圆角矩形</span></span><br><span class="line"><span class="regexp">&lt;svg xmlns="http:/</span><span class="regexp">/www.w3.org/</span><span class="number">2000</span>/svg<span class="string">" version="</span><span class="number">1.1</span><span class="string">"&gt;</span></span><br><span class="line"><span class="string">  &lt;rect x="</span><span class="number">50</span><span class="string">" y="</span><span class="number">20</span><span class="string">" rx="</span><span class="number">20</span><span class="string">" ry="</span><span class="number">20</span><span class="string">" width="</span><span class="number">150</span><span class="string">" height="</span><span class="number">150</span><span class="string">"</span></span><br><span class="line"><span class="string">  style="</span>fill:red;stroke:black;stroke-width:<span class="number">5</span>;opacity:<span class="number">0.5</span><span class="string">"/&gt;</span></span><br><span class="line"><span class="string">&lt;/svg&gt;</span></span><br></pre></td></tr></table></figure><h3 id="直线"><a href="#直线" class="headerlink" title="直线 "></a>直线 <line></line></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;svg xmlns=<span class="string">"http://www.w3.org/2000/svg"</span> version=<span class="string">"1.1"</span>&gt;</span><br><span class="line">  &lt;line x1=<span class="string">"0"</span> y1=<span class="string">"0"</span> x2=<span class="string">"200"</span> y2=<span class="string">"200"</span></span><br><span class="line">  style=<span class="string">"stroke:rgb(255,0,0);stroke-width:2"</span>/&gt;</span><br><span class="line">&lt;<span class="regexp">/svg&gt;</span></span><br></pre></td></tr></table></figure><h3 id="多边形"><a href="#多边形" class="headerlink" title="多边形 "></a>多边形 <polygon></polygon></h3><blockquote><ul><li>polygon来自希腊。”Poly”意味”many”，”gon”意味”angle”.</li></ul></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//三角形</span></span><br><span class="line">&lt;svg  height=<span class="string">"210"</span> width=<span class="string">"500"</span>&gt;</span><br><span class="line">  &lt;polygon points=<span class="string">"200,10 250,190 160,210"</span></span><br><span class="line">  style=<span class="string">"fill:lime;stroke:purple;stroke-width:1"</span>/&gt;</span><br><span class="line">&lt;<span class="regexp">/svg&gt;</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/五角星</span></span><br><span class="line"><span class="regexp">&lt;svg height="210" width="500"&gt;</span></span><br><span class="line"><span class="regexp">  &lt;polygon points="100,10 40,198 190,78 10,78 160,198"</span></span><br><span class="line"><span class="regexp">  style="fill:lime;stroke:purple;stroke-width:5;fill-rule:nonzero;" /</span>&gt;</span><br><span class="line">&lt;<span class="regexp">/svg&gt;</span></span><br></pre></td></tr></table></figure><h3 id="曲线"><a href="#曲线" class="headerlink" title="曲线 "></a>曲线 <polyline></polyline></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;svg xmlns=<span class="string">"http://www.w3.org/2000/svg"</span> version=<span class="string">"1.1"</span>&gt;</span><br><span class="line">  &lt;polyline points=<span class="string">"20,20 40,25 60,40 80,120 120,140 200,180"</span></span><br><span class="line">  style=<span class="string">"fill:none;stroke:black;stroke-width:3"</span> /&gt;</span><br><span class="line">&lt;<span class="regexp">/svg&gt;</span></span><br></pre></td></tr></table></figure><h3 id="文本"><a href="#文本" class="headerlink" title="文本 "></a>文本 <text></text></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;svg xmlns=<span class="string">"http://www.w3.org/2000/svg"</span> version=<span class="string">"1.1"</span></span><br><span class="line">xmlns:xlink=<span class="string">"http://www.w3.org/1999/xlink"</span>&gt;</span><br><span class="line">  &lt;a xlink:href=<span class="string">"http://www.w3schools.com/svg/"</span> target=<span class="string">"_blank"</span>&gt;</span><br><span class="line">    &lt;text x=<span class="string">"0"</span> y=<span class="string">"15"</span> fill=<span class="string">"red"</span>&gt;I love SVG&lt;<span class="regexp">/text&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>a&gt;</span><br><span class="line">&lt;<span class="regexp">/svg&gt;</span></span><br></pre></td></tr></table></figure><h3 id="SVG-Stroke-属性"><a href="#SVG-Stroke-属性" class="headerlink" title="SVG Stroke 属性"></a>SVG Stroke 属性</h3><blockquote><p>SVG提供了一个范围广泛stroke 属性。在本章中，我们将看看下面：</p></blockquote><h4 id="stroke"><a href="#stroke" class="headerlink" title="stroke"></a>stroke</h4><blockquote><p>定义一条线，文本或元素轮廓颜色.</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;svg xmlns=<span class="string">"http://www.w3.org/2000/svg"</span> version=<span class="string">"1.1"</span>&gt;</span><br><span class="line">  &lt;g fill=<span class="string">"none"</span>&gt;</span><br><span class="line">    &lt;path stroke=<span class="string">"red"</span> d=<span class="string">"M5 20 l215 0"</span> /&gt;</span><br><span class="line">    &lt;path stroke=<span class="string">"blue"</span> d=<span class="string">"M5 40 l215 0"</span> /&gt;</span><br><span class="line">    &lt;path stroke=<span class="string">"black"</span> d=<span class="string">"M5 60 l215 0"</span> /&gt;</span><br><span class="line">  &lt;<span class="regexp">/g&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>svg&gt;</span><br></pre></td></tr></table></figure><h4 id="stroke-width"><a href="#stroke-width" class="headerlink" title="stroke-width"></a>stroke-width</h4><blockquote><p>stroke- width属性定义了一条线，文本或元素轮廓厚度.</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;svg xmlns=<span class="string">"http://www.w3.org/2000/svg"</span> version=<span class="string">"1.1"</span>&gt;</span><br><span class="line">  &lt;g fill=<span class="string">"none"</span> stroke=<span class="string">"black"</span>&gt;</span><br><span class="line">    &lt;path stroke-width=<span class="string">"2"</span> d=<span class="string">"M5 20 l215 0"</span> /&gt;</span><br><span class="line">    &lt;path stroke-width=<span class="string">"4"</span> d=<span class="string">"M5 40 l215 0"</span> /&gt;</span><br><span class="line">    &lt;path stroke-width=<span class="string">"6"</span> d=<span class="string">"M5 60 l215 0"</span> /&gt;</span><br><span class="line">  &lt;<span class="regexp">/g&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>svg&gt;</span><br></pre></td></tr></table></figure><h4 id="stroke-linecap"><a href="#stroke-linecap" class="headerlink" title="stroke-linecap"></a>stroke-linecap</h4><blockquote><p>定义不同类型的开放路径的终结。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;svg xmlns=<span class="string">"http://www.w3.org/2000/svg"</span> version=<span class="string">"1.1"</span>&gt;</span><br><span class="line">  &lt;g fill=<span class="string">"none"</span> stroke=<span class="string">"black"</span> stroke-width=<span class="string">"6"</span>&gt;</span><br><span class="line">    &lt;path stroke-linecap=<span class="string">"butt"</span> d=<span class="string">"M5 20 l215 0"</span> /&gt;</span><br><span class="line">    &lt;path stroke-linecap=<span class="string">"round"</span> d=<span class="string">"M5 40 l215 0"</span> /&gt;</span><br><span class="line">    &lt;path stroke-linecap=<span class="string">"square"</span> d=<span class="string">"M5 60 l215 0"</span> /&gt;</span><br><span class="line">  &lt;<span class="regexp">/g&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>svg&gt;</span><br></pre></td></tr></table></figure><h4 id="stroke-dasharray"><a href="#stroke-dasharray" class="headerlink" title="stroke-dasharray"></a>stroke-dasharray</h4><blockquote><p>用于创建虚线样式。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;svg xmlns=<span class="string">"http://www.w3.org/2000/svg"</span> version=<span class="string">"1.1"</span>&gt;</span><br><span class="line">  &lt;g fill=<span class="string">"none"</span> stroke=<span class="string">"black"</span> stroke-width=<span class="string">"4"</span>&gt;</span><br><span class="line">    &lt;path stroke-dasharray=<span class="string">"5,5"</span> d=<span class="string">"M5 20 l215 0"</span> /&gt;</span><br><span class="line">    &lt;path stroke-dasharray=<span class="string">"10,10"</span> d=<span class="string">"M5 40 l215 0"</span> /&gt;</span><br><span class="line">    &lt;path stroke-dasharray=<span class="string">"20,10,5,5,5,10"</span> d=<span class="string">"M5 60 l215 0"</span> /&gt;</span><br><span class="line">  &lt;<span class="regexp">/g&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>svg&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;&amp;emsp;在web中我们经常需要进行数据的可视化，让数据的呈现更为立体形象。SVG为我们提供了一个不错的选择，以下是一些总结：&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="JavaScript" scheme="https://keviness.github.io/tags/JavaScript/"/>
    
      <category term="SVG" scheme="https://keviness.github.io/tags/SVG/"/>
    
  </entry>
  
  <entry>
    <title>web storage常用的两种方式</title>
    <link href="https://keviness.github.io/post/5b4c752e.html"/>
    <id>https://keviness.github.io/post/5b4c752e.html</id>
    <published>2020-06-26T16:00:00.000Z</published>
    <updated>2020-06-26T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>&emsp;数据是网络世界的灵魂，我们浏览网页的根本目的在于获得由数据构成的信息。在HTML5之前，这些都是由cookie完成的。但是cookie不适合大量数据的存储，因为它们由每个对服务器的请求来传递，这使得cookie速度很慢而且效率也不高。HTML5之后，网页本地存储数据有了新的选择。</p><a id="more"></a><p>&emsp;HTML5中，数据不是由每个服务器请求传递的，而是只有在请求时使用数据。它使在不影响网站性能的情况下存储大量数据成为可能。</p><h1 id="web本地存储-web-storage"><a href="#web本地存储-web-storage" class="headerlink" title="web本地存储(web storage)"></a>web本地存储(web storage)</h1><h2 id="本地存储定义："><a href="#本地存储定义：" class="headerlink" title="本地存储定义："></a>本地存储定义：</h2><blockquote><ul><li>存储对象是简单的键值存储，类似于对象。</li><li>可以像访问对象一样访问这些值，或者使用<code>Storage.getItem()</code>和 <code>Storage.setItem()</code>方法。</li></ul></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">localStorage.colorSetting = <span class="string">'#a4509b'</span>;</span><br><span class="line">localStorage[<span class="string">'colorSetting'</span>] = <span class="string">'#a4509b'</span>;</span><br><span class="line">localStorage.setItem(<span class="string">'colorSetting'</span>, <span class="string">'#a4509b'</span>);</span><br></pre></td></tr></table></figure><h2 id="本地存储常用方法"><a href="#本地存储常用方法" class="headerlink" title="本地存储常用方法"></a>本地存储常用方法</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">localStorage/sessionStorage.setItem(<span class="string">'myCat'</span>, <span class="string">'Tom'</span>);  <span class="comment">//添加项，加入到本地存储中</span></span><br><span class="line"><span class="keyword">let</span> cat = localStorage/sessionStorage.getItem(<span class="string">'myCat'</span>); <span class="comment">//获取项的相应值</span></span><br><span class="line">localStorage/sessionStorage.removeItem(<span class="string">'myCat'</span>);  <span class="comment">//移除指定项</span></span><br><span class="line">localStorage/sessionStorage.clear();  <span class="comment">//清空本地所有存储的数据</span></span><br></pre></td></tr></table></figure><h2 id="Web-Storage包含如下两种："><a href="#Web-Storage包含如下两种：" class="headerlink" title="Web Storage包含如下两种："></a>Web Storage包含如下两种：</h2><h3 id="sessionStorage"><a href="#sessionStorage" class="headerlink" title="sessionStorage"></a>sessionStorage</h3><blockquote><p><code>sessionStorage</code>方法针对一个session进行数据存储。当用户关闭浏览器窗口后，数据会被删除(页面刷新和恢复，存储数据不会清除)。</p></blockquote><h3 id="sessionStorage应用示例"><a href="#sessionStorage应用示例" class="headerlink" title="sessionStorage应用示例"></a>sessionStorage应用示例</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">clickCounter</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span>(Storage) !== <span class="string">"undefined"</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (sessionStorage.clickcount) &#123;</span><br><span class="line">            sessionStorage.clickcount = <span class="built_in">Number</span>(sessionStorage.clickcount)+<span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            sessionStorage.clickcount = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">document</span>.getElementById(<span class="string">"result"</span>).innerHTML = <span class="string">"在本 session中，点击按钮 "</span> + sessionStorage.clickcount + <span class="string">" 次。"</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">document</span>.getElementById(<span class="string">"result"</span>).innerHTML = <span class="string">"抱歉！您的浏览器不支持 Web Storage ..."</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="localStorage"><a href="#localStorage" class="headerlink" title="localStorage"></a>localStorage</h3><blockquote><p>与<code>sessionStorage</code>相似，但<code>localStorage</code>是没有时间限制的数据存储，在浏览器关闭，重新打开页面后数据仍然存在。</p></blockquote><h3 id="localStorage应用示例"><a href="#localStorage应用示例" class="headerlink" title="localStorage应用示例"></a>localStorage应用示例</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">   <span class="keyword">if</span> (localStorage.pagecount)</span><br><span class="line">&#123;</span><br><span class="line">    localStorage.pagecount=<span class="built_in">Number</span>(localStorage.pagecount) +<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">   <span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    localStorage.pagecount=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">   <span class="built_in">document</span>.write(<span class="string">"Visits: "</span> + localStorage.pagecount + <span class="string">" time(s)."</span>);</span><br></pre></td></tr></table></figure><h2 id="StorageEvent（存储事件）"><a href="#StorageEvent（存储事件）" class="headerlink" title="StorageEvent（存储事件）"></a>StorageEvent（存储事件）</h2><blockquote><ul><li>通过<code>StorageEvent</code>响应存储的变化</li><li><code>Storage</code>对象发生变化时（创建/更新/删除数据项时，重复设置相同的键值不会触发该事件，<code>Storage.clear()</code>方法至多触发一次该事件），</li><li><code>StorageEvent</code>事件在同一个页面内发生的改变不会起作用，在相同域名下的其他页面（如一个新标签或 iframe）发生的改变才会起作用。在其他域名下的页面不能访问相同的 <code>Storage</code>对象。</li><li>这里，我们为window对象添加了一个事件监听器，在当前域名相关的 <code>Storage</code>对象发生改变时该事件监听器会触发。改变的数据项的键，改变前的旧值，改变后的新值，改变的存储对象所在的文档的 URL，以及存储对象本身。</li></ul></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">    <span class="built_in">window</span>.addEventListener(<span class="string">'storage'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;  </span><br><span class="line">        <span class="built_in">document</span>.querySelector(<span class="string">'.my-key'</span>).textContent = e.key;</span><br><span class="line">        <span class="built_in">document</span>.querySelector(<span class="string">'.my-old'</span>).textContent = e.oldValue;</span><br><span class="line">        <span class="built_in">document</span>.querySelector(<span class="string">'.my-new'</span>).textContent = e.newValue;</span><br><span class="line">        <span class="built_in">document</span>.querySelector(<span class="string">'.my-url'</span>).textContent = e.url;</span><br><span class="line">        <span class="built_in">document</span>.querySelector(<span class="string">'.my-storage'</span>).textContent = e.storageArea;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Web_Storage_API/Using_the_Web_Storage_API" target="_blank" rel="noopener">MDN web storage</a></li><li><a href="https://www.w3school.com.cn/html5/html_5_webstorage.asp" target="_blank" rel="noopener">W3C html5 web storage</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;&amp;emsp;数据是网络世界的灵魂，我们浏览网页的根本目的在于获得由数据构成的信息。在HTML5之前，这些都是由cookie完成的。但是cookie不适合大量数据的存储，因为它们由每个对服务器的请求来传递，这使得cookie速度很慢而且效率也不高。HTML5之后，网页本地存储数据有了新的选择。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="JavaScript" scheme="https://keviness.github.io/tags/JavaScript/"/>
    
      <category term="storage" scheme="https://keviness.github.io/tags/storage/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript实现跨行合并table中相同单元格</title>
    <link href="https://keviness.github.io/post/6a9fb1f0.html"/>
    <id>https://keviness.github.io/post/6a9fb1f0.html</id>
    <published>2020-06-21T04:31:54.893Z</published>
    <updated>2020-06-21T04:31:54.893Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>&emsp;在web中我们经常需要用到table表格对我们的数据进行呈现，table表格能很友好地显示我们的数据，那在动态创建table时，如何进行跨行合并相同内容单元格呢？以下是一些个方法：</p><a id="more"></a><h2 id="合并表格相同列的内容"><a href="#合并表格相同列的内容" class="headerlink" title="合并表格相同列的内容"></a>合并表格相同列的内容</h2><blockquote><ul><li>table：表格或者表格ID（最好是tbody，避免把表尾给合并了)</li><li>startRow：起始行，没有标题就从0开始</li><li>endRow：终止行，此参数是递归时检查的范围，一开始时会自动赋值为最后一行</li><li>col：当前处理的列</li><li>endCol:终止列</li><li>isInit:是否初始调用，如果是则在终止行为0时自动取最后一行</li></ul></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">MergeCell</span>(<span class="params">table, startRow, endRow, col, endCol isInit</span>)  </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> (table) == <span class="string">'string'</span>)</span><br><span class="line">        table = <span class="built_in">document</span>.getElementById(table);</span><br><span class="line">    <span class="keyword">if</span> (col &gt;= table.rows[<span class="number">0</span>].cells.length || col &gt; endCol) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (isInit == <span class="literal">undefined</span>) isInit = <span class="literal">true</span>;</span><br><span class="line">    <span class="comment">//当检查第0列时检查所有行</span></span><br><span class="line">    <span class="keyword">if</span> ((col == <span class="number">0</span> || endRow == <span class="number">0</span>) &amp;&amp; isInit) &#123;</span><br><span class="line">        endRow = table.rows.length - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = startRow; i &lt; endRow; i++) &#123;</span><br><span class="line">        <span class="comment">//程序是自左向右合并</span></span><br><span class="line">        <span class="keyword">if</span> (table.rows[startRow].cells[col].innerHTML == table.rows[i + <span class="number">1</span>].cells[col].innerHTML) &#123;</span><br><span class="line">        <span class="comment">//如果相同则隐藏下一行的同列单元格</span></span><br><span class="line">            table.rows[i + <span class="number">1</span>].cells[col].style.display = <span class="string">'none'</span>;</span><br><span class="line">        <span class="comment">//更新rowSpan属性</span></span><br><span class="line">            table.rows[startRow].cells[col].rowSpan = (table.rows[startRow].cells[col].rowSpan | <span class="number">0</span>) + <span class="number">1</span>;</span><br><span class="line">        <span class="comment">//当循环到终止行前一行并且起始行和终止行不相同时递归(因为上面的代码已经检查了i+1行，所以此处只到endRow-1)</span></span><br><span class="line">            <span class="keyword">if</span> (i == endRow - <span class="number">1</span> &amp;&amp; startRow != endRow) &#123;</span><br><span class="line">            MergeCell(table, startRow, endRow, col + <span class="number">1</span>, endCol, <span class="literal">false</span>);</span><br><span class="line">            &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//起始行，终止行不变，检查下一列</span></span><br><span class="line">        MergeCell(table, startRow, i, col + <span class="number">1</span>, endCol, <span class="literal">false</span>);</span><br><span class="line">        <span class="comment">//增加起始行</span></span><br><span class="line">        startRow = i + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;&amp;emsp;在web中我们经常需要用到table表格对我们的数据进行呈现，table表格能很友好地显示我们的数据，那在动态创建table时，如何进行跨行合并相同内容单元格呢？以下是一些个方法：&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="JavaScript" scheme="https://keviness.github.io/tags/JavaScript/"/>
    
      <category term="Table" scheme="https://keviness.github.io/tags/Table/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript阻止浏览器默认事件发生</title>
    <link href="https://keviness.github.io/post/7a8ff88c.html"/>
    <id>https://keviness.github.io/post/7a8ff88c.html</id>
    <published>2020-06-07T16:00:00.000Z</published>
    <updated>2020-06-07T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>&emsp;在JavaScript Event中经常需要对事件进行阻止，主要有以下方法：<br>&emsp;event.preventDefault()阻止浏览器默认事件。<br>&emsp;event.stopPropagation()阻止元素事件冒泡。</p><a id="more"></a><h2 id="一，event-preventDefault"><a href="#一，event-preventDefault" class="headerlink" title="一，event.preventDefault()"></a>一，event.preventDefault()</h2><blockquote><p>阻止浏览器默认行为</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"/jquery/jquery.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="javascript">    $(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        $(<span class="string">"a"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span></span><br><span class="line">        event.preventDefault();</span><br><span class="line">        &#125;);</span><br><span class="line"><span class="actionscript">    &#125;);        <span class="comment">//event.preventDefault() 方法将防止上面的链接打开 URL</span></span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://w3school.com.cn/"</span>&gt;</span>W3School<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="二，event-stopPropagation"><a href="#二，event-stopPropagation" class="headerlink" title="二，event.stopPropagation()"></a>二，event.stopPropagation()</h2><blockquote><p>阻止元素事件冒泡。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">'myBtn'</span>);</span><br><span class="line"><span class="built_in">document</span>.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    alert(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">btn.onclick = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line">    event.stopPropagation();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;这样当点击btn时，绑定在document的事件不会被触发，因为btn的事件冒泡机制被组织了。</p><h2 id="三，兼容IE浏览器"><a href="#三，兼容IE浏览器" class="headerlink" title="三，兼容IE浏览器"></a>三，兼容IE浏览器</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (event.stopPropagation)&#123;  </span><br><span class="line">    event.stopPropagation();  </span><br><span class="line">&#125;<span class="keyword">else</span>&#123;  </span><br><span class="line">    event.cancelBubble=<span class="literal">true</span>;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (event.preventDefault)&#123;  </span><br><span class="line">event.preventDefault();  </span><br><span class="line">&#125;<span class="keyword">else</span>&#123;  </span><br><span class="line">    event.returnValue=<span class="literal">false</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;&amp;emsp;在JavaScript Event中经常需要对事件进行阻止，主要有以下方法：&lt;br&gt;&amp;emsp;event.preventDefault()阻止浏览器默认事件。&lt;br&gt;&amp;emsp;event.stopPropagation()阻止元素事件冒泡。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="HTML" scheme="https://keviness.github.io/tags/HTML/"/>
    
      <category term="JavaScript" scheme="https://keviness.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript对HTML进行编码与解码</title>
    <link href="https://keviness.github.io/post/e10ad84b.html"/>
    <id>https://keviness.github.io/post/e10ad84b.html</id>
    <published>2020-05-30T16:00:00.000Z</published>
    <updated>2020-05-30T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>&emsp;经常遇到一些字符需要进行转义后才能显示到界面上。此时，就需要进行编码与解码，那么如何进行编码和解码呢？以下是一些个总结：</p><a id="more"></a><h3 id="代码示例："><a href="#代码示例：" class="headerlink" title="代码示例："></a>代码示例：</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">var</span> HtmlUtil = &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*1.用浏览器内部转换器实现html编码*/</span></span><br><span class="line">    htmlEncode:<span class="function"><span class="keyword">function</span> (<span class="params">html</span>)</span>&#123;</span><br><span class="line">        <span class="comment">//动态创建一个容器标签元素</span></span><br><span class="line">        <span class="keyword">var</span> temp = <span class="built_in">document</span>.createElement (<span class="string">"div"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将要转换的字符串设置为元素的innerText(ie)或textContent(firefox，google支持)</span></span><br><span class="line">        (temp.textContent != <span class="literal">undefined</span> ) ? (temp.textContent = html) : (temp.innerText = html);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//返回元素的innerHTML，即得HTML编码的字符串</span></span><br><span class="line">        <span class="keyword">var</span> output = temp.innerHTML;</span><br><span class="line">        temp = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">return</span> output;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*2.用浏览器内部转换器实现html解码*/</span></span><br><span class="line">    htmlDecode:<span class="function"><span class="keyword">function</span> (<span class="params">text</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//动态创建一个容器标签元素</span></span><br><span class="line">        <span class="keyword">var</span> temp = <span class="built_in">document</span>.createElement(<span class="string">"div"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将要转换的字符串设置为元素的innerHTML(ie，firefox，google)</span></span><br><span class="line">        temp.innerHTML = text;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//返回这个元素的innerText(ie)或textContent(firefox，google)，即得到经HTML解码的字符串</span></span><br><span class="line">        <span class="keyword">var</span> output = temp.innerText || temp.textContent;</span><br><span class="line">        temp = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">return</span> output;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*3.用正则表达式实现html编码*/</span></span><br><span class="line">    htmlEncodeByRegExp:<span class="function"><span class="keyword">function</span> (<span class="params">str</span>)</span>&#123; </span><br><span class="line">        <span class="keyword">var</span> s = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">if</span>(str.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">        s = str.replace(<span class="regexp">/&amp;/g</span>,<span class="string">"&amp;"</span>);</span><br><span class="line">        s = s.replace(<span class="regexp">/&lt;/g</span>,<span class="string">"&lt;"</span>);</span><br><span class="line">        s = s.replace(<span class="regexp">/&gt;/g</span>,<span class="string">"&gt;"</span>);</span><br><span class="line">        s = s.replace(<span class="regexp">/ /g</span>,<span class="string">" "</span>);</span><br><span class="line">        s = s.replace(<span class="regexp">/\'/g</span>,<span class="string">"'"</span>);</span><br><span class="line">        s = s.replace(<span class="regexp">/\"/g</span>,<span class="string">""</span><span class="string">");</span></span><br><span class="line"><span class="string">        return s; </span></span><br><span class="line"><span class="string">    &#125;,</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    /*4.用正则表达式实现html解码*/</span></span><br><span class="line"><span class="string">    htmlDecodeByRegExp:function (str)&#123; </span></span><br><span class="line"><span class="string">        var s = "</span><span class="string">";</span></span><br><span class="line"><span class="string">        if(str.length == 0) return "</span><span class="string">";</span></span><br><span class="line"><span class="string">        s = str.replace("</span>&amp;<span class="string">", /&amp;/g);</span></span><br><span class="line"><span class="string">        s = s.replace("</span>&gt;<span class="string">", /&lt;/g);</span></span><br><span class="line"><span class="string">        s = s.replace("</span>&lt;<span class="string">", /&gt;/g);</span></span><br><span class="line"><span class="string">        s = s.replace("</span> <span class="string">", / /g);</span></span><br><span class="line"><span class="string">        s = s.replace("</span>\<span class="string">'", /'</span>/g);</span><br><span class="line">        s = s.replace(<span class="string">"\""</span>, /<span class="string">"/g);</span></span><br><span class="line"><span class="string">        return s; </span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;;</span></span><br><span class="line"><span class="string">&lt;/script&gt;</span></span><br></pre></td></tr></table></figure><h3 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h3><ul><li><a href="https://www.cnblogs.com/GumpYan/p/7883133.html" target="_blank" rel="noopener">JavaScript对HTML进行编码与解码</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;&amp;emsp;经常遇到一些字符需要进行转义后才能显示到界面上。此时，就需要进行编码与解码，那么如何进行编码和解码呢？以下是一些个总结：&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="JavaScript" scheme="https://keviness.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Array Sort(数组排序)</title>
    <link href="https://keviness.github.io/post/73a0fa2d.html"/>
    <id>https://keviness.github.io/post/73a0fa2d.html</id>
    <published>2020-05-25T16:00:00.000Z</published>
    <updated>2020-05-25T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>&emsp;在JavaScript中，我们经常需要对各种数据进行排序，array.sort()运用比较频繁，它可以自定义排序函数，功能强大，以下是一些个总结：</p><a id="more"></a><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><blockquote><ul><li><code>array.sort([compareFunction])</code></li><li>compareFunction：用来指定按某种顺序进行排列的函数。</li><li>返回值：排序后的数组。</li><li>注意：数组原地排序，不进行复制。</li></ul></blockquote><h3 id="详细描述"><a href="#详细描述" class="headerlink" title="详细描述"></a>详细描述</h3><blockquote><ul><li>如果没有指明compareFunction，那么元素会按照转换为的字符串的诸个字符的Unicode位点进行排序。</li><li>例如”Banana”会被排列到”cherry”之前。当数字按由小到大排序时,9出现在80之前，但因为（没有指明compareFunction），比较的数字会先被转换为字符串，所以在Unicode顺序上”80”要比”9”要靠前。</li><li>如果指明了compareFunction，那么数组会按照调用该函数的返回值排序。a和b是两个将要被比较的元素：</li></ul></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">compareFunction(a, b)&lt;<span class="number">0</span>，a会被排列到b之前；</span><br><span class="line">compareFunction(a, b)==<span class="number">0</span>，a和b的相对位置不变。</span><br><span class="line">compareFunction(a, b)&gt;<span class="number">0</span>，b排列到a之前。</span><br></pre></td></tr></table></figure><h3 id="compare-a-b-函数"><a href="#compare-a-b-函数" class="headerlink" title="compare(a, b)函数"></a>compare(a, b)函数</h3><h4 id="比较Number与String（通用）"><a href="#比较Number与String（通用）" class="headerlink" title="比较Number与String（通用）"></a>比较Number与String（通用）</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">compare</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (a &lt; b ) &#123;   </span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (a &gt; b ) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="比较Number"><a href="#比较Number" class="headerlink" title="比较Number"></a>比较Number</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">compareNumbers</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a - b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="排序示例"><a href="#排序示例" class="headerlink" title="排序示例"></a>排序示例</h3><h4 id="数组排序"><a href="#数组排序" class="headerlink" title="数组排序"></a>数组排序</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> numbers = [<span class="number">4</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">3</span>];</span><br><span class="line">numbers.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a - b;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(numbers);</span><br><span class="line">等价于：</span><br><span class="line"><span class="keyword">var</span> numbers = [<span class="number">4</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">3</span>]; </span><br><span class="line">numbers.sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a - b); </span><br><span class="line"><span class="built_in">console</span>.log(numbers);</span><br></pre></td></tr></table></figure><h4 id="对象类型排序"><a href="#对象类型排序" class="headerlink" title="对象类型排序"></a>对象类型排序</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> items = [</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">'Edward'</span>, <span class="attr">value</span>: <span class="number">21</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">'Sharpe'</span>, <span class="attr">value</span>: <span class="number">37</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">'And'</span>, <span class="attr">value</span>: <span class="number">45</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">'The'</span>, <span class="attr">value</span>: <span class="number">-12</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">'Magnetic'</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">'Zeros'</span>, <span class="attr">value</span>: <span class="number">37</span> &#125;</span><br><span class="line">];</span><br><span class="line"><span class="comment">// sort by value</span></span><br><span class="line">items.sort(<span class="function"><span class="keyword">function</span> (<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (a.value - b.value)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// sort by name</span></span><br><span class="line">items.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> nameA = a.name.toUpperCase(); </span><br><span class="line">    <span class="keyword">var</span> nameB = b.name.toUpperCase(); </span><br><span class="line">    <span class="keyword">if</span> (nameA &lt; nameB) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (nameA &gt; nameB) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="非ASCII字符排序"><a href="#非ASCII字符排序" class="headerlink" title="非ASCII字符排序"></a>非ASCII字符排序</h3><blockquote><p>当排序非ASCII字符的字符串（如包含类似e、é、è、a、ä等字符的字符串）。一些非英语语言的字符串需要使用<code>String.localeCompare</code>。</p></blockquote><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> items = [<span class="string">'réservé'</span>, <span class="string">'premier'</span>, <span class="string">'cliché'</span>];</span><br><span class="line">items.sort(<span class="function"><span class="keyword">function</span> (<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.localeCompare(b);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="用映射辅助排序"><a href="#用映射辅助排序" class="headerlink" title="用映射辅助排序"></a>用映射辅助排序</h3><blockquote><ul><li>compareFunction可能需要对元素做多次映射以实现排序，当 compareFunction较为复杂，且元素较多的时候，可能会导致很高的负载。可使用 map()辅助排序。</li><li>基本思想是首先将数组中的每个元素比较的实际值取出来，排序后再将数组恢复。</li></ul></blockquote><h4 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> list = [<span class="string">'Delta'</span>, <span class="string">'alpha'</span>, <span class="string">'CHARLIE'</span>, <span class="string">'bravo'</span>];</span><br><span class="line"><span class="keyword">var</span> mapped = list.map(<span class="function"><span class="keyword">function</span>(<span class="params">el, i</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123; <span class="attr">index</span>: i, <span class="attr">value</span>: el.toLowerCase() &#125;;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">mapped.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> +(a.value &gt; b.value) || +(a.value === b.value) - <span class="number">1</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> result = mapped.map(<span class="function"><span class="keyword">function</span>(<span class="params">el</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> list[el.index];</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;&amp;emsp;在JavaScript中，我们经常需要对各种数据进行排序，array.sort()运用比较频繁，它可以自定义排序函数，功能强大，以下是一些个总结：&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="JavaScript" scheme="https://keviness.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>用C语言实现贪吃蛇</title>
    <link href="https://keviness.github.io/post/7fccb627.html"/>
    <id>https://keviness.github.io/post/7fccb627.html</id>
    <published>2020-05-01T16:00:00.000Z</published>
    <updated>2020-05-01T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>&emsp;四月份，随着考研复试的临近，毕业论文也在此刻提上了日程，我停下了手边的前端学习计划。<br>&emsp;我想着在四月底实现心心念念的<a href="https://github.com/keviness/ExerciseProject/blob/master/snakes/snake_try.c" target="_blank" rel="noopener">贪吃蛇游戏</a>，于是就开始多线程工作啦。<br>&emsp;当一个个贪吃蛇游戏的功能模块在自己手里逐步实现时，那种快乐难以描述哈。以下是一些个工作。</p><a id="more"></a><h3 id="头文件准备工作"><a href="#头文件准备工作" class="headerlink" title="头文件准备工作"></a>头文件准备工作</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;windows.h&gt;</span><br><span class="line">&lt;conio.h&gt;</span><br><span class="line">&lt;time.h&gt;</span><br></pre></td></tr></table></figure><p>以上这头文件需要先了解，对其中常用的API需要掌握。</p><h3 id="贪吃蛇的实现原理"><a href="#贪吃蛇的实现原理" class="headerlink" title="贪吃蛇的实现原理"></a>贪吃蛇的实现原理</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">snakes</span>&#123;</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> len;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> speed;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> x[MAXSNAKE];</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> y[MAXSNAKE];</span><br><span class="line">&#125;snake;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">foods</span>&#123;</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> x;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> y;</span><br><span class="line">&#125;food;</span><br></pre></td></tr></table></figure><blockquote><ul><li>贪吃蛇的实现原理在于用结构体中的数组储存贪吃蛇的x轴与y轴的坐标。</li><li>再在相应坐标位置是打印需要的符号。</li><li>蛇的移动效果：蛇每次向前移动一个位置时，清除最后一个坐标的打印符号（打印空格符）（” “）</li><li>蛇吃食物的增长原理：每次吃完食物后，长度加一，尾部坐标不清除其符号。</li></ul></blockquote><h3 id="各个功能的实现"><a href="#各个功能的实现" class="headerlink" title="各个功能的实现"></a>各个功能的实现</h3><p>贪吃蛇的实现主要依靠以下函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">welcome</span><span class="params">(<span class="keyword">void</span>)</span></span>;  <span class="comment">//欢迎用户图形界面</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initGraph</span><span class="params">(<span class="keyword">void</span>)</span></span>;  <span class="comment">//游戏初始化界面</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">createFood</span><span class="params">(<span class="keyword">void</span>)</span></span>;  <span class="comment">//随机产生食物</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">eatFood</span><span class="params">(<span class="keyword">void</span>)</span></span>;   <span class="comment">//当蛇吃到食物时</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">movingSnake</span><span class="params">(<span class="keyword">void</span>)</span></span>;   <span class="comment">//移动蛇身</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">controlSnake</span><span class="params">(<span class="keyword">void</span>)</span></span>;   <span class="comment">//控制蛇运动</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">gotoxy</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>; <span class="comment">//移动光标到对应坐标</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">hidenCursor</span><span class="params">(<span class="keyword">void</span>)</span></span>;  <span class="comment">//隐藏光标</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">snakeStatus</span><span class="params">(<span class="keyword">void</span>)</span></span>;  <span class="comment">//判断蛇的状态</span></span><br></pre></td></tr></table></figure><blockquote><ul><li>其中对蛇的控制，和蛇身的移动是游戏的核心。</li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;&amp;emsp;四月份，随着考研复试的临近，毕业论文也在此刻提上了日程，我停下了手边的前端学习计划。&lt;br&gt;&amp;emsp;我想着在四月底实现心心念念的&lt;a href=&quot;https://github.com/keviness/ExerciseProject/blob/master/snakes/snake_try.c&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;贪吃蛇游戏&lt;/a&gt;，于是就开始多线程工作啦。&lt;br&gt;&amp;emsp;当一个个贪吃蛇游戏的功能模块在自己手里逐步实现时，那种快乐难以描述哈。以下是一些个工作。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="C" scheme="https://keviness.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript Date类型</title>
    <link href="https://keviness.github.io/post/b683b12d.html"/>
    <id>https://keviness.github.io/post/b683b12d.html</id>
    <published>2020-04-16T16:00:00.000Z</published>
    <updated>2020-04-16T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>&emsp;时间就是生命，人类每天都需要有一个时间的概念，从而知道自己度过了多久时光。所以我们每天不可避免地要获取有关时间的信息，JavaScript提供了一个很好的获得时间的方法：</p><a id="more"></a><h3 id="创建Date对象"><a href="#创建Date对象" class="headerlink" title="创建Date对象"></a>创建Date对象</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> now = <span class="keyword">new</span> <span class="built_in">Date</span>();   </span><br><span class="line"><span class="built_in">console</span>.log(now);  <span class="comment">//中国标准时间</span></span><br></pre></td></tr></table></figure><h3 id="Date解析"><a href="#Date解析" class="headerlink" title="Date解析"></a>Date解析</h3><blockquote><ul><li>Date.parse() 传入一个日期格式的字符串，该方法会返回特定的时间格式。</li></ul></blockquote><h4 id="月-日-年"><a href="#月-日-年" class="headerlink" title="月/日/年"></a>月/日/年</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> date = <span class="built_in">Date</span>.parse(<span class="string">"06/07/2017"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">Date</span>(date));</span><br></pre></td></tr></table></figure><h4 id="英文月名-日，年"><a href="#英文月名-日，年" class="headerlink" title="英文月名 日，年"></a>英文月名 日，年</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> date = <span class="built_in">Date</span>.parse(<span class="string">"June 07, 2017"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">Date</span>(date));</span><br></pre></td></tr></table></figure><hr><h3 id="Date-UTC"><a href="#Date-UTC" class="headerlink" title="Date.UTC()"></a>Date.UTC()</h3><blockquote><ul><li>接收7个参数，年，基于0的月，天，时，分，秒以及毫秒数</li></ul></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">2017</span>, <span class="number">05</span>, <span class="number">06</span>, <span class="number">18</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">Date</span>.UTC(date));</span><br></pre></td></tr></table></figure><h4 id="Date-now"><a href="#Date-now" class="headerlink" title="Date.now()"></a>Date.now()</h4><blockquote><ul><li>返回调用该方法时的毫秒数。</li></ul></blockquote><hr><h3 id="Date对象的格式化"><a href="#Date对象的格式化" class="headerlink" title="Date对象的格式化"></a>Date对象的格式化</h3><ul><li><p>dateObject.toLocaleString() </p><blockquote><p>按照与浏览器设置的地区相适应的格式返回日期和时间。</p></blockquote></li><li><p>dateObject.toString() </p><blockquote><p>返回带有时区的日期和时间。</p></blockquote></li><li><p>dateObject.valueOf() </p><blockquote><p>返回毫秒数</p></blockquote></li></ul><hr><h3 id="日期格式化方法"><a href="#日期格式化方法" class="headerlink" title="日期格式化方法"></a>日期格式化方法</h3><ul><li>toDateString() </li></ul><blockquote><ul><li>以特定于实现的格式显示星期几，月，日和年</li><li>dateObject.toDateString(); </li></ul></blockquote><ul><li>toLocaleDateString() </li></ul><blockquote><ul><li>以特定于地区的格式显示星期几，月，日和年</li><li>dateObject.toLocaleDateString();</li></ul></blockquote><ul><li>toTimeString() </li></ul><blockquote><ul><li>以特定于实现的格式显示时，分，秒和时区</li><li>dateObject.toTimeString();  </li></ul></blockquote><ul><li>toLocaleTimeString() </li></ul><blockquote><ul><li>以特定于实现的格式显示时，分，秒</li><li>dateObject.toLocaleTimeString(); </li></ul></blockquote><ul><li>toUTCString() </li></ul><blockquote><ul><li>显示完整的UTC日期</li><li>dateObject.toUTCString();</li></ul></blockquote><hr><h3 id="访问Date对象的方法"><a href="#访问Date对象的方法" class="headerlink" title="访问Date对象的方法"></a>访问Date对象的方法</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">dateObject.getFullYear() 获取年</span><br><span class="line">dateObject.getMonth() 获取月</span><br><span class="line">dateObject.getDate() 获取日</span><br><span class="line">dateObject.getHours() 获取小时</span><br><span class="line">dateObject.getMinutes() 获取分钟</span><br><span class="line">dateObject.getSeconds() 获取秒</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;&amp;emsp;时间就是生命，人类每天都需要有一个时间的概念，从而知道自己度过了多久时光。所以我们每天不可避免地要获取有关时间的信息，JavaScript提供了一个很好的获得时间的方法：&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="JavaScript" scheme="https://keviness.github.io/tags/JavaScript/"/>
    
  </entry>
  
</feed>
